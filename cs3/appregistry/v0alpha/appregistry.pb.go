// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cs3/appregistry/v0alpha/appregistry.proto

package appregistryv0alphapb

import (
	context "context"
	fmt "fmt"
	rpc "github.com/cernbox/go-cs3apis/cs3/rpc"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type FindRequest struct {
	FilenameExtension    string   `protobuf:"bytes,1,opt,name=filename_extension,json=filenameExtension,proto3" json:"filename_extension,omitempty"`
	FilenameMimetype     string   `protobuf:"bytes,2,opt,name=filename_mimetype,json=filenameMimetype,proto3" json:"filename_mimetype,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FindRequest) Reset()         { *m = FindRequest{} }
func (m *FindRequest) String() string { return proto.CompactTextString(m) }
func (*FindRequest) ProtoMessage()    {}
func (*FindRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a621a334fc05539a, []int{0}
}

func (m *FindRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FindRequest.Unmarshal(m, b)
}
func (m *FindRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FindRequest.Marshal(b, m, deterministic)
}
func (m *FindRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindRequest.Merge(m, src)
}
func (m *FindRequest) XXX_Size() int {
	return xxx_messageInfo_FindRequest.Size(m)
}
func (m *FindRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FindRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FindRequest proto.InternalMessageInfo

func (m *FindRequest) GetFilenameExtension() string {
	if m != nil {
		return m.FilenameExtension
	}
	return ""
}

func (m *FindRequest) GetFilenameMimetype() string {
	if m != nil {
		return m.FilenameMimetype
	}
	return ""
}

type FindResponse struct {
	Status               *rpc.Status      `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	AppProviderInfo      *AppProviderInfo `protobuf:"bytes,2,opt,name=app_provider_info,json=appProviderInfo,proto3" json:"app_provider_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *FindResponse) Reset()         { *m = FindResponse{} }
func (m *FindResponse) String() string { return proto.CompactTextString(m) }
func (*FindResponse) ProtoMessage()    {}
func (*FindResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a621a334fc05539a, []int{1}
}

func (m *FindResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FindResponse.Unmarshal(m, b)
}
func (m *FindResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FindResponse.Marshal(b, m, deterministic)
}
func (m *FindResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindResponse.Merge(m, src)
}
func (m *FindResponse) XXX_Size() int {
	return xxx_messageInfo_FindResponse.Size(m)
}
func (m *FindResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FindResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FindResponse proto.InternalMessageInfo

func (m *FindResponse) GetStatus() *rpc.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *FindResponse) GetAppProviderInfo() *AppProviderInfo {
	if m != nil {
		return m.AppProviderInfo
	}
	return nil
}

func init() {
	proto.RegisterType((*FindRequest)(nil), "cs3.appregistryv0alpha.FindRequest")
	proto.RegisterType((*FindResponse)(nil), "cs3.appregistryv0alpha.FindResponse")
}

func init() {
	proto.RegisterFile("cs3/appregistry/v0alpha/appregistry.proto", fileDescriptor_a621a334fc05539a)
}

var fileDescriptor_a621a334fc05539a = []byte{
	// 339 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x91, 0xdf, 0x4a, 0x02, 0x41,
	0x14, 0x87, 0x59, 0x09, 0xa1, 0x31, 0x50, 0x07, 0x11, 0xd9, 0xab, 0xb0, 0xc0, 0x22, 0x5a, 0xc5,
	0x7d, 0x82, 0x5d, 0x29, 0xe8, 0x22, 0xb2, 0x5d, 0x88, 0x88, 0x60, 0x59, 0xc7, 0xa3, 0x0d, 0xb8,
	0x33, 0xa7, 0x99, 0x51, 0xf2, 0xb2, 0xfb, 0x9e, 0xa2, 0xcb, 0x1e, 0xa5, 0xa7, 0x8a, 0xfd, 0x63,
	0x6d, 0x98, 0xdd, 0x7e, 0xbf, 0x6f, 0xce, 0x39, 0x73, 0x0e, 0x39, 0x65, 0xda, 0xed, 0xc7, 0x88,
	0x0a, 0xe6, 0x5c, 0x1b, 0xb5, 0xee, 0xaf, 0x06, 0xf1, 0x02, 0x9f, 0xe2, 0x32, 0x73, 0x50, 0x49,
	0x23, 0x69, 0x9b, 0x69, 0xd7, 0x29, 0xe1, 0xc2, 0xb4, 0x7b, 0xbb, 0x4a, 0x28, 0xd0, 0x72, 0xa9,
	0x18, 0xe8, 0xbc, 0x80, 0xdd, 0x4a, 0x45, 0x85, 0xac, 0xaf, 0x4d, 0x6c, 0x96, 0x05, 0xed, 0x72,
	0x52, 0xbb, 0xe4, 0x62, 0x1a, 0xc0, 0xf3, 0x12, 0xb4, 0xa1, 0xe7, 0x84, 0xce, 0xf8, 0x02, 0x44,
	0x9c, 0x40, 0x04, 0x2f, 0x06, 0x84, 0xe6, 0x52, 0x74, 0xac, 0x43, 0xeb, 0x64, 0x3f, 0x68, 0x6e,
	0x92, 0x8b, 0x4d, 0x40, 0xcf, 0xc8, 0x37, 0x8c, 0x12, 0x9e, 0x80, 0x59, 0x23, 0x74, 0x2a, 0x99,
	0xdd, 0xd8, 0x04, 0xd7, 0x05, 0xef, 0xbe, 0x59, 0xe4, 0x20, 0xef, 0xa5, 0x51, 0x0a, 0x0d, 0xb4,
	0x47, 0xaa, 0xf9, 0x2c, 0x59, 0x83, 0xda, 0xb0, 0xee, 0xa4, 0x7f, 0x54, 0xc8, 0x9c, 0x30, 0xc3,
	0x41, 0x11, 0xd3, 0x90, 0x34, 0x63, 0xc4, 0x08, 0x95, 0x5c, 0xf1, 0x29, 0xa8, 0x88, 0x8b, 0x99,
	0xcc, 0xda, 0xd4, 0x86, 0x3d, 0xe7, 0xef, 0xbd, 0x38, 0x1e, 0xe2, 0xb8, 0xf0, 0xaf, 0xc4, 0x4c,
	0x06, 0xf5, 0xf8, 0x37, 0x18, 0xce, 0x09, 0xf5, 0x10, 0x83, 0xe2, 0x59, 0x08, 0x6a, 0xc5, 0x19,
	0xd0, 0x5b, 0xb2, 0x97, 0xce, 0x48, 0x8f, 0x76, 0xd5, 0x2d, 0x6d, 0xcb, 0x3e, 0xfe, 0x5f, 0xca,
	0xbf, 0xe9, 0xbf, 0x5a, 0xc4, 0x66, 0x32, 0xd9, 0xe1, 0xfa, 0x0d, 0xef, 0x87, 0x8d, 0xd3, 0x9b,
	0x8c, 0xad, 0x87, 0xd6, 0xb6, 0x87, 0x93, 0xf7, 0x4a, 0x75, 0xe4, 0xdf, 0xdc, 0x7b, 0xfe, 0x47,
	0xa5, 0x3d, 0x0a, 0x5d, 0xa7, 0x34, 0xfd, 0xdd, 0xc0, 0x4b, 0x9d, 0xcf, 0x2c, 0x78, 0xdc, 0x0e,
	0x26, 0xd5, 0xec, 0xda, 0xee, 0x57, 0x00, 0x00, 0x00, 0xff, 0xff, 0x9c, 0xb3, 0x40, 0x98, 0x71,
	0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AppRegistryServiceClient is the client API for AppRegistryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AppRegistryServiceClient interface {
	Find(ctx context.Context, in *FindRequest, opts ...grpc.CallOption) (*FindResponse, error)
}

type appRegistryServiceClient struct {
	cc *grpc.ClientConn
}

func NewAppRegistryServiceClient(cc *grpc.ClientConn) AppRegistryServiceClient {
	return &appRegistryServiceClient{cc}
}

func (c *appRegistryServiceClient) Find(ctx context.Context, in *FindRequest, opts ...grpc.CallOption) (*FindResponse, error) {
	out := new(FindResponse)
	err := c.cc.Invoke(ctx, "/cs3.appregistryv0alpha.AppRegistryService/Find", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppRegistryServiceServer is the server API for AppRegistryService service.
type AppRegistryServiceServer interface {
	Find(context.Context, *FindRequest) (*FindResponse, error)
}

func RegisterAppRegistryServiceServer(s *grpc.Server, srv AppRegistryServiceServer) {
	s.RegisterService(&_AppRegistryService_serviceDesc, srv)
}

func _AppRegistryService_Find_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppRegistryServiceServer).Find(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.appregistryv0alpha.AppRegistryService/Find",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppRegistryServiceServer).Find(ctx, req.(*FindRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AppRegistryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cs3.appregistryv0alpha.AppRegistryService",
	HandlerType: (*AppRegistryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Find",
			Handler:    _AppRegistryService_Find_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cs3/appregistry/v0alpha/appregistry.proto",
}
