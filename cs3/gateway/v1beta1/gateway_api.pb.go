// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cs3/gateway/v1beta1/gateway_api.proto

package gatewayv1beta1

import (
	context "context"
	fmt "fmt"
	v1beta14 "github.com/cs3org/go-cs3apis/cs3/app/provider/v1beta1"
	v1beta19 "github.com/cs3org/go-cs3apis/cs3/app/registry/v1beta1"
	v1beta110 "github.com/cs3org/go-cs3apis/cs3/auth/registry/v1beta1"
	v1beta12 "github.com/cs3org/go-cs3apis/cs3/identity/user/v1beta1"
	v1beta113 "github.com/cs3org/go-cs3apis/cs3/ocm/core/v1beta1"
	v1beta111 "github.com/cs3org/go-cs3apis/cs3/ocm/invite/v1beta1"
	v1beta112 "github.com/cs3org/go-cs3apis/cs3/ocm/provider/v1beta1"
	v1beta16 "github.com/cs3org/go-cs3apis/cs3/preferences/v1beta1"
	v1beta11 "github.com/cs3org/go-cs3apis/cs3/rpc/v1beta1"
	v1beta15 "github.com/cs3org/go-cs3apis/cs3/sharing/collaboration/v1beta1"
	v1beta17 "github.com/cs3org/go-cs3apis/cs3/sharing/link/v1beta1"
	v1beta18 "github.com/cs3org/go-cs3apis/cs3/sharing/ocm/v1beta1"
	v1beta13 "github.com/cs3org/go-cs3apis/cs3/storage/provider/v1beta1"
	v1beta1 "github.com/cs3org/go-cs3apis/cs3/types/v1beta1"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type AuthenticateRequest struct {
	// OPTIONAL.
	// Opaque information.
	Opaque *v1beta1.Opaque `protobuf:"bytes,1,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// REQUIRED.
	// The type of authentication to use.
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// OPTIONAL.
	// The id of the client.
	// For basic authentication with username and password
	// both client_id and client_secret are expected to be filled.
	// However, for example, for OIDC only a token is necessary.
	ClientId string `protobuf:"bytes,3,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	// OPTIONAL.
	// The secret of the client.
	ClientSecret         string   `protobuf:"bytes,4,opt,name=client_secret,json=clientSecret,proto3" json:"client_secret,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AuthenticateRequest) Reset()         { *m = AuthenticateRequest{} }
func (m *AuthenticateRequest) String() string { return proto.CompactTextString(m) }
func (*AuthenticateRequest) ProtoMessage()    {}
func (*AuthenticateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d35d050f2c88549, []int{0}
}

func (m *AuthenticateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AuthenticateRequest.Unmarshal(m, b)
}
func (m *AuthenticateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AuthenticateRequest.Marshal(b, m, deterministic)
}
func (m *AuthenticateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthenticateRequest.Merge(m, src)
}
func (m *AuthenticateRequest) XXX_Size() int {
	return xxx_messageInfo_AuthenticateRequest.Size(m)
}
func (m *AuthenticateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthenticateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AuthenticateRequest proto.InternalMessageInfo

func (m *AuthenticateRequest) GetOpaque() *v1beta1.Opaque {
	if m != nil {
		return m.Opaque
	}
	return nil
}

func (m *AuthenticateRequest) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *AuthenticateRequest) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

func (m *AuthenticateRequest) GetClientSecret() string {
	if m != nil {
		return m.ClientSecret
	}
	return ""
}

type AuthenticateResponse struct {
	// REQUIRED.
	// The response status.
	Status *v1beta11.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// OPTIONAL.
	// Opaque information.
	Opaque *v1beta1.Opaque `protobuf:"bytes,2,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// REQUIRED.
	// The access token.
	Token string `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
	// REQUIRED.
	// The user.
	User                 *v1beta12.User `protobuf:"bytes,4,opt,name=user,proto3" json:"user,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *AuthenticateResponse) Reset()         { *m = AuthenticateResponse{} }
func (m *AuthenticateResponse) String() string { return proto.CompactTextString(m) }
func (*AuthenticateResponse) ProtoMessage()    {}
func (*AuthenticateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d35d050f2c88549, []int{1}
}

func (m *AuthenticateResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AuthenticateResponse.Unmarshal(m, b)
}
func (m *AuthenticateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AuthenticateResponse.Marshal(b, m, deterministic)
}
func (m *AuthenticateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthenticateResponse.Merge(m, src)
}
func (m *AuthenticateResponse) XXX_Size() int {
	return xxx_messageInfo_AuthenticateResponse.Size(m)
}
func (m *AuthenticateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthenticateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AuthenticateResponse proto.InternalMessageInfo

func (m *AuthenticateResponse) GetStatus() *v1beta11.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *AuthenticateResponse) GetOpaque() *v1beta1.Opaque {
	if m != nil {
		return m.Opaque
	}
	return nil
}

func (m *AuthenticateResponse) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *AuthenticateResponse) GetUser() *v1beta12.User {
	if m != nil {
		return m.User
	}
	return nil
}

type WhoAmIRequest struct {
	// OPTIONAL.
	// Opaque information.
	Opaque *v1beta1.Opaque `protobuf:"bytes,1,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// REQUIRED.
	// The access token.
	Token                string   `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WhoAmIRequest) Reset()         { *m = WhoAmIRequest{} }
func (m *WhoAmIRequest) String() string { return proto.CompactTextString(m) }
func (*WhoAmIRequest) ProtoMessage()    {}
func (*WhoAmIRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d35d050f2c88549, []int{2}
}

func (m *WhoAmIRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WhoAmIRequest.Unmarshal(m, b)
}
func (m *WhoAmIRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WhoAmIRequest.Marshal(b, m, deterministic)
}
func (m *WhoAmIRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WhoAmIRequest.Merge(m, src)
}
func (m *WhoAmIRequest) XXX_Size() int {
	return xxx_messageInfo_WhoAmIRequest.Size(m)
}
func (m *WhoAmIRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WhoAmIRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WhoAmIRequest proto.InternalMessageInfo

func (m *WhoAmIRequest) GetOpaque() *v1beta1.Opaque {
	if m != nil {
		return m.Opaque
	}
	return nil
}

func (m *WhoAmIRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type WhoAmIResponse struct {
	// REQUIRED.
	// The response status.
	Status *v1beta11.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// OPTIONAL.
	// Opaque information.
	Opaque *v1beta1.Opaque `protobuf:"bytes,2,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// REQUIRED.
	// The user information.
	User                 *v1beta12.User `protobuf:"bytes,3,opt,name=user,proto3" json:"user,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *WhoAmIResponse) Reset()         { *m = WhoAmIResponse{} }
func (m *WhoAmIResponse) String() string { return proto.CompactTextString(m) }
func (*WhoAmIResponse) ProtoMessage()    {}
func (*WhoAmIResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d35d050f2c88549, []int{3}
}

func (m *WhoAmIResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WhoAmIResponse.Unmarshal(m, b)
}
func (m *WhoAmIResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WhoAmIResponse.Marshal(b, m, deterministic)
}
func (m *WhoAmIResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WhoAmIResponse.Merge(m, src)
}
func (m *WhoAmIResponse) XXX_Size() int {
	return xxx_messageInfo_WhoAmIResponse.Size(m)
}
func (m *WhoAmIResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_WhoAmIResponse.DiscardUnknown(m)
}

var xxx_messageInfo_WhoAmIResponse proto.InternalMessageInfo

func (m *WhoAmIResponse) GetStatus() *v1beta11.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *WhoAmIResponse) GetOpaque() *v1beta1.Opaque {
	if m != nil {
		return m.Opaque
	}
	return nil
}

func (m *WhoAmIResponse) GetUser() *v1beta12.User {
	if m != nil {
		return m.User
	}
	return nil
}

type GetQuotaRequest struct {
	// OPTIONAL.
	// Opaque information.
	Opaque *v1beta1.Opaque `protobuf:"bytes,1,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// REQUIRED.
	// The reference to which the action should be performed.
	Ref                  *v1beta13.Reference `protobuf:"bytes,2,opt,name=ref,proto3" json:"ref,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *GetQuotaRequest) Reset()         { *m = GetQuotaRequest{} }
func (m *GetQuotaRequest) String() string { return proto.CompactTextString(m) }
func (*GetQuotaRequest) ProtoMessage()    {}
func (*GetQuotaRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d35d050f2c88549, []int{4}
}

func (m *GetQuotaRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetQuotaRequest.Unmarshal(m, b)
}
func (m *GetQuotaRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetQuotaRequest.Marshal(b, m, deterministic)
}
func (m *GetQuotaRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetQuotaRequest.Merge(m, src)
}
func (m *GetQuotaRequest) XXX_Size() int {
	return xxx_messageInfo_GetQuotaRequest.Size(m)
}
func (m *GetQuotaRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetQuotaRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetQuotaRequest proto.InternalMessageInfo

func (m *GetQuotaRequest) GetOpaque() *v1beta1.Opaque {
	if m != nil {
		return m.Opaque
	}
	return nil
}

func (m *GetQuotaRequest) GetRef() *v1beta13.Reference {
	if m != nil {
		return m.Ref
	}
	return nil
}

type ListRecycleRequest struct {
	// OPTIONAL.
	// Opaque information.
	Opaque *v1beta1.Opaque `protobuf:"bytes,1,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// REQUIRED.
	// The reference to which the action should be performed.
	Ref *v1beta13.Reference `protobuf:"bytes,2,opt,name=ref,proto3" json:"ref,omitempty"`
	// OPTIONAL.
	// SHOULD be specified.
	// The start time range to query for recycle items.
	// The value is the Unix Epoch timestamp in seconds.
	FromTs *v1beta1.Timestamp `protobuf:"bytes,3,opt,name=from_ts,json=fromTs,proto3" json:"from_ts,omitempty"`
	// OPTIONAL.
	// SHOULD be specified.
	// The end time range to query for recycle items.
	// The value is Unix Epoch timestamp in seconds.
	ToTs                 *v1beta1.Timestamp `protobuf:"bytes,4,opt,name=to_ts,json=toTs,proto3" json:"to_ts,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *ListRecycleRequest) Reset()         { *m = ListRecycleRequest{} }
func (m *ListRecycleRequest) String() string { return proto.CompactTextString(m) }
func (*ListRecycleRequest) ProtoMessage()    {}
func (*ListRecycleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d35d050f2c88549, []int{5}
}

func (m *ListRecycleRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListRecycleRequest.Unmarshal(m, b)
}
func (m *ListRecycleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListRecycleRequest.Marshal(b, m, deterministic)
}
func (m *ListRecycleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListRecycleRequest.Merge(m, src)
}
func (m *ListRecycleRequest) XXX_Size() int {
	return xxx_messageInfo_ListRecycleRequest.Size(m)
}
func (m *ListRecycleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListRecycleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListRecycleRequest proto.InternalMessageInfo

func (m *ListRecycleRequest) GetOpaque() *v1beta1.Opaque {
	if m != nil {
		return m.Opaque
	}
	return nil
}

func (m *ListRecycleRequest) GetRef() *v1beta13.Reference {
	if m != nil {
		return m.Ref
	}
	return nil
}

func (m *ListRecycleRequest) GetFromTs() *v1beta1.Timestamp {
	if m != nil {
		return m.FromTs
	}
	return nil
}

func (m *ListRecycleRequest) GetToTs() *v1beta1.Timestamp {
	if m != nil {
		return m.ToTs
	}
	return nil
}

type ListRecycleStreamRequest struct {
	// OPTIONAL.
	// Opaque information.
	Opaque *v1beta1.Opaque `protobuf:"bytes,1,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// REQUIRED.
	// The reference to which the action should be performed.
	Ref *v1beta13.Reference `protobuf:"bytes,2,opt,name=ref,proto3" json:"ref,omitempty"`
	// OPTIONAL.
	// SHOULD be specified.
	// The start time range to query for recycle items.
	// The value is the Unix Epoch timestamp in seconds.
	FromTs *v1beta1.Timestamp `protobuf:"bytes,3,opt,name=from_ts,json=fromTs,proto3" json:"from_ts,omitempty"`
	// OPTIONAL.
	// SHOULD be specified.
	// The end time range to query for recycle items.
	// The value is Unix Epoch timestamp in seconds.
	ToTs                 *v1beta1.Timestamp `protobuf:"bytes,4,opt,name=to_ts,json=toTs,proto3" json:"to_ts,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *ListRecycleStreamRequest) Reset()         { *m = ListRecycleStreamRequest{} }
func (m *ListRecycleStreamRequest) String() string { return proto.CompactTextString(m) }
func (*ListRecycleStreamRequest) ProtoMessage()    {}
func (*ListRecycleStreamRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d35d050f2c88549, []int{6}
}

func (m *ListRecycleStreamRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListRecycleStreamRequest.Unmarshal(m, b)
}
func (m *ListRecycleStreamRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListRecycleStreamRequest.Marshal(b, m, deterministic)
}
func (m *ListRecycleStreamRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListRecycleStreamRequest.Merge(m, src)
}
func (m *ListRecycleStreamRequest) XXX_Size() int {
	return xxx_messageInfo_ListRecycleStreamRequest.Size(m)
}
func (m *ListRecycleStreamRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListRecycleStreamRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListRecycleStreamRequest proto.InternalMessageInfo

func (m *ListRecycleStreamRequest) GetOpaque() *v1beta1.Opaque {
	if m != nil {
		return m.Opaque
	}
	return nil
}

func (m *ListRecycleStreamRequest) GetRef() *v1beta13.Reference {
	if m != nil {
		return m.Ref
	}
	return nil
}

func (m *ListRecycleStreamRequest) GetFromTs() *v1beta1.Timestamp {
	if m != nil {
		return m.FromTs
	}
	return nil
}

func (m *ListRecycleStreamRequest) GetToTs() *v1beta1.Timestamp {
	if m != nil {
		return m.ToTs
	}
	return nil
}

type PurgeRecycleRequest struct {
	// OPTIONAL.
	// Opaque information.
	Opaque *v1beta1.Opaque `protobuf:"bytes,1,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// REQUIRED.
	// The reference to which the action should be performed.
	Ref                  *v1beta13.Reference `protobuf:"bytes,2,opt,name=ref,proto3" json:"ref,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *PurgeRecycleRequest) Reset()         { *m = PurgeRecycleRequest{} }
func (m *PurgeRecycleRequest) String() string { return proto.CompactTextString(m) }
func (*PurgeRecycleRequest) ProtoMessage()    {}
func (*PurgeRecycleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d35d050f2c88549, []int{7}
}

func (m *PurgeRecycleRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PurgeRecycleRequest.Unmarshal(m, b)
}
func (m *PurgeRecycleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PurgeRecycleRequest.Marshal(b, m, deterministic)
}
func (m *PurgeRecycleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PurgeRecycleRequest.Merge(m, src)
}
func (m *PurgeRecycleRequest) XXX_Size() int {
	return xxx_messageInfo_PurgeRecycleRequest.Size(m)
}
func (m *PurgeRecycleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PurgeRecycleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PurgeRecycleRequest proto.InternalMessageInfo

func (m *PurgeRecycleRequest) GetOpaque() *v1beta1.Opaque {
	if m != nil {
		return m.Opaque
	}
	return nil
}

func (m *PurgeRecycleRequest) GetRef() *v1beta13.Reference {
	if m != nil {
		return m.Ref
	}
	return nil
}

type InitiateFileDownloadResponse struct {
	// REQUIRED.
	// The response status.
	Status *v1beta11.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// OPTIONAL.
	// Opaque information.
	Opaque *v1beta1.Opaque `protobuf:"bytes,2,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// REQUIRED.
	// The endpoint where to downooad the data.
	// The value MUST be a Uniform Resource Identifier (URI)
	// as specified in RFC 3986.
	DownloadEndpoint string `protobuf:"bytes,3,opt,name=download_endpoint,json=downloadEndpoint,proto3" json:"download_endpoint,omitempty"`
	// REQUIRED.
	// Tells to the gateway if the client should be exposed directly to the download_endpoint.
	Expose bool `protobuf:"varint,5,opt,name=expose,proto3" json:"expose,omitempty"`
	// OPTIONAL.
	// A token that MUST be validated by the data gateway for the upload.
	// Only makes sense for uploads passing through the data gateway.
	Token                string   `protobuf:"bytes,6,opt,name=token,proto3" json:"token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InitiateFileDownloadResponse) Reset()         { *m = InitiateFileDownloadResponse{} }
func (m *InitiateFileDownloadResponse) String() string { return proto.CompactTextString(m) }
func (*InitiateFileDownloadResponse) ProtoMessage()    {}
func (*InitiateFileDownloadResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d35d050f2c88549, []int{8}
}

func (m *InitiateFileDownloadResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InitiateFileDownloadResponse.Unmarshal(m, b)
}
func (m *InitiateFileDownloadResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InitiateFileDownloadResponse.Marshal(b, m, deterministic)
}
func (m *InitiateFileDownloadResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InitiateFileDownloadResponse.Merge(m, src)
}
func (m *InitiateFileDownloadResponse) XXX_Size() int {
	return xxx_messageInfo_InitiateFileDownloadResponse.Size(m)
}
func (m *InitiateFileDownloadResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_InitiateFileDownloadResponse.DiscardUnknown(m)
}

var xxx_messageInfo_InitiateFileDownloadResponse proto.InternalMessageInfo

func (m *InitiateFileDownloadResponse) GetStatus() *v1beta11.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *InitiateFileDownloadResponse) GetOpaque() *v1beta1.Opaque {
	if m != nil {
		return m.Opaque
	}
	return nil
}

func (m *InitiateFileDownloadResponse) GetDownloadEndpoint() string {
	if m != nil {
		return m.DownloadEndpoint
	}
	return ""
}

func (m *InitiateFileDownloadResponse) GetExpose() bool {
	if m != nil {
		return m.Expose
	}
	return false
}

func (m *InitiateFileDownloadResponse) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type InitiateFileUploadResponse struct {
	// REQUIRED.
	// The response status.
	Status *v1beta11.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// OPTIONAL.
	// Opaque information.
	Opaque *v1beta1.Opaque `protobuf:"bytes,2,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// REQUIRED.
	// The endpoint where to upload the data.
	// The value MUST be a Uniform Resource Identifier (URI)
	// as specified in RFC 3986.
	UploadEndpoint string `protobuf:"bytes,3,opt,name=upload_endpoint,json=uploadEndpoint,proto3" json:"upload_endpoint,omitempty"`
	// REQUIRED.
	// List of available checksums
	// the client can use when sending
	// the file.
	AvailableChecksums []*v1beta13.ResourceChecksumPriority `protobuf:"bytes,4,rep,name=available_checksums,json=availableChecksums,proto3" json:"available_checksums,omitempty"`
	// OPTIONAL.
	// A token that MUST be validated by the data gateway for the upload.
	// Only makes sense for uploads passing through the data gateway.
	Token                string   `protobuf:"bytes,5,opt,name=token,proto3" json:"token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InitiateFileUploadResponse) Reset()         { *m = InitiateFileUploadResponse{} }
func (m *InitiateFileUploadResponse) String() string { return proto.CompactTextString(m) }
func (*InitiateFileUploadResponse) ProtoMessage()    {}
func (*InitiateFileUploadResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d35d050f2c88549, []int{9}
}

func (m *InitiateFileUploadResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InitiateFileUploadResponse.Unmarshal(m, b)
}
func (m *InitiateFileUploadResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InitiateFileUploadResponse.Marshal(b, m, deterministic)
}
func (m *InitiateFileUploadResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InitiateFileUploadResponse.Merge(m, src)
}
func (m *InitiateFileUploadResponse) XXX_Size() int {
	return xxx_messageInfo_InitiateFileUploadResponse.Size(m)
}
func (m *InitiateFileUploadResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_InitiateFileUploadResponse.DiscardUnknown(m)
}

var xxx_messageInfo_InitiateFileUploadResponse proto.InternalMessageInfo

func (m *InitiateFileUploadResponse) GetStatus() *v1beta11.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *InitiateFileUploadResponse) GetOpaque() *v1beta1.Opaque {
	if m != nil {
		return m.Opaque
	}
	return nil
}

func (m *InitiateFileUploadResponse) GetUploadEndpoint() string {
	if m != nil {
		return m.UploadEndpoint
	}
	return ""
}

func (m *InitiateFileUploadResponse) GetAvailableChecksums() []*v1beta13.ResourceChecksumPriority {
	if m != nil {
		return m.AvailableChecksums
	}
	return nil
}

func (m *InitiateFileUploadResponse) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type ListAuthProvidersResponse struct {
	// REQUIRED.
	// The response status.
	Status *v1beta11.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// OPTIONAL.
	// Opaque information.
	Opaque *v1beta1.Opaque `protobuf:"bytes,2,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// REQUIRED.
	// The list of auth types.
	// TODO(labkode): maybe add description?
	Types                []string `protobuf:"bytes,3,rep,name=types,proto3" json:"types,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListAuthProvidersResponse) Reset()         { *m = ListAuthProvidersResponse{} }
func (m *ListAuthProvidersResponse) String() string { return proto.CompactTextString(m) }
func (*ListAuthProvidersResponse) ProtoMessage()    {}
func (*ListAuthProvidersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d35d050f2c88549, []int{10}
}

func (m *ListAuthProvidersResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListAuthProvidersResponse.Unmarshal(m, b)
}
func (m *ListAuthProvidersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListAuthProvidersResponse.Marshal(b, m, deterministic)
}
func (m *ListAuthProvidersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListAuthProvidersResponse.Merge(m, src)
}
func (m *ListAuthProvidersResponse) XXX_Size() int {
	return xxx_messageInfo_ListAuthProvidersResponse.Size(m)
}
func (m *ListAuthProvidersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListAuthProvidersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListAuthProvidersResponse proto.InternalMessageInfo

func (m *ListAuthProvidersResponse) GetStatus() *v1beta11.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *ListAuthProvidersResponse) GetOpaque() *v1beta1.Opaque {
	if m != nil {
		return m.Opaque
	}
	return nil
}

func (m *ListAuthProvidersResponse) GetTypes() []string {
	if m != nil {
		return m.Types
	}
	return nil
}

func init() {
	proto.RegisterType((*AuthenticateRequest)(nil), "cs3.gateway.v1beta1.AuthenticateRequest")
	proto.RegisterType((*AuthenticateResponse)(nil), "cs3.gateway.v1beta1.AuthenticateResponse")
	proto.RegisterType((*WhoAmIRequest)(nil), "cs3.gateway.v1beta1.WhoAmIRequest")
	proto.RegisterType((*WhoAmIResponse)(nil), "cs3.gateway.v1beta1.WhoAmIResponse")
	proto.RegisterType((*GetQuotaRequest)(nil), "cs3.gateway.v1beta1.GetQuotaRequest")
	proto.RegisterType((*ListRecycleRequest)(nil), "cs3.gateway.v1beta1.ListRecycleRequest")
	proto.RegisterType((*ListRecycleStreamRequest)(nil), "cs3.gateway.v1beta1.ListRecycleStreamRequest")
	proto.RegisterType((*PurgeRecycleRequest)(nil), "cs3.gateway.v1beta1.PurgeRecycleRequest")
	proto.RegisterType((*InitiateFileDownloadResponse)(nil), "cs3.gateway.v1beta1.InitiateFileDownloadResponse")
	proto.RegisterType((*InitiateFileUploadResponse)(nil), "cs3.gateway.v1beta1.InitiateFileUploadResponse")
	proto.RegisterType((*ListAuthProvidersResponse)(nil), "cs3.gateway.v1beta1.ListAuthProvidersResponse")
}

func init() {
	proto.RegisterFile("cs3/gateway/v1beta1/gateway_api.proto", fileDescriptor_2d35d050f2c88549)
}

var fileDescriptor_2d35d050f2c88549 = []byte{
	// 2107 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x5a, 0x6f, 0x6f, 0x1c, 0x47,
	0x19, 0xd7, 0xda, 0x8e, 0x93, 0x8c, 0x63, 0x27, 0x99, 0x4b, 0x5b, 0xd7, 0x04, 0x11, 0xb9, 0x14,
	0x3b, 0x38, 0xb9, 0x8b, 0xed, 0x26, 0x6d, 0xd2, 0x16, 0xc9, 0x76, 0xc8, 0x71, 0x2a, 0x51, 0xdc,
	0x73, 0x5c, 0x0a, 0x2a, 0x32, 0xeb, 0xbd, 0xc7, 0xbe, 0x55, 0xf6, 0x76, 0x36, 0x33, 0x73, 0x76,
	0x4e, 0x2a, 0x05, 0x04, 0xe2, 0x8f, 0x80, 0x17, 0x08, 0x90, 0x78, 0xc5, 0x0b, 0x5e, 0x01, 0xdf,
	0x83, 0x37, 0x7c, 0x07, 0xbe, 0x01, 0xaf, 0xf8, 0x04, 0x68, 0x76, 0x66, 0x76, 0x67, 0xf6, 0xf6,
	0x6e, 0xe7, 0x5c, 0x29, 0x95, 0xfa, 0xce, 0x3b, 0xf3, 0xfb, 0x3d, 0xbf, 0xdf, 0x3c, 0x33, 0xfb,
	0xcc, 0xec, 0x9c, 0xd1, 0x9b, 0x01, 0xdb, 0x6c, 0x1c, 0xfb, 0x1c, 0x4e, 0xfd, 0x41, 0xe3, 0x64,
	0xfd, 0x10, 0xb8, 0xbf, 0xae, 0x9f, 0x0f, 0xfc, 0x24, 0xac, 0x27, 0x94, 0x70, 0x82, 0x6b, 0x01,
	0xdb, 0xac, 0xab, 0xe6, 0xba, 0x82, 0x2d, 0xad, 0x09, 0xae, 0x9f, 0x24, 0x8d, 0x84, 0x92, 0x93,
	0xb0, 0x03, 0x34, 0x0b, 0xa0, 0x1b, 0xf2, 0x08, 0x39, 0x98, 0xc2, 0x71, 0xc8, 0x38, 0xcd, 0xd5,
	0x74, 0x83, 0x01, 0xbe, 0x95, 0x82, 0xfb, 0xbc, 0xeb, 0x84, 0xbe, 0x29, 0xd0, 0x61, 0x07, 0x62,
	0x1e, 0xf2, 0x41, 0xa3, 0xcf, 0x0c, 0x23, 0x14, 0x18, 0xe9, 0xd3, 0x00, 0x98, 0x82, 0xae, 0x8e,
	0x86, 0x8a, 0x07, 0x23, 0xe8, 0x8a, 0x40, 0x92, 0xa0, 0xd7, 0x08, 0x08, 0x85, 0x0c, 0x44, 0x82,
	0xde, 0x81, 0x68, 0x28, 0x03, 0x86, 0xf1, 0x49, 0xc8, 0x73, 0xa8, 0x7c, 0x2c, 0x66, 0x40, 0x00,
	0x5d, 0xd2, 0x75, 0x5b, 0x80, 0x13, 0x0a, 0x47, 0x40, 0x21, 0x0e, 0x80, 0x19, 0xd8, 0xac, 0xcd,
	0x80, 0x5f, 0x17, 0x70, 0x9a, 0x04, 0x19, 0x8c, 0x71, 0x9f, 0xf7, 0xf5, 0xa8, 0xef, 0x8b, 0x5e,
	0xd6, 0xf5, 0x69, 0x18, 0x1f, 0x37, 0x02, 0x12, 0x45, 0xfe, 0x21, 0xa1, 0x3e, 0x0f, 0x49, 0x9c,
	0xe1, 0xad, 0xd6, 0xe2, 0xe8, 0x34, 0x35, 0x0a, 0xe3, 0x67, 0x19, 0x43, 0x3c, 0x18, 0xc0, 0x37,
	0x4d, 0xa0, 0x18, 0xa5, 0x99, 0xb2, 0x1c, 0xd6, 0x48, 0x61, 0x9c, 0x50, 0xff, 0x18, 0x9c, 0x12,
	0x71, 0x6b, 0x2c, 0xa1, 0x38, 0xbf, 0x5f, 0x15, 0x68, 0x3e, 0x48, 0x8c, 0x84, 0xa5, 0x4f, 0xb2,
	0x7b, 0xf9, 0xaf, 0x1e, 0xaa, 0x6d, 0xf5, 0x79, 0x57, 0xcc, 0x7f, 0xe0, 0x73, 0x68, 0xc3, 0xf3,
	0x3e, 0x30, 0x8e, 0xd7, 0xd1, 0x2c, 0x49, 0xfc, 0xe7, 0x7d, 0x58, 0xf4, 0x6e, 0x78, 0xab, 0x73,
	0x1b, 0xaf, 0xd7, 0xc5, 0x7a, 0x97, 0x4c, 0x15, 0xa7, 0xfe, 0x24, 0x05, 0xb4, 0x15, 0x10, 0x63,
	0x34, 0x23, 0xfa, 0x17, 0xa7, 0x6e, 0x78, 0xab, 0x17, 0xdb, 0xe9, 0xdf, 0xf8, 0x2b, 0xe8, 0x62,
	0x10, 0x85, 0x10, 0xf3, 0x83, 0xb0, 0xb3, 0x38, 0x9d, 0x76, 0x5c, 0x90, 0x0d, 0xad, 0x0e, 0x7e,
	0x03, 0xcd, 0xab, 0x4e, 0x06, 0x01, 0x05, 0xbe, 0x38, 0x93, 0x02, 0x2e, 0xc9, 0xc6, 0xbd, 0xb4,
	0x6d, 0xf9, 0x5f, 0x1e, 0xba, 0x66, 0x1b, 0x64, 0x09, 0x89, 0x19, 0xe0, 0x06, 0x9a, 0x95, 0x53,
	0xaa, 0x1c, 0xbe, 0x96, 0x3a, 0xa4, 0x49, 0x90, 0xf9, 0xdb, 0x4b, 0xbb, 0xdb, 0x0a, 0x66, 0x0c,
	0x69, 0xca, 0x75, 0x48, 0xd7, 0xd0, 0x39, 0x4e, 0x9e, 0x41, 0xac, 0xac, 0xcb, 0x07, 0xbc, 0x89,
	0x66, 0xc4, 0xab, 0x91, 0xda, 0x9d, 0xdb, 0xf8, 0x5a, 0x1a, 0x46, 0xbf, 0x41, 0x75, 0xd1, 0x93,
	0x85, 0xdb, 0x67, 0x40, 0xdb, 0x29, 0x78, 0xf9, 0x63, 0x34, 0xff, 0xbd, 0x2e, 0xd9, 0xea, 0xb5,
	0x3e, 0x47, 0x86, 0x33, 0x3b, 0x53, 0x86, 0x9d, 0xe5, 0x7f, 0x78, 0x68, 0x41, 0x87, 0x7e, 0x89,
	0xb9, 0xd1, 0x59, 0x98, 0x9e, 0x24, 0x0b, 0x3f, 0x41, 0x97, 0x9b, 0xc0, 0x3f, 0xec, 0x13, 0xee,
	0x7f, 0x8e, 0x3c, 0xdc, 0x47, 0xd3, 0x14, 0x8e, 0x94, 0xd5, 0x95, 0x14, 0xaf, 0xde, 0x87, 0xba,
	0x7e, 0x1f, 0x32, 0x6a, 0x5b, 0x17, 0x87, 0xb6, 0xe0, 0x2c, 0xff, 0xd7, 0x43, 0xf8, 0xbb, 0x21,
	0xe3, 0x6d, 0x08, 0x06, 0x41, 0x04, 0x5f, 0x88, 0x09, 0x7c, 0x17, 0x9d, 0x3f, 0xa2, 0xa4, 0x77,
	0xc0, 0x99, 0xca, 0xde, 0xf5, 0x12, 0xb9, 0xa7, 0x61, 0x0f, 0x18, 0xf7, 0x7b, 0x49, 0x7b, 0x56,
	0x80, 0x9f, 0x8a, 0x49, 0x3a, 0xc7, 0x89, 0x20, 0xcd, 0x38, 0x90, 0x66, 0x38, 0x79, 0xca, 0x96,
	0xff, 0xe7, 0xa1, 0x45, 0x63, 0xb8, 0x7b, 0x9c, 0x82, 0xdf, 0xfb, 0xb2, 0x0f, 0xfa, 0xe7, 0x1e,
	0xaa, 0xed, 0xf6, 0xe9, 0x31, 0x7c, 0x91, 0x93, 0xbc, 0xfc, 0x1f, 0x0f, 0x5d, 0x6f, 0xc5, 0x21,
	0x0f, 0x7d, 0x0e, 0x8f, 0xc2, 0x08, 0x1e, 0x92, 0xd3, 0x38, 0x22, 0x7e, 0xe7, 0xa5, 0xbe, 0xa4,
	0x6b, 0xe8, 0x6a, 0x47, 0xe9, 0x1e, 0x40, 0xdc, 0x49, 0x48, 0x18, 0x73, 0x55, 0xcc, 0xae, 0xe8,
	0x8e, 0x6f, 0xab, 0x76, 0xfc, 0x2a, 0x9a, 0x85, 0x17, 0x09, 0x61, 0xb0, 0x78, 0xee, 0x86, 0xb7,
	0x7a, 0xa1, 0xad, 0x9e, 0xf2, 0xb2, 0x33, 0x6b, 0x96, 0x9d, 0xbf, 0x4f, 0xa1, 0x25, 0x73, 0x7c,
	0xfb, 0xc9, 0x4b, 0x1f, 0xdd, 0x0a, 0xba, 0xdc, 0x4f, 0xca, 0xc6, 0xb6, 0x20, 0x9b, 0xb3, 0x91,
	0x1d, 0xa3, 0x9a, 0x7f, 0xe2, 0x87, 0x91, 0x7f, 0x18, 0xc1, 0x41, 0xd0, 0x85, 0xe0, 0x19, 0xeb,
	0xf7, 0xc4, 0x92, 0x9a, 0x5e, 0x9d, 0xdb, 0xb8, 0x57, 0x35, 0xad, 0x72, 0x43, 0xdd, 0x51, 0xb4,
	0x5d, 0x1a, 0x12, 0x1a, 0xf2, 0x41, 0x1b, 0x67, 0x21, 0x75, 0x17, 0xcb, 0x53, 0x75, 0xce, 0x4c,
	0xd5, 0x9f, 0x3d, 0xf4, 0xba, 0x78, 0x0b, 0xc5, 0x3e, 0xb6, 0xab, 0xe2, 0xb3, 0x97, 0xbe, 0x91,
	0x89, 0xfe, 0xc5, 0xe9, 0x1b, 0xd3, 0xa9, 0x2f, 0xf1, 0xb0, 0xf1, 0x97, 0x07, 0x08, 0x35, 0xe5,
	0x11, 0x76, 0x6b, 0xb7, 0x85, 0x03, 0x74, 0xc9, 0xdc, 0x69, 0xf1, 0x6a, 0xbd, 0xe4, 0x8c, 0x5b,
	0x2f, 0x39, 0x2d, 0x2c, 0xdd, 0x74, 0x40, 0xaa, 0xd1, 0x7e, 0x88, 0x66, 0xe5, 0x66, 0x85, 0x97,
	0x4b, 0x49, 0xd6, 0x26, 0xb9, 0xf4, 0xc6, 0x58, 0x8c, 0x0a, 0xf9, 0x19, 0xba, 0xbc, 0x43, 0xc1,
	0xe7, 0xb0, 0x43, 0x62, 0xee, 0x87, 0x31, 0x50, 0xfc, 0xd6, 0xf8, 0x39, 0x2d, 0xc0, 0xb5, 0xda,
	0xdd, 0x09, 0x59, 0x4a, 0x3f, 0x40, 0xb3, 0x0f, 0x21, 0x02, 0x0e, 0x78, 0x6d, 0x7c, 0x00, 0x89,
	0xd2, 0x6a, 0xb7, 0xdc, 0xc0, 0x4a, 0xe4, 0x08, 0x9d, 0x6f, 0x02, 0xdf, 0xf5, 0x79, 0x17, 0x57,
	0x10, 0x15, 0x4c, 0xcb, 0xdc, 0x76, 0x44, 0x2b, 0x9d, 0x1f, 0xa1, 0x0b, 0x7a, 0x87, 0xc6, 0x5f,
	0x2f, 0xcd, 0x7e, 0x61, 0x03, 0x5f, 0xaa, 0x57, 0x0a, 0x28, 0xb8, 0x52, 0xf8, 0x85, 0x87, 0xae,
	0x95, 0x15, 0x46, 0x7c, 0x7f, 0x7c, 0xa0, 0xf2, 0x62, 0x2a, 0x3d, 0xac, 0x97, 0x3a, 0x1d, 0x5b,
	0x7e, 0x3f, 0x43, 0x78, 0xb8, 0x7c, 0xe1, 0xb7, 0xdd, 0x3d, 0xe8, 0x82, 0x27, 0x1d, 0x34, 0x2a,
	0x1d, 0x14, 0x0a, 0xe4, 0xef, 0x3c, 0x54, 0x13, 0x45, 0x21, 0x5b, 0x4f, 0x72, 0x73, 0xc6, 0xef,
	0x8c, 0x77, 0x50, 0x42, 0xd1, 0x16, 0xee, 0x9f, 0x81, 0x29, 0xcd, 0xdc, 0xf1, 0xf0, 0x0b, 0x34,
	0x6f, 0x01, 0xf0, 0xc6, 0x04, 0xd1, 0xb4, 0x83, 0xcd, 0x89, 0x38, 0x2a, 0x11, 0x3f, 0xf3, 0xd0,
	0x15, 0xd1, 0x23, 0x72, 0xf4, 0x11, 0x50, 0x16, 0x92, 0x98, 0xe1, 0xbb, 0xd5, 0x91, 0x4c, 0xbc,
	0x36, 0x70, 0x6f, 0x52, 0x9a, 0xf2, 0xf0, 0x63, 0x74, 0x75, 0xe8, 0x98, 0x84, 0x6f, 0x97, 0x4e,
	0xe9, 0xa8, 0xe3, 0xd4, 0xd2, 0xdb, 0xd5, 0xda, 0x05, 0x5e, 0x96, 0xfc, 0x10, 0xcd, 0x19, 0xdd,
	0x78, 0xa5, 0x4a, 0xd8, 0x5e, 0xf6, 0x2e, 0x92, 0xd9, 0x48, 0x7f, 0x88, 0x66, 0x1e, 0x93, 0x13,
	0xc0, 0x37, 0xc7, 0x53, 0x05, 0x46, 0xab, 0x7c, 0xd3, 0x05, 0xaa, 0xc2, 0x47, 0xe8, 0x92, 0x79,
	0xf4, 0x1a, 0xb1, 0x87, 0x94, 0x9c, 0xce, 0x96, 0x2a, 0xd6, 0x9b, 0x4d, 0x51, 0x6a, 0xbf, 0xf2,
	0x10, 0x6e, 0x83, 0xe0, 0x80, 0x31, 0xad, 0x55, 0x2f, 0xf1, 0x30, 0x43, 0x7b, 0x78, 0x67, 0x72,
	0xe2, 0xb0, 0x13, 0x65, 0xb2, 0xc5, 0xa1, 0xe7, 0xe8, 0xc4, 0x60, 0x4c, 0xe6, 0xc4, 0x22, 0xe6,
	0x13, 0x2c, 0xce, 0x0b, 0x55, 0x13, 0x2c, 0x30, 0x8e, 0x13, 0x2c, 0xa1, 0x2a, 0xfc, 0xef, 0x3d,
	0x74, 0x6d, 0x0f, 0xf8, 0x16, 0x3d, 0x0c, 0x39, 0xf5, 0xe9, 0xe0, 0x31, 0x70, 0xbf, 0xe3, 0x73,
	0xbf, 0xaa, 0x7a, 0x97, 0x71, 0xb4, 0xfe, 0x83, 0xb3, 0x50, 0x95, 0x9f, 0x3f, 0x7a, 0xe8, 0xd5,
	0xfd, 0x98, 0x95, 0x39, 0x7a, 0x77, 0x7c, 0xd8, 0x72, 0x96, 0xf6, 0xf4, 0xde, 0xd9, 0xc8, 0xca,
	0x15, 0x41, 0x48, 0x9e, 0x16, 0xbe, 0x43, 0x7a, 0x80, 0x1b, 0x2e, 0xe7, 0x0a, 0x81, 0xd4, 0xe2,
	0x77, 0xdc, 0x09, 0x4a, 0xf0, 0xd7, 0x1e, 0x7a, 0xe5, 0x49, 0x02, 0xb1, 0x58, 0x9b, 0xad, 0x78,
	0x2b, 0x49, 0xf4, 0x39, 0x13, 0xcb, 0x92, 0xe8, 0x27, 0xc9, 0x70, 0x9c, 0x52, 0x82, 0x5d, 0xce,
	0x26, 0xe1, 0x29, 0x2b, 0x9f, 0xa2, 0x39, 0x69, 0x70, 0xaf, 0xeb, 0x53, 0xd0, 0x95, 0x5c, 0xde,
	0x83, 0xd5, 0xad, 0x5b, 0xb5, 0xc2, 0x80, 0x52, 0x7c, 0xa1, 0x92, 0xbb, 0xd3, 0x72, 0xf5, 0x36,
	0xf4, 0xc8, 0xc9, 0x04, 0xea, 0x06, 0x7e, 0x12, 0x75, 0x8b, 0xa6, 0xd4, 0x59, 0x7a, 0x7a, 0x92,
	0xd2, 0x1b, 0x0e, 0x31, 0x34, 0xb8, 0xb0, 0x81, 0x3a, 0x72, 0x94, 0xe8, 0x00, 0x21, 0x51, 0xe9,
	0xd3, 0x46, 0xa6, 0x8f, 0xbe, 0x63, 0x43, 0xe4, 0xf0, 0xc2, 0xd1, 0xd7, 0x99, 0x95, 0x67, 0x7b,
	0x3f, 0xe9, 0x4c, 0x34, 0xd7, 0x06, 0x7e, 0x92, 0x6c, 0x5b, 0x34, 0xa5, 0xfe, 0x87, 0xfc, 0x32,
	0x07, 0xc2, 0x13, 0xe8, 0xa8, 0x0c, 0xbc, 0xe7, 0x38, 0x16, 0x9b, 0xa6, 0xcd, 0xbc, 0x7f, 0x46,
	0xb6, 0xf2, 0xf4, 0x27, 0x0f, 0xd5, 0xa4, 0x57, 0x0b, 0x80, 0xdf, 0x77, 0x1e, 0xa3, 0xc5, 0xd3,
	0xae, 0xbe, 0x75, 0x56, 0xba, 0xb2, 0xf5, 0x5b, 0x0f, 0x5d, 0x69, 0x82, 0x6d, 0x1a, 0x3f, 0x70,
	0x5b, 0x6d, 0xa5, 0x86, 0xde, 0x3d, 0x13, 0x57, 0xb9, 0xf9, 0x3e, 0x9a, 0xdd, 0x03, 0xfe, 0x01,
	0x0c, 0xf0, 0x37, 0xd2, 0x30, 0xc6, 0x15, 0xbe, 0x59, 0xf5, 0x3f, 0x80, 0x81, 0x96, 0x5b, 0xa9,
	0xc4, 0xe5, 0xa1, 0x9b, 0x55, 0xa1, 0x9b, 0x8e, 0xa1, 0x9b, 0x76, 0xe8, 0x4f, 0xd1, 0x55, 0x59,
	0x71, 0x76, 0xfb, 0x87, 0x51, 0x18, 0x94, 0xbd, 0xe5, 0x51, 0x18, 0x3f, 0x2b, 0x94, 0x27, 0x03,
	0x5c, 0xfe, 0x96, 0x57, 0x71, 0x72, 0x75, 0x59, 0x71, 0x1c, 0xd5, 0x87, 0xc0, 0x0e, 0xea, 0x25,
	0x9c, 0xac, 0xb0, 0x2d, 0x88, 0x2f, 0x45, 0x43, 0xba, 0x31, 0x3a, 0x8c, 0x8d, 0x2c, 0x6c, 0x6a,
	0x2e, 0x04, 0x63, 0x53, 0xb3, 0xbb, 0xb6, 0x07, 0x4f, 0xd3, 0x2b, 0xf8, 0x7b, 0xae, 0xb1, 0x14,
	0xa1, 0x70, 0x46, 0x9f, 0x80, 0x97, 0xd5, 0xd8, 0xf4, 0x1b, 0xc5, 0x40, 0x30, 0xbc, 0x3e, 0x3a,
	0x58, 0x11, 0x5b, 0x38, 0xe4, 0xba, 0x51, 0xf2, 0x89, 0x97, 0x6f, 0xb6, 0xe3, 0xc4, 0x0f, 0x81,
	0x1d, 0x26, 0xbe, 0x84, 0xa3, 0xd4, 0x9f, 0xa3, 0x05, 0xb9, 0x26, 0x9f, 0xec, 0x3c, 0x96, 0xd2,
	0x75, 0x2b, 0x0c, 0x09, 0x7a, 0x85, 0xc5, 0xab, 0x81, 0xf6, 0x97, 0xb1, 0x0b, 0x3e, 0x97, 0x94,
	0x0b, 0xd1, 0x41, 0xd2, 0x06, 0x56, 0x4b, 0x16, 0xf1, 0x4a, 0xb2, 0x8b, 0xe6, 0x9a, 0xc0, 0x33,
	0xbd, 0xb5, 0x91, 0x7c, 0x03, 0x55, 0xb8, 0xc7, 0xa9, 0x02, 0x2b, 0xa5, 0x58, 0x7e, 0x67, 0xeb,
	0x76, 0xa6, 0xbe, 0x32, 0xcb, 0xe8, 0x16, 0xae, 0x70, 0xdb, 0x52, 0x0d, 0xcf, 0x93, 0x29, 0x27,
	0xd7, 0x21, 0x99, 0x36, 0xb0, 0x3a, 0x99, 0x45, 0xbc, 0x92, 0xfc, 0xa5, 0x87, 0x5e, 0x31, 0x77,
	0xc8, 0x7c, 0xac, 0x77, 0xc7, 0x9a, 0x1f, 0xc2, 0x97, 0x9f, 0x0f, 0x1c, 0x68, 0xca, 0xc8, 0x6f,
	0xc4, 0xb7, 0x81, 0xb5, 0x29, 0x66, 0x49, 0xb8, 0x57, 0x31, 0xa8, 0x22, 0xa1, 0xbc, 0x80, 0xb8,
	0xf0, 0x94, 0x97, 0x9f, 0x7a, 0xa8, 0x66, 0xec, 0x87, 0x99, 0x91, 0xcd, 0x71, 0xab, 0x67, 0x94,
	0x8b, 0xb7, 0x26, 0x23, 0x29, 0x0b, 0x27, 0xe9, 0x8f, 0x6f, 0xc6, 0x91, 0x9d, 0xe1, 0x3b, 0xd9,
	0x21, 0x5f, 0xff, 0x17, 0x81, 0x19, 0xc9, 0x84, 0xda, 0x57, 0x0e, 0x6e, 0x0c, 0xbb, 0x76, 0x5a,
	0xc2, 0x63, 0xc2, 0x14, 0xb1, 0x76, 0xed, 0x74, 0xa4, 0x64, 0xb7, 0x99, 0xe7, 0x9b, 0xc0, 0xf7,
	0x19, 0x50, 0xf5, 0x3d, 0x5c, 0xfe, 0x0b, 0xa5, 0xc2, 0xd8, 0xdf, 0xc3, 0x15, 0x50, 0xa5, 0x40,
	0xd1, 0xbc, 0x6a, 0x6a, 0x52, 0xd2, 0x4f, 0x98, 0xda, 0x17, 0xc7, 0x92, 0x25, 0xd2, 0xde, 0x17,
	0x9d, 0x08, 0xd9, 0x5d, 0xf0, 0xc5, 0x16, 0x6b, 0xc5, 0x69, 0xab, 0xaa, 0x55, 0xe5, 0xf4, 0x0c,
	0x65, 0xd7, 0xaa, 0x4a, 0x70, 0xae, 0xf3, 0x28, 0x8c, 0x3b, 0xc2, 0x01, 0x1b, 0xab, 0x93, 0xa1,
	0x5c, 0x74, 0x0c, 0xb0, 0xd2, 0x79, 0x21, 0x6f, 0xdf, 0xac, 0x9f, 0x47, 0xd4, 0x8b, 0xe1, 0xf7,
	0x79, 0x77, 0xc4, 0x7c, 0xdb, 0x3f, 0xa6, 0x98, 0xd5, 0xb1, 0xec, 0xe6, 0xac, 0xfc, 0xb7, 0x17,
	0x79, 0xab, 0x9e, 0x7e, 0xa4, 0x57, 0xdf, 0xaa, 0x9b, 0x5f, 0xe8, 0xb7, 0x1d, 0xd1, 0xd9, 0x65,
	0x73, 0xad, 0x09, 0x31, 0x50, 0x9f, 0x43, 0x2b, 0xfd, 0x2f, 0x18, 0x79, 0x8c, 0x91, 0x4b, 0x5a,
	0xbc, 0xbf, 0xf2, 0x7f, 0x63, 0x0c, 0xfe, 0x10, 0xd8, 0xde, 0xc5, 0x5d, 0x39, 0xd9, 0xb5, 0xdc,
	0xfc, 0x23, 0x42, 0x4f, 0x7d, 0xda, 0x91, 0xbd, 0x6a, 0xb4, 0x25, 0x51, 0x2c, 0x98, 0x3d, 0xda,
	0x6a, 0xb4, 0x52, 0x0b, 0xd1, 0xa5, 0xad, 0x20, 0x80, 0x84, 0x2b, 0xb1, 0xb5, 0x51, 0x74, 0x13,
	0x65, 0x2f, 0x9d, 0x4a, 0x70, 0x3e, 0xb0, 0xb4, 0xe4, 0xf5, 0x08, 0x87, 0xf4, 0x35, 0xbf, 0x35,
	0x3a, 0x3d, 0x06, 0xac, 0x72, 0x60, 0x05, 0x74, 0x7e, 0x14, 0x6b, 0x31, 0xbd, 0x8a, 0xb6, 0xa2,
	0x88, 0x9c, 0x42, 0xc7, 0x98, 0xc4, 0xe1, 0x9f, 0x0b, 0x8a, 0xe0, 0xe1, 0x49, 0x74, 0xe1, 0x58,
	0xf5, 0xbb, 0x15, 0x1f, 0x91, 0xed, 0xc1, 0x43, 0xd2, 0xf3, 0xc3, 0x58, 0xd5, 0xef, 0xd2, 0x38,
	0x05, 0xa8, 0x5d, 0xbf, 0xdd, 0x18, 0x85, 0xfa, 0x1d, 0x45, 0xc5, 0xfa, 0x5d, 0x1a, 0xa6, 0x88,
	0xb5, 0xeb, 0xb7, 0x23, 0x45, 0x49, 0x9f, 0x22, 0x9c, 0x1d, 0x12, 0x77, 0x08, 0x05, 0xf3, 0xd3,
	0x43, 0x44, 0x0a, 0x08, 0x85, 0xe1, 0xe3, 0x64, 0x86, 0xb4, 0x4b, 0xac, 0x13, 0x41, 0x0a, 0x6f,
	0xc7, 0xe8, 0xb5, 0x80, 0xf4, 0xca, 0xaa, 0xc9, 0xf6, 0x65, 0xfd, 0x93, 0x69, 0x12, 0xee, 0x52,
	0xc2, 0xc9, 0xae, 0xf7, 0x83, 0x05, 0x85, 0x51, 0x90, 0xbf, 0x4d, 0x4d, 0xef, 0x34, 0x3f, 0xfe,
	0xe7, 0x54, 0x6d, 0x87, 0x6d, 0xd6, 0x15, 0xba, 0xfe, 0xd1, 0xfa, 0xb6, 0xe8, 0xfb, 0x77, 0xda,
	0xfa, 0x89, 0x6a, 0xfd, 0x44, 0xb5, 0x1e, 0xce, 0xa6, 0xff, 0x8e, 0xb5, 0xf9, 0xff, 0x00, 0x00,
	0x00, 0xff, 0xff, 0xc4, 0x8e, 0xf3, 0x21, 0x7e, 0x28, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GatewayAPIClient is the client API for GatewayAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GatewayAPIClient interface {
	// Authenticates a user.
	Authenticate(ctx context.Context, in *AuthenticateRequest, opts ...grpc.CallOption) (*AuthenticateResponse, error)
	// WhoAmI returns the information for a user.
	WhoAmI(ctx context.Context, in *WhoAmIRequest, opts ...grpc.CallOption) (*WhoAmIResponse, error)
	// Creates a new resource of type container.
	// MUST return CODE_PRECONDITION_FAILED if the container
	// cannot be created at the specified reference.
	CreateContainer(ctx context.Context, in *v1beta13.CreateContainerRequest, opts ...grpc.CallOption) (*v1beta13.CreateContainerResponse, error)
	// Deletes a resource.
	// If a resource specifies the non-empty container (directory, ...),
	// then the entire directory is deleted recursively.
	// If a resource specifies a reference or symlink type, only the reference is removed (not the target).
	// MUST return CODE_NOT_FOUND if the reference does not exist.
	Delete(ctx context.Context, in *v1beta13.DeleteRequest, opts ...grpc.CallOption) (*v1beta13.DeleteResponse, error)
	// Returns the path reference for
	// the provided resource id reference.
	// MUST return CODE_NOT_FOUND if the reference does not exist
	GetPath(ctx context.Context, in *v1beta13.GetPathRequest, opts ...grpc.CallOption) (*v1beta13.GetPathResponse, error)
	// Returns the quota available under the provided
	// reference.
	// MUST return CODE_NOT_FOUND if the reference does not exist
	// MUST return CODE_RESOURCE_EXHAUSTED on exceeded quota limits.
	GetQuota(ctx context.Context, in *GetQuotaRequest, opts ...grpc.CallOption) (*v1beta13.GetQuotaResponse, error)
	// Initiates the download of a file using an
	// out-of-band data transfer mechanism.
	InitiateFileDownload(ctx context.Context, in *v1beta13.InitiateFileDownloadRequest, opts ...grpc.CallOption) (*InitiateFileDownloadResponse, error)
	// Initiates the upload of a file using an
	// out-of-band data transfer mechanism.
	InitiateFileUpload(ctx context.Context, in *v1beta13.InitiateFileUploadRequest, opts ...grpc.CallOption) (*InitiateFileUploadResponse, error)
	// Returns a stream of resource informations
	// for the provided reference.
	// MUST return CODE_NOT_FOUND if the reference does not exists.
	ListContainerStream(ctx context.Context, in *v1beta13.ListContainerStreamRequest, opts ...grpc.CallOption) (GatewayAPI_ListContainerStreamClient, error)
	// Returns a list of resource information
	// for the provided reference.
	// MUST return CODE_NOT_FOUND if the reference does not exists.
	ListContainer(ctx context.Context, in *v1beta13.ListContainerRequest, opts ...grpc.CallOption) (*v1beta13.ListContainerResponse, error)
	// Returns a list of the versions for a resource of
	// type file at the provided reference.
	// MUST return CODE_NOT_FOUND if the reference does not exist.
	// MUST return CODE_OK and MUST return an empty list if no versions are available.
	// TODO: What code if resource not of type file?
	ListFileVersions(ctx context.Context, in *v1beta13.ListFileVersionsRequest, opts ...grpc.CallOption) (*v1beta13.ListFileVersionsResponse, error)
	// Returns a stream of recycle items for this storage provider.
	ListRecycleStream(ctx context.Context, in *ListRecycleStreamRequest, opts ...grpc.CallOption) (GatewayAPI_ListRecycleStreamClient, error)
	// Returns a list of recycle items for this storage provider.
	// MUST return CODE_OK and MUST return an empty list if no recycle items are available.
	ListRecycle(ctx context.Context, in *ListRecycleRequest, opts ...grpc.CallOption) (*v1beta13.ListRecycleResponse, error)
	// Moves a resource from one reference to another.
	// MUST return CODE_NOT_FOUND if any of the references do not exist.
	// MUST return CODE_PRECONDITION_FAILED if the source reference
	// cannot be moved to the destination reference.
	Move(ctx context.Context, in *v1beta13.MoveRequest, opts ...grpc.CallOption) (*v1beta13.MoveResponse, error)
	// Permanently removes a recycle item from the recycle.
	// This operation is irrevocable.
	// MUST return CODE_NOT_FOUND if the recycle item id does not exist.
	PurgeRecycle(ctx context.Context, in *PurgeRecycleRequest, opts ...grpc.CallOption) (*v1beta13.PurgeRecycleResponse, error)
	// Restores a file version for the provided reference.
	// MUST return CODE_NOT_FOUND if the reference does not exist.
	// MUST return CODE_NOT_FOUND if the version does not exist.
	RestoreFileVersion(ctx context.Context, in *v1beta13.RestoreFileVersionRequest, opts ...grpc.CallOption) (*v1beta13.RestoreFileVersionResponse, error)
	// Restores a recycle item from the recycle.
	// MUST return CODE_NOT_FOUND if the recycle item id does not exist.
	// MUST return CODE_PRECONDITION_FAILED if the restore_path is non-empty
	// and the recycle item cannot be restored to the restore_path.
	RestoreRecycleItem(ctx context.Context, in *v1beta13.RestoreRecycleItemRequest, opts ...grpc.CallOption) (*v1beta13.RestoreRecycleItemResponse, error)
	// Returns the resource information at the provided reference.
	// MUST return CODE_NOT_FOUND if the reference does not exist.
	Stat(ctx context.Context, in *v1beta13.StatRequest, opts ...grpc.CallOption) (*v1beta13.StatResponse, error)
	// Sets arbitrary metadata into a storage resource.
	// Arbitrary metadata is returned in a cs3.storage.provider.v1beta1.ResourceInfo.
	SetArbitraryMetadata(ctx context.Context, in *v1beta13.SetArbitraryMetadataRequest, opts ...grpc.CallOption) (*v1beta13.SetArbitraryMetadataResponse, error)
	// Unsets arbitrary metdata into a storage resource.
	// Arbitrary metadata is returned in a cs3.storage.provider.v1beta1.ResourceInfo.
	UnsetArbitraryMetadata(ctx context.Context, in *v1beta13.UnsetArbitraryMetadataRequest, opts ...grpc.CallOption) (*v1beta13.UnsetArbitraryMetadataResponse, error)
	// Creates the home directory for a user.
	CreateHome(ctx context.Context, in *v1beta13.CreateHomeRequest, opts ...grpc.CallOption) (*v1beta13.CreateHomeResponse, error)
	// Returns the iframe url from the WOPI server. The iframe url will let you open the document in the correct online document editor.
	OpenFileInAppProvider(ctx context.Context, in *v1beta14.OpenFileInAppProviderRequest, opts ...grpc.CallOption) (*v1beta14.OpenFileInAppProviderResponse, error)
	// Creates a new share.
	// MUST return CODE_NOT_FOUND if the resource reference does not exist.
	// MUST return CODE_ALREADY_EXISTS if the share already exists for the 4-tuple consisting of
	// (owner, shared_resource, grantee).
	// New shares MUST be created in the state SHARE_STATE_PENDING.
	CreateShare(ctx context.Context, in *v1beta15.CreateShareRequest, opts ...grpc.CallOption) (*v1beta15.CreateShareResponse, error)
	// Removes a share.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	RemoveShare(ctx context.Context, in *v1beta15.RemoveShareRequest, opts ...grpc.CallOption) (*v1beta15.RemoveShareResponse, error)
	// Gets share information for a single share.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	GetShare(ctx context.Context, in *v1beta15.GetShareRequest, opts ...grpc.CallOption) (*v1beta15.GetShareResponse, error)
	// List the shares the authproviderenticated principal has created,
	// both as owner and creator. If a filter is specified, only
	// shares satisfying the filter MUST be returned.
	ListShares(ctx context.Context, in *v1beta15.ListSharesRequest, opts ...grpc.CallOption) (*v1beta15.ListSharesResponse, error)
	// Updates a share.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	UpdateShare(ctx context.Context, in *v1beta15.UpdateShareRequest, opts ...grpc.CallOption) (*v1beta15.UpdateShareResponse, error)
	// List all shares the authproviderenticated principal has received.
	ListReceivedShares(ctx context.Context, in *v1beta15.ListReceivedSharesRequest, opts ...grpc.CallOption) (*v1beta15.ListReceivedSharesResponse, error)
	// Update the received share to change the share state or the display name.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	UpdateReceivedShare(ctx context.Context, in *v1beta15.UpdateReceivedShareRequest, opts ...grpc.CallOption) (*v1beta15.UpdateReceivedShareResponse, error)
	// Get the information for the given received share reference.
	// MUST return CODE_NOT_FOUND if the received share reference does not exist.
	GetReceivedShare(ctx context.Context, in *v1beta15.GetReceivedShareRequest, opts ...grpc.CallOption) (*v1beta15.GetReceivedShareResponse, error)
	// Maps the key-value pair.
	SetKey(ctx context.Context, in *v1beta16.SetKeyRequest, opts ...grpc.CallOption) (*v1beta16.SetKeyResponse, error)
	// Returns the value associated with the
	// requested key.
	GetKey(ctx context.Context, in *v1beta16.GetKeyRequest, opts ...grpc.CallOption) (*v1beta16.GetKeyResponse, error)
	// Creates a new share.
	// MUST return CODE_NOT_FOUND if the resource reference does not exist.
	// MUST return CODE_ALREADY_EXISTS if the share already exists for the 4-tuple consisting of
	// (owner, shared_resource, grantee).
	// New shares MUST be created in the state SHARE_STATE_PENDING.
	CreatePublicShare(ctx context.Context, in *v1beta17.CreatePublicShareRequest, opts ...grpc.CallOption) (*v1beta17.CreatePublicShareResponse, error)
	// Removes a share.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	RemovePublicShare(ctx context.Context, in *v1beta17.RemovePublicShareRequest, opts ...grpc.CallOption) (*v1beta17.RemovePublicShareResponse, error)
	// Gets share information for a single share.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	GetPublicShare(ctx context.Context, in *v1beta17.GetPublicShareRequest, opts ...grpc.CallOption) (*v1beta17.GetPublicShareResponse, error)
	// Gets share information for a single share by its unlisted token.
	// MUST return CODE_NOT_FOUND if the share does not exist.
	GetPublicShareByToken(ctx context.Context, in *v1beta17.GetPublicShareByTokenRequest, opts ...grpc.CallOption) (*v1beta17.GetPublicShareByTokenResponse, error)
	// List the shares the authproviderenticated principal has created,
	// both as owner and creator. If a filter is specified, only
	// shares satisfying the filter MUST be returned.
	ListPublicShares(ctx context.Context, in *v1beta17.ListPublicSharesRequest, opts ...grpc.CallOption) (*v1beta17.ListPublicSharesResponse, error)
	// Updates a share.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	UpdatePublicShare(ctx context.Context, in *v1beta17.UpdatePublicShareRequest, opts ...grpc.CallOption) (*v1beta17.UpdatePublicShareResponse, error)
	// Creates a new ocm share.
	// MUST return CODE_NOT_FOUND if the resource reference does not exist.
	// MUST return CODE_ALREADY_EXISTS if the share already exists for the 4-tuple consisting of
	// (owner, shared_resource, grantee).
	// New shares MUST be created in the state SHARE_STATE_PENDING.
	CreateOCMShare(ctx context.Context, in *v1beta18.CreateOCMShareRequest, opts ...grpc.CallOption) (*v1beta18.CreateOCMShareResponse, error)
	// Removes a share.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	RemoveOCMShare(ctx context.Context, in *v1beta18.RemoveOCMShareRequest, opts ...grpc.CallOption) (*v1beta18.RemoveOCMShareResponse, error)
	// Gets share information for a single share.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	GetOCMShare(ctx context.Context, in *v1beta18.GetOCMShareRequest, opts ...grpc.CallOption) (*v1beta18.GetOCMShareResponse, error)
	// List the shares the authproviderenticated principal has created,
	// both as owner and creator. If a filter is specified, only
	// shares satisfying the filter MUST be returned.
	ListOCMShares(ctx context.Context, in *v1beta18.ListOCMSharesRequest, opts ...grpc.CallOption) (*v1beta18.ListOCMSharesResponse, error)
	// Updates a share.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	UpdateOCMShare(ctx context.Context, in *v1beta18.UpdateOCMShareRequest, opts ...grpc.CallOption) (*v1beta18.UpdateOCMShareResponse, error)
	// List all shares the authproviderenticated principal has received.
	ListReceivedOCMShares(ctx context.Context, in *v1beta18.ListReceivedOCMSharesRequest, opts ...grpc.CallOption) (*v1beta18.ListReceivedOCMSharesResponse, error)
	// Update the received share to change the share state or the display name.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	UpdateReceivedOCMShare(ctx context.Context, in *v1beta18.UpdateReceivedOCMShareRequest, opts ...grpc.CallOption) (*v1beta18.UpdateReceivedOCMShareResponse, error)
	// Get the information for the given received share reference.
	// MUST return CODE_NOT_FOUND if the received share reference does not exist.
	GetReceivedOCMShare(ctx context.Context, in *v1beta18.GetReceivedOCMShareRequest, opts ...grpc.CallOption) (*v1beta18.GetReceivedOCMShareResponse, error)
	// Returns the app providers that are capable of handling this resource info.
	// MUST return CODE_NOT_FOUND if no providers are available.
	GetAppProviders(ctx context.Context, in *v1beta19.GetAppProvidersRequest, opts ...grpc.CallOption) (*v1beta19.GetAppProvidersResponse, error)
	// Returns a list of the available app providers known by this registry.
	ListAppProviders(ctx context.Context, in *v1beta19.ListAppProvidersRequest, opts ...grpc.CallOption) (*v1beta19.ListAppProvidersResponse, error)
	// Gets the information about an user by its user id.
	GetUser(ctx context.Context, in *v1beta12.GetUserRequest, opts ...grpc.CallOption) (*v1beta12.GetUserResponse, error)
	// Gets the groups of a user.
	GetUserGroups(ctx context.Context, in *v1beta12.GetUserGroupsRequest, opts ...grpc.CallOption) (*v1beta12.GetUserGroupsResponse, error)
	// Tells if the user is in a certain group.
	IsInGroup(ctx context.Context, in *v1beta12.IsInGroupRequest, opts ...grpc.CallOption) (*v1beta12.IsInGroupResponse, error)
	// Finds users by any attribute of the user?
	// TODO(labkode): to define the filters that make more sense.
	FindUsers(ctx context.Context, in *v1beta12.FindUsersRequest, opts ...grpc.CallOption) (*v1beta12.FindUsersResponse, error)
	// Returns a list of the available auth providers known by this registry.
	ListAuthProviders(ctx context.Context, in *v1beta110.ListAuthProvidersRequest, opts ...grpc.CallOption) (*ListAuthProvidersResponse, error)
	// Returns the home path for the given authenticated user.
	// When a user has access to multiple storage providers, one of them is the home.
	GetHome(ctx context.Context, in *v1beta13.GetHomeRequest, opts ...grpc.CallOption) (*v1beta13.GetHomeResponse, error)
	// Generates a new token for the user with a validity of 24 hours.
	GenerateInviteToken(ctx context.Context, in *v1beta111.GenerateInviteTokenRequest, opts ...grpc.CallOption) (*v1beta111.GenerateInviteTokenResponse, error)
	// Forwards a received invite to the sync'n'share system provider.
	ForwardInvite(ctx context.Context, in *v1beta111.ForwardInviteRequest, opts ...grpc.CallOption) (*v1beta111.ForwardInviteResponse, error)
	// Completes an invitation acceptance.
	AcceptInvite(ctx context.Context, in *v1beta111.AcceptInviteRequest, opts ...grpc.CallOption) (*v1beta111.AcceptInviteResponse, error)
	// Retrieves details about a remote user who has accepted an invite to share.
	GetRemoteUser(ctx context.Context, in *v1beta111.GetRemoteUserRequest, opts ...grpc.CallOption) (*v1beta111.GetRemoteUserResponse, error)
	// Check if a given system provider is registered in the mesh or not.
	// MUST return CODE_UNAUTHENTICATED if the system is not registered
	IsProviderAllowed(ctx context.Context, in *v1beta112.IsProviderAllowedRequest, opts ...grpc.CallOption) (*v1beta112.IsProviderAllowedResponse, error)
	// Get the information of the provider identified by a specific domain.
	// MUST return CODE_NOT_FOUND if the sync'n'share system provider does not exist.
	GetInfoByDomain(ctx context.Context, in *v1beta112.GetInfoByDomainRequest, opts ...grpc.CallOption) (*v1beta112.GetInfoByDomainResponse, error)
	// Get the information of all the providers registered in the mesh.
	ListAllProviders(ctx context.Context, in *v1beta112.ListAllProvidersRequest, opts ...grpc.CallOption) (*v1beta112.ListAllProvidersResponse, error)
	// Creates a new ocm share.
	CreateOCMCoreShare(ctx context.Context, in *v1beta113.CreateOCMCoreShareRequest, opts ...grpc.CallOption) (*v1beta113.CreateOCMCoreShareResponse, error)
}

type gatewayAPIClient struct {
	cc *grpc.ClientConn
}

func NewGatewayAPIClient(cc *grpc.ClientConn) GatewayAPIClient {
	return &gatewayAPIClient{cc}
}

func (c *gatewayAPIClient) Authenticate(ctx context.Context, in *AuthenticateRequest, opts ...grpc.CallOption) (*AuthenticateResponse, error) {
	out := new(AuthenticateResponse)
	err := c.cc.Invoke(ctx, "/cs3.gateway.v1beta1.GatewayAPI/Authenticate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) WhoAmI(ctx context.Context, in *WhoAmIRequest, opts ...grpc.CallOption) (*WhoAmIResponse, error) {
	out := new(WhoAmIResponse)
	err := c.cc.Invoke(ctx, "/cs3.gateway.v1beta1.GatewayAPI/WhoAmI", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) CreateContainer(ctx context.Context, in *v1beta13.CreateContainerRequest, opts ...grpc.CallOption) (*v1beta13.CreateContainerResponse, error) {
	out := new(v1beta13.CreateContainerResponse)
	err := c.cc.Invoke(ctx, "/cs3.gateway.v1beta1.GatewayAPI/CreateContainer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) Delete(ctx context.Context, in *v1beta13.DeleteRequest, opts ...grpc.CallOption) (*v1beta13.DeleteResponse, error) {
	out := new(v1beta13.DeleteResponse)
	err := c.cc.Invoke(ctx, "/cs3.gateway.v1beta1.GatewayAPI/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) GetPath(ctx context.Context, in *v1beta13.GetPathRequest, opts ...grpc.CallOption) (*v1beta13.GetPathResponse, error) {
	out := new(v1beta13.GetPathResponse)
	err := c.cc.Invoke(ctx, "/cs3.gateway.v1beta1.GatewayAPI/GetPath", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) GetQuota(ctx context.Context, in *GetQuotaRequest, opts ...grpc.CallOption) (*v1beta13.GetQuotaResponse, error) {
	out := new(v1beta13.GetQuotaResponse)
	err := c.cc.Invoke(ctx, "/cs3.gateway.v1beta1.GatewayAPI/GetQuota", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) InitiateFileDownload(ctx context.Context, in *v1beta13.InitiateFileDownloadRequest, opts ...grpc.CallOption) (*InitiateFileDownloadResponse, error) {
	out := new(InitiateFileDownloadResponse)
	err := c.cc.Invoke(ctx, "/cs3.gateway.v1beta1.GatewayAPI/InitiateFileDownload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) InitiateFileUpload(ctx context.Context, in *v1beta13.InitiateFileUploadRequest, opts ...grpc.CallOption) (*InitiateFileUploadResponse, error) {
	out := new(InitiateFileUploadResponse)
	err := c.cc.Invoke(ctx, "/cs3.gateway.v1beta1.GatewayAPI/InitiateFileUpload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) ListContainerStream(ctx context.Context, in *v1beta13.ListContainerStreamRequest, opts ...grpc.CallOption) (GatewayAPI_ListContainerStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GatewayAPI_serviceDesc.Streams[0], "/cs3.gateway.v1beta1.GatewayAPI/ListContainerStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &gatewayAPIListContainerStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GatewayAPI_ListContainerStreamClient interface {
	Recv() (*v1beta13.ListContainerStreamResponse, error)
	grpc.ClientStream
}

type gatewayAPIListContainerStreamClient struct {
	grpc.ClientStream
}

func (x *gatewayAPIListContainerStreamClient) Recv() (*v1beta13.ListContainerStreamResponse, error) {
	m := new(v1beta13.ListContainerStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gatewayAPIClient) ListContainer(ctx context.Context, in *v1beta13.ListContainerRequest, opts ...grpc.CallOption) (*v1beta13.ListContainerResponse, error) {
	out := new(v1beta13.ListContainerResponse)
	err := c.cc.Invoke(ctx, "/cs3.gateway.v1beta1.GatewayAPI/ListContainer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) ListFileVersions(ctx context.Context, in *v1beta13.ListFileVersionsRequest, opts ...grpc.CallOption) (*v1beta13.ListFileVersionsResponse, error) {
	out := new(v1beta13.ListFileVersionsResponse)
	err := c.cc.Invoke(ctx, "/cs3.gateway.v1beta1.GatewayAPI/ListFileVersions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) ListRecycleStream(ctx context.Context, in *ListRecycleStreamRequest, opts ...grpc.CallOption) (GatewayAPI_ListRecycleStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GatewayAPI_serviceDesc.Streams[1], "/cs3.gateway.v1beta1.GatewayAPI/ListRecycleStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &gatewayAPIListRecycleStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GatewayAPI_ListRecycleStreamClient interface {
	Recv() (*v1beta13.ListRecycleStreamResponse, error)
	grpc.ClientStream
}

type gatewayAPIListRecycleStreamClient struct {
	grpc.ClientStream
}

func (x *gatewayAPIListRecycleStreamClient) Recv() (*v1beta13.ListRecycleStreamResponse, error) {
	m := new(v1beta13.ListRecycleStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gatewayAPIClient) ListRecycle(ctx context.Context, in *ListRecycleRequest, opts ...grpc.CallOption) (*v1beta13.ListRecycleResponse, error) {
	out := new(v1beta13.ListRecycleResponse)
	err := c.cc.Invoke(ctx, "/cs3.gateway.v1beta1.GatewayAPI/ListRecycle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) Move(ctx context.Context, in *v1beta13.MoveRequest, opts ...grpc.CallOption) (*v1beta13.MoveResponse, error) {
	out := new(v1beta13.MoveResponse)
	err := c.cc.Invoke(ctx, "/cs3.gateway.v1beta1.GatewayAPI/Move", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) PurgeRecycle(ctx context.Context, in *PurgeRecycleRequest, opts ...grpc.CallOption) (*v1beta13.PurgeRecycleResponse, error) {
	out := new(v1beta13.PurgeRecycleResponse)
	err := c.cc.Invoke(ctx, "/cs3.gateway.v1beta1.GatewayAPI/PurgeRecycle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) RestoreFileVersion(ctx context.Context, in *v1beta13.RestoreFileVersionRequest, opts ...grpc.CallOption) (*v1beta13.RestoreFileVersionResponse, error) {
	out := new(v1beta13.RestoreFileVersionResponse)
	err := c.cc.Invoke(ctx, "/cs3.gateway.v1beta1.GatewayAPI/RestoreFileVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) RestoreRecycleItem(ctx context.Context, in *v1beta13.RestoreRecycleItemRequest, opts ...grpc.CallOption) (*v1beta13.RestoreRecycleItemResponse, error) {
	out := new(v1beta13.RestoreRecycleItemResponse)
	err := c.cc.Invoke(ctx, "/cs3.gateway.v1beta1.GatewayAPI/RestoreRecycleItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) Stat(ctx context.Context, in *v1beta13.StatRequest, opts ...grpc.CallOption) (*v1beta13.StatResponse, error) {
	out := new(v1beta13.StatResponse)
	err := c.cc.Invoke(ctx, "/cs3.gateway.v1beta1.GatewayAPI/Stat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) SetArbitraryMetadata(ctx context.Context, in *v1beta13.SetArbitraryMetadataRequest, opts ...grpc.CallOption) (*v1beta13.SetArbitraryMetadataResponse, error) {
	out := new(v1beta13.SetArbitraryMetadataResponse)
	err := c.cc.Invoke(ctx, "/cs3.gateway.v1beta1.GatewayAPI/SetArbitraryMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) UnsetArbitraryMetadata(ctx context.Context, in *v1beta13.UnsetArbitraryMetadataRequest, opts ...grpc.CallOption) (*v1beta13.UnsetArbitraryMetadataResponse, error) {
	out := new(v1beta13.UnsetArbitraryMetadataResponse)
	err := c.cc.Invoke(ctx, "/cs3.gateway.v1beta1.GatewayAPI/UnsetArbitraryMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) CreateHome(ctx context.Context, in *v1beta13.CreateHomeRequest, opts ...grpc.CallOption) (*v1beta13.CreateHomeResponse, error) {
	out := new(v1beta13.CreateHomeResponse)
	err := c.cc.Invoke(ctx, "/cs3.gateway.v1beta1.GatewayAPI/CreateHome", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) OpenFileInAppProvider(ctx context.Context, in *v1beta14.OpenFileInAppProviderRequest, opts ...grpc.CallOption) (*v1beta14.OpenFileInAppProviderResponse, error) {
	out := new(v1beta14.OpenFileInAppProviderResponse)
	err := c.cc.Invoke(ctx, "/cs3.gateway.v1beta1.GatewayAPI/OpenFileInAppProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) CreateShare(ctx context.Context, in *v1beta15.CreateShareRequest, opts ...grpc.CallOption) (*v1beta15.CreateShareResponse, error) {
	out := new(v1beta15.CreateShareResponse)
	err := c.cc.Invoke(ctx, "/cs3.gateway.v1beta1.GatewayAPI/CreateShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) RemoveShare(ctx context.Context, in *v1beta15.RemoveShareRequest, opts ...grpc.CallOption) (*v1beta15.RemoveShareResponse, error) {
	out := new(v1beta15.RemoveShareResponse)
	err := c.cc.Invoke(ctx, "/cs3.gateway.v1beta1.GatewayAPI/RemoveShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) GetShare(ctx context.Context, in *v1beta15.GetShareRequest, opts ...grpc.CallOption) (*v1beta15.GetShareResponse, error) {
	out := new(v1beta15.GetShareResponse)
	err := c.cc.Invoke(ctx, "/cs3.gateway.v1beta1.GatewayAPI/GetShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) ListShares(ctx context.Context, in *v1beta15.ListSharesRequest, opts ...grpc.CallOption) (*v1beta15.ListSharesResponse, error) {
	out := new(v1beta15.ListSharesResponse)
	err := c.cc.Invoke(ctx, "/cs3.gateway.v1beta1.GatewayAPI/ListShares", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) UpdateShare(ctx context.Context, in *v1beta15.UpdateShareRequest, opts ...grpc.CallOption) (*v1beta15.UpdateShareResponse, error) {
	out := new(v1beta15.UpdateShareResponse)
	err := c.cc.Invoke(ctx, "/cs3.gateway.v1beta1.GatewayAPI/UpdateShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) ListReceivedShares(ctx context.Context, in *v1beta15.ListReceivedSharesRequest, opts ...grpc.CallOption) (*v1beta15.ListReceivedSharesResponse, error) {
	out := new(v1beta15.ListReceivedSharesResponse)
	err := c.cc.Invoke(ctx, "/cs3.gateway.v1beta1.GatewayAPI/ListReceivedShares", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) UpdateReceivedShare(ctx context.Context, in *v1beta15.UpdateReceivedShareRequest, opts ...grpc.CallOption) (*v1beta15.UpdateReceivedShareResponse, error) {
	out := new(v1beta15.UpdateReceivedShareResponse)
	err := c.cc.Invoke(ctx, "/cs3.gateway.v1beta1.GatewayAPI/UpdateReceivedShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) GetReceivedShare(ctx context.Context, in *v1beta15.GetReceivedShareRequest, opts ...grpc.CallOption) (*v1beta15.GetReceivedShareResponse, error) {
	out := new(v1beta15.GetReceivedShareResponse)
	err := c.cc.Invoke(ctx, "/cs3.gateway.v1beta1.GatewayAPI/GetReceivedShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) SetKey(ctx context.Context, in *v1beta16.SetKeyRequest, opts ...grpc.CallOption) (*v1beta16.SetKeyResponse, error) {
	out := new(v1beta16.SetKeyResponse)
	err := c.cc.Invoke(ctx, "/cs3.gateway.v1beta1.GatewayAPI/SetKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) GetKey(ctx context.Context, in *v1beta16.GetKeyRequest, opts ...grpc.CallOption) (*v1beta16.GetKeyResponse, error) {
	out := new(v1beta16.GetKeyResponse)
	err := c.cc.Invoke(ctx, "/cs3.gateway.v1beta1.GatewayAPI/GetKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) CreatePublicShare(ctx context.Context, in *v1beta17.CreatePublicShareRequest, opts ...grpc.CallOption) (*v1beta17.CreatePublicShareResponse, error) {
	out := new(v1beta17.CreatePublicShareResponse)
	err := c.cc.Invoke(ctx, "/cs3.gateway.v1beta1.GatewayAPI/CreatePublicShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) RemovePublicShare(ctx context.Context, in *v1beta17.RemovePublicShareRequest, opts ...grpc.CallOption) (*v1beta17.RemovePublicShareResponse, error) {
	out := new(v1beta17.RemovePublicShareResponse)
	err := c.cc.Invoke(ctx, "/cs3.gateway.v1beta1.GatewayAPI/RemovePublicShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) GetPublicShare(ctx context.Context, in *v1beta17.GetPublicShareRequest, opts ...grpc.CallOption) (*v1beta17.GetPublicShareResponse, error) {
	out := new(v1beta17.GetPublicShareResponse)
	err := c.cc.Invoke(ctx, "/cs3.gateway.v1beta1.GatewayAPI/GetPublicShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) GetPublicShareByToken(ctx context.Context, in *v1beta17.GetPublicShareByTokenRequest, opts ...grpc.CallOption) (*v1beta17.GetPublicShareByTokenResponse, error) {
	out := new(v1beta17.GetPublicShareByTokenResponse)
	err := c.cc.Invoke(ctx, "/cs3.gateway.v1beta1.GatewayAPI/GetPublicShareByToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) ListPublicShares(ctx context.Context, in *v1beta17.ListPublicSharesRequest, opts ...grpc.CallOption) (*v1beta17.ListPublicSharesResponse, error) {
	out := new(v1beta17.ListPublicSharesResponse)
	err := c.cc.Invoke(ctx, "/cs3.gateway.v1beta1.GatewayAPI/ListPublicShares", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) UpdatePublicShare(ctx context.Context, in *v1beta17.UpdatePublicShareRequest, opts ...grpc.CallOption) (*v1beta17.UpdatePublicShareResponse, error) {
	out := new(v1beta17.UpdatePublicShareResponse)
	err := c.cc.Invoke(ctx, "/cs3.gateway.v1beta1.GatewayAPI/UpdatePublicShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) CreateOCMShare(ctx context.Context, in *v1beta18.CreateOCMShareRequest, opts ...grpc.CallOption) (*v1beta18.CreateOCMShareResponse, error) {
	out := new(v1beta18.CreateOCMShareResponse)
	err := c.cc.Invoke(ctx, "/cs3.gateway.v1beta1.GatewayAPI/CreateOCMShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) RemoveOCMShare(ctx context.Context, in *v1beta18.RemoveOCMShareRequest, opts ...grpc.CallOption) (*v1beta18.RemoveOCMShareResponse, error) {
	out := new(v1beta18.RemoveOCMShareResponse)
	err := c.cc.Invoke(ctx, "/cs3.gateway.v1beta1.GatewayAPI/RemoveOCMShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) GetOCMShare(ctx context.Context, in *v1beta18.GetOCMShareRequest, opts ...grpc.CallOption) (*v1beta18.GetOCMShareResponse, error) {
	out := new(v1beta18.GetOCMShareResponse)
	err := c.cc.Invoke(ctx, "/cs3.gateway.v1beta1.GatewayAPI/GetOCMShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) ListOCMShares(ctx context.Context, in *v1beta18.ListOCMSharesRequest, opts ...grpc.CallOption) (*v1beta18.ListOCMSharesResponse, error) {
	out := new(v1beta18.ListOCMSharesResponse)
	err := c.cc.Invoke(ctx, "/cs3.gateway.v1beta1.GatewayAPI/ListOCMShares", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) UpdateOCMShare(ctx context.Context, in *v1beta18.UpdateOCMShareRequest, opts ...grpc.CallOption) (*v1beta18.UpdateOCMShareResponse, error) {
	out := new(v1beta18.UpdateOCMShareResponse)
	err := c.cc.Invoke(ctx, "/cs3.gateway.v1beta1.GatewayAPI/UpdateOCMShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) ListReceivedOCMShares(ctx context.Context, in *v1beta18.ListReceivedOCMSharesRequest, opts ...grpc.CallOption) (*v1beta18.ListReceivedOCMSharesResponse, error) {
	out := new(v1beta18.ListReceivedOCMSharesResponse)
	err := c.cc.Invoke(ctx, "/cs3.gateway.v1beta1.GatewayAPI/ListReceivedOCMShares", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) UpdateReceivedOCMShare(ctx context.Context, in *v1beta18.UpdateReceivedOCMShareRequest, opts ...grpc.CallOption) (*v1beta18.UpdateReceivedOCMShareResponse, error) {
	out := new(v1beta18.UpdateReceivedOCMShareResponse)
	err := c.cc.Invoke(ctx, "/cs3.gateway.v1beta1.GatewayAPI/UpdateReceivedOCMShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) GetReceivedOCMShare(ctx context.Context, in *v1beta18.GetReceivedOCMShareRequest, opts ...grpc.CallOption) (*v1beta18.GetReceivedOCMShareResponse, error) {
	out := new(v1beta18.GetReceivedOCMShareResponse)
	err := c.cc.Invoke(ctx, "/cs3.gateway.v1beta1.GatewayAPI/GetReceivedOCMShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) GetAppProviders(ctx context.Context, in *v1beta19.GetAppProvidersRequest, opts ...grpc.CallOption) (*v1beta19.GetAppProvidersResponse, error) {
	out := new(v1beta19.GetAppProvidersResponse)
	err := c.cc.Invoke(ctx, "/cs3.gateway.v1beta1.GatewayAPI/GetAppProviders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) ListAppProviders(ctx context.Context, in *v1beta19.ListAppProvidersRequest, opts ...grpc.CallOption) (*v1beta19.ListAppProvidersResponse, error) {
	out := new(v1beta19.ListAppProvidersResponse)
	err := c.cc.Invoke(ctx, "/cs3.gateway.v1beta1.GatewayAPI/ListAppProviders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) GetUser(ctx context.Context, in *v1beta12.GetUserRequest, opts ...grpc.CallOption) (*v1beta12.GetUserResponse, error) {
	out := new(v1beta12.GetUserResponse)
	err := c.cc.Invoke(ctx, "/cs3.gateway.v1beta1.GatewayAPI/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) GetUserGroups(ctx context.Context, in *v1beta12.GetUserGroupsRequest, opts ...grpc.CallOption) (*v1beta12.GetUserGroupsResponse, error) {
	out := new(v1beta12.GetUserGroupsResponse)
	err := c.cc.Invoke(ctx, "/cs3.gateway.v1beta1.GatewayAPI/GetUserGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) IsInGroup(ctx context.Context, in *v1beta12.IsInGroupRequest, opts ...grpc.CallOption) (*v1beta12.IsInGroupResponse, error) {
	out := new(v1beta12.IsInGroupResponse)
	err := c.cc.Invoke(ctx, "/cs3.gateway.v1beta1.GatewayAPI/IsInGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) FindUsers(ctx context.Context, in *v1beta12.FindUsersRequest, opts ...grpc.CallOption) (*v1beta12.FindUsersResponse, error) {
	out := new(v1beta12.FindUsersResponse)
	err := c.cc.Invoke(ctx, "/cs3.gateway.v1beta1.GatewayAPI/FindUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) ListAuthProviders(ctx context.Context, in *v1beta110.ListAuthProvidersRequest, opts ...grpc.CallOption) (*ListAuthProvidersResponse, error) {
	out := new(ListAuthProvidersResponse)
	err := c.cc.Invoke(ctx, "/cs3.gateway.v1beta1.GatewayAPI/ListAuthProviders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) GetHome(ctx context.Context, in *v1beta13.GetHomeRequest, opts ...grpc.CallOption) (*v1beta13.GetHomeResponse, error) {
	out := new(v1beta13.GetHomeResponse)
	err := c.cc.Invoke(ctx, "/cs3.gateway.v1beta1.GatewayAPI/GetHome", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) GenerateInviteToken(ctx context.Context, in *v1beta111.GenerateInviteTokenRequest, opts ...grpc.CallOption) (*v1beta111.GenerateInviteTokenResponse, error) {
	out := new(v1beta111.GenerateInviteTokenResponse)
	err := c.cc.Invoke(ctx, "/cs3.gateway.v1beta1.GatewayAPI/GenerateInviteToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) ForwardInvite(ctx context.Context, in *v1beta111.ForwardInviteRequest, opts ...grpc.CallOption) (*v1beta111.ForwardInviteResponse, error) {
	out := new(v1beta111.ForwardInviteResponse)
	err := c.cc.Invoke(ctx, "/cs3.gateway.v1beta1.GatewayAPI/ForwardInvite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) AcceptInvite(ctx context.Context, in *v1beta111.AcceptInviteRequest, opts ...grpc.CallOption) (*v1beta111.AcceptInviteResponse, error) {
	out := new(v1beta111.AcceptInviteResponse)
	err := c.cc.Invoke(ctx, "/cs3.gateway.v1beta1.GatewayAPI/AcceptInvite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) GetRemoteUser(ctx context.Context, in *v1beta111.GetRemoteUserRequest, opts ...grpc.CallOption) (*v1beta111.GetRemoteUserResponse, error) {
	out := new(v1beta111.GetRemoteUserResponse)
	err := c.cc.Invoke(ctx, "/cs3.gateway.v1beta1.GatewayAPI/GetRemoteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) IsProviderAllowed(ctx context.Context, in *v1beta112.IsProviderAllowedRequest, opts ...grpc.CallOption) (*v1beta112.IsProviderAllowedResponse, error) {
	out := new(v1beta112.IsProviderAllowedResponse)
	err := c.cc.Invoke(ctx, "/cs3.gateway.v1beta1.GatewayAPI/IsProviderAllowed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) GetInfoByDomain(ctx context.Context, in *v1beta112.GetInfoByDomainRequest, opts ...grpc.CallOption) (*v1beta112.GetInfoByDomainResponse, error) {
	out := new(v1beta112.GetInfoByDomainResponse)
	err := c.cc.Invoke(ctx, "/cs3.gateway.v1beta1.GatewayAPI/GetInfoByDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) ListAllProviders(ctx context.Context, in *v1beta112.ListAllProvidersRequest, opts ...grpc.CallOption) (*v1beta112.ListAllProvidersResponse, error) {
	out := new(v1beta112.ListAllProvidersResponse)
	err := c.cc.Invoke(ctx, "/cs3.gateway.v1beta1.GatewayAPI/ListAllProviders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) CreateOCMCoreShare(ctx context.Context, in *v1beta113.CreateOCMCoreShareRequest, opts ...grpc.CallOption) (*v1beta113.CreateOCMCoreShareResponse, error) {
	out := new(v1beta113.CreateOCMCoreShareResponse)
	err := c.cc.Invoke(ctx, "/cs3.gateway.v1beta1.GatewayAPI/CreateOCMCoreShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayAPIServer is the server API for GatewayAPI service.
type GatewayAPIServer interface {
	// Authenticates a user.
	Authenticate(context.Context, *AuthenticateRequest) (*AuthenticateResponse, error)
	// WhoAmI returns the information for a user.
	WhoAmI(context.Context, *WhoAmIRequest) (*WhoAmIResponse, error)
	// Creates a new resource of type container.
	// MUST return CODE_PRECONDITION_FAILED if the container
	// cannot be created at the specified reference.
	CreateContainer(context.Context, *v1beta13.CreateContainerRequest) (*v1beta13.CreateContainerResponse, error)
	// Deletes a resource.
	// If a resource specifies the non-empty container (directory, ...),
	// then the entire directory is deleted recursively.
	// If a resource specifies a reference or symlink type, only the reference is removed (not the target).
	// MUST return CODE_NOT_FOUND if the reference does not exist.
	Delete(context.Context, *v1beta13.DeleteRequest) (*v1beta13.DeleteResponse, error)
	// Returns the path reference for
	// the provided resource id reference.
	// MUST return CODE_NOT_FOUND if the reference does not exist
	GetPath(context.Context, *v1beta13.GetPathRequest) (*v1beta13.GetPathResponse, error)
	// Returns the quota available under the provided
	// reference.
	// MUST return CODE_NOT_FOUND if the reference does not exist
	// MUST return CODE_RESOURCE_EXHAUSTED on exceeded quota limits.
	GetQuota(context.Context, *GetQuotaRequest) (*v1beta13.GetQuotaResponse, error)
	// Initiates the download of a file using an
	// out-of-band data transfer mechanism.
	InitiateFileDownload(context.Context, *v1beta13.InitiateFileDownloadRequest) (*InitiateFileDownloadResponse, error)
	// Initiates the upload of a file using an
	// out-of-band data transfer mechanism.
	InitiateFileUpload(context.Context, *v1beta13.InitiateFileUploadRequest) (*InitiateFileUploadResponse, error)
	// Returns a stream of resource informations
	// for the provided reference.
	// MUST return CODE_NOT_FOUND if the reference does not exists.
	ListContainerStream(*v1beta13.ListContainerStreamRequest, GatewayAPI_ListContainerStreamServer) error
	// Returns a list of resource information
	// for the provided reference.
	// MUST return CODE_NOT_FOUND if the reference does not exists.
	ListContainer(context.Context, *v1beta13.ListContainerRequest) (*v1beta13.ListContainerResponse, error)
	// Returns a list of the versions for a resource of
	// type file at the provided reference.
	// MUST return CODE_NOT_FOUND if the reference does not exist.
	// MUST return CODE_OK and MUST return an empty list if no versions are available.
	// TODO: What code if resource not of type file?
	ListFileVersions(context.Context, *v1beta13.ListFileVersionsRequest) (*v1beta13.ListFileVersionsResponse, error)
	// Returns a stream of recycle items for this storage provider.
	ListRecycleStream(*ListRecycleStreamRequest, GatewayAPI_ListRecycleStreamServer) error
	// Returns a list of recycle items for this storage provider.
	// MUST return CODE_OK and MUST return an empty list if no recycle items are available.
	ListRecycle(context.Context, *ListRecycleRequest) (*v1beta13.ListRecycleResponse, error)
	// Moves a resource from one reference to another.
	// MUST return CODE_NOT_FOUND if any of the references do not exist.
	// MUST return CODE_PRECONDITION_FAILED if the source reference
	// cannot be moved to the destination reference.
	Move(context.Context, *v1beta13.MoveRequest) (*v1beta13.MoveResponse, error)
	// Permanently removes a recycle item from the recycle.
	// This operation is irrevocable.
	// MUST return CODE_NOT_FOUND if the recycle item id does not exist.
	PurgeRecycle(context.Context, *PurgeRecycleRequest) (*v1beta13.PurgeRecycleResponse, error)
	// Restores a file version for the provided reference.
	// MUST return CODE_NOT_FOUND if the reference does not exist.
	// MUST return CODE_NOT_FOUND if the version does not exist.
	RestoreFileVersion(context.Context, *v1beta13.RestoreFileVersionRequest) (*v1beta13.RestoreFileVersionResponse, error)
	// Restores a recycle item from the recycle.
	// MUST return CODE_NOT_FOUND if the recycle item id does not exist.
	// MUST return CODE_PRECONDITION_FAILED if the restore_path is non-empty
	// and the recycle item cannot be restored to the restore_path.
	RestoreRecycleItem(context.Context, *v1beta13.RestoreRecycleItemRequest) (*v1beta13.RestoreRecycleItemResponse, error)
	// Returns the resource information at the provided reference.
	// MUST return CODE_NOT_FOUND if the reference does not exist.
	Stat(context.Context, *v1beta13.StatRequest) (*v1beta13.StatResponse, error)
	// Sets arbitrary metadata into a storage resource.
	// Arbitrary metadata is returned in a cs3.storage.provider.v1beta1.ResourceInfo.
	SetArbitraryMetadata(context.Context, *v1beta13.SetArbitraryMetadataRequest) (*v1beta13.SetArbitraryMetadataResponse, error)
	// Unsets arbitrary metdata into a storage resource.
	// Arbitrary metadata is returned in a cs3.storage.provider.v1beta1.ResourceInfo.
	UnsetArbitraryMetadata(context.Context, *v1beta13.UnsetArbitraryMetadataRequest) (*v1beta13.UnsetArbitraryMetadataResponse, error)
	// Creates the home directory for a user.
	CreateHome(context.Context, *v1beta13.CreateHomeRequest) (*v1beta13.CreateHomeResponse, error)
	// Returns the iframe url from the WOPI server. The iframe url will let you open the document in the correct online document editor.
	OpenFileInAppProvider(context.Context, *v1beta14.OpenFileInAppProviderRequest) (*v1beta14.OpenFileInAppProviderResponse, error)
	// Creates a new share.
	// MUST return CODE_NOT_FOUND if the resource reference does not exist.
	// MUST return CODE_ALREADY_EXISTS if the share already exists for the 4-tuple consisting of
	// (owner, shared_resource, grantee).
	// New shares MUST be created in the state SHARE_STATE_PENDING.
	CreateShare(context.Context, *v1beta15.CreateShareRequest) (*v1beta15.CreateShareResponse, error)
	// Removes a share.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	RemoveShare(context.Context, *v1beta15.RemoveShareRequest) (*v1beta15.RemoveShareResponse, error)
	// Gets share information for a single share.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	GetShare(context.Context, *v1beta15.GetShareRequest) (*v1beta15.GetShareResponse, error)
	// List the shares the authproviderenticated principal has created,
	// both as owner and creator. If a filter is specified, only
	// shares satisfying the filter MUST be returned.
	ListShares(context.Context, *v1beta15.ListSharesRequest) (*v1beta15.ListSharesResponse, error)
	// Updates a share.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	UpdateShare(context.Context, *v1beta15.UpdateShareRequest) (*v1beta15.UpdateShareResponse, error)
	// List all shares the authproviderenticated principal has received.
	ListReceivedShares(context.Context, *v1beta15.ListReceivedSharesRequest) (*v1beta15.ListReceivedSharesResponse, error)
	// Update the received share to change the share state or the display name.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	UpdateReceivedShare(context.Context, *v1beta15.UpdateReceivedShareRequest) (*v1beta15.UpdateReceivedShareResponse, error)
	// Get the information for the given received share reference.
	// MUST return CODE_NOT_FOUND if the received share reference does not exist.
	GetReceivedShare(context.Context, *v1beta15.GetReceivedShareRequest) (*v1beta15.GetReceivedShareResponse, error)
	// Maps the key-value pair.
	SetKey(context.Context, *v1beta16.SetKeyRequest) (*v1beta16.SetKeyResponse, error)
	// Returns the value associated with the
	// requested key.
	GetKey(context.Context, *v1beta16.GetKeyRequest) (*v1beta16.GetKeyResponse, error)
	// Creates a new share.
	// MUST return CODE_NOT_FOUND if the resource reference does not exist.
	// MUST return CODE_ALREADY_EXISTS if the share already exists for the 4-tuple consisting of
	// (owner, shared_resource, grantee).
	// New shares MUST be created in the state SHARE_STATE_PENDING.
	CreatePublicShare(context.Context, *v1beta17.CreatePublicShareRequest) (*v1beta17.CreatePublicShareResponse, error)
	// Removes a share.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	RemovePublicShare(context.Context, *v1beta17.RemovePublicShareRequest) (*v1beta17.RemovePublicShareResponse, error)
	// Gets share information for a single share.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	GetPublicShare(context.Context, *v1beta17.GetPublicShareRequest) (*v1beta17.GetPublicShareResponse, error)
	// Gets share information for a single share by its unlisted token.
	// MUST return CODE_NOT_FOUND if the share does not exist.
	GetPublicShareByToken(context.Context, *v1beta17.GetPublicShareByTokenRequest) (*v1beta17.GetPublicShareByTokenResponse, error)
	// List the shares the authproviderenticated principal has created,
	// both as owner and creator. If a filter is specified, only
	// shares satisfying the filter MUST be returned.
	ListPublicShares(context.Context, *v1beta17.ListPublicSharesRequest) (*v1beta17.ListPublicSharesResponse, error)
	// Updates a share.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	UpdatePublicShare(context.Context, *v1beta17.UpdatePublicShareRequest) (*v1beta17.UpdatePublicShareResponse, error)
	// Creates a new ocm share.
	// MUST return CODE_NOT_FOUND if the resource reference does not exist.
	// MUST return CODE_ALREADY_EXISTS if the share already exists for the 4-tuple consisting of
	// (owner, shared_resource, grantee).
	// New shares MUST be created in the state SHARE_STATE_PENDING.
	CreateOCMShare(context.Context, *v1beta18.CreateOCMShareRequest) (*v1beta18.CreateOCMShareResponse, error)
	// Removes a share.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	RemoveOCMShare(context.Context, *v1beta18.RemoveOCMShareRequest) (*v1beta18.RemoveOCMShareResponse, error)
	// Gets share information for a single share.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	GetOCMShare(context.Context, *v1beta18.GetOCMShareRequest) (*v1beta18.GetOCMShareResponse, error)
	// List the shares the authproviderenticated principal has created,
	// both as owner and creator. If a filter is specified, only
	// shares satisfying the filter MUST be returned.
	ListOCMShares(context.Context, *v1beta18.ListOCMSharesRequest) (*v1beta18.ListOCMSharesResponse, error)
	// Updates a share.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	UpdateOCMShare(context.Context, *v1beta18.UpdateOCMShareRequest) (*v1beta18.UpdateOCMShareResponse, error)
	// List all shares the authproviderenticated principal has received.
	ListReceivedOCMShares(context.Context, *v1beta18.ListReceivedOCMSharesRequest) (*v1beta18.ListReceivedOCMSharesResponse, error)
	// Update the received share to change the share state or the display name.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	UpdateReceivedOCMShare(context.Context, *v1beta18.UpdateReceivedOCMShareRequest) (*v1beta18.UpdateReceivedOCMShareResponse, error)
	// Get the information for the given received share reference.
	// MUST return CODE_NOT_FOUND if the received share reference does not exist.
	GetReceivedOCMShare(context.Context, *v1beta18.GetReceivedOCMShareRequest) (*v1beta18.GetReceivedOCMShareResponse, error)
	// Returns the app providers that are capable of handling this resource info.
	// MUST return CODE_NOT_FOUND if no providers are available.
	GetAppProviders(context.Context, *v1beta19.GetAppProvidersRequest) (*v1beta19.GetAppProvidersResponse, error)
	// Returns a list of the available app providers known by this registry.
	ListAppProviders(context.Context, *v1beta19.ListAppProvidersRequest) (*v1beta19.ListAppProvidersResponse, error)
	// Gets the information about an user by its user id.
	GetUser(context.Context, *v1beta12.GetUserRequest) (*v1beta12.GetUserResponse, error)
	// Gets the groups of a user.
	GetUserGroups(context.Context, *v1beta12.GetUserGroupsRequest) (*v1beta12.GetUserGroupsResponse, error)
	// Tells if the user is in a certain group.
	IsInGroup(context.Context, *v1beta12.IsInGroupRequest) (*v1beta12.IsInGroupResponse, error)
	// Finds users by any attribute of the user?
	// TODO(labkode): to define the filters that make more sense.
	FindUsers(context.Context, *v1beta12.FindUsersRequest) (*v1beta12.FindUsersResponse, error)
	// Returns a list of the available auth providers known by this registry.
	ListAuthProviders(context.Context, *v1beta110.ListAuthProvidersRequest) (*ListAuthProvidersResponse, error)
	// Returns the home path for the given authenticated user.
	// When a user has access to multiple storage providers, one of them is the home.
	GetHome(context.Context, *v1beta13.GetHomeRequest) (*v1beta13.GetHomeResponse, error)
	// Generates a new token for the user with a validity of 24 hours.
	GenerateInviteToken(context.Context, *v1beta111.GenerateInviteTokenRequest) (*v1beta111.GenerateInviteTokenResponse, error)
	// Forwards a received invite to the sync'n'share system provider.
	ForwardInvite(context.Context, *v1beta111.ForwardInviteRequest) (*v1beta111.ForwardInviteResponse, error)
	// Completes an invitation acceptance.
	AcceptInvite(context.Context, *v1beta111.AcceptInviteRequest) (*v1beta111.AcceptInviteResponse, error)
	// Retrieves details about a remote user who has accepted an invite to share.
	GetRemoteUser(context.Context, *v1beta111.GetRemoteUserRequest) (*v1beta111.GetRemoteUserResponse, error)
	// Check if a given system provider is registered in the mesh or not.
	// MUST return CODE_UNAUTHENTICATED if the system is not registered
	IsProviderAllowed(context.Context, *v1beta112.IsProviderAllowedRequest) (*v1beta112.IsProviderAllowedResponse, error)
	// Get the information of the provider identified by a specific domain.
	// MUST return CODE_NOT_FOUND if the sync'n'share system provider does not exist.
	GetInfoByDomain(context.Context, *v1beta112.GetInfoByDomainRequest) (*v1beta112.GetInfoByDomainResponse, error)
	// Get the information of all the providers registered in the mesh.
	ListAllProviders(context.Context, *v1beta112.ListAllProvidersRequest) (*v1beta112.ListAllProvidersResponse, error)
	// Creates a new ocm share.
	CreateOCMCoreShare(context.Context, *v1beta113.CreateOCMCoreShareRequest) (*v1beta113.CreateOCMCoreShareResponse, error)
}

// UnimplementedGatewayAPIServer can be embedded to have forward compatible implementations.
type UnimplementedGatewayAPIServer struct {
}

func (*UnimplementedGatewayAPIServer) Authenticate(ctx context.Context, req *AuthenticateRequest) (*AuthenticateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authenticate not implemented")
}
func (*UnimplementedGatewayAPIServer) WhoAmI(ctx context.Context, req *WhoAmIRequest) (*WhoAmIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WhoAmI not implemented")
}
func (*UnimplementedGatewayAPIServer) CreateContainer(ctx context.Context, req *v1beta13.CreateContainerRequest) (*v1beta13.CreateContainerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateContainer not implemented")
}
func (*UnimplementedGatewayAPIServer) Delete(ctx context.Context, req *v1beta13.DeleteRequest) (*v1beta13.DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedGatewayAPIServer) GetPath(ctx context.Context, req *v1beta13.GetPathRequest) (*v1beta13.GetPathResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPath not implemented")
}
func (*UnimplementedGatewayAPIServer) GetQuota(ctx context.Context, req *GetQuotaRequest) (*v1beta13.GetQuotaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuota not implemented")
}
func (*UnimplementedGatewayAPIServer) InitiateFileDownload(ctx context.Context, req *v1beta13.InitiateFileDownloadRequest) (*InitiateFileDownloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitiateFileDownload not implemented")
}
func (*UnimplementedGatewayAPIServer) InitiateFileUpload(ctx context.Context, req *v1beta13.InitiateFileUploadRequest) (*InitiateFileUploadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitiateFileUpload not implemented")
}
func (*UnimplementedGatewayAPIServer) ListContainerStream(req *v1beta13.ListContainerStreamRequest, srv GatewayAPI_ListContainerStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ListContainerStream not implemented")
}
func (*UnimplementedGatewayAPIServer) ListContainer(ctx context.Context, req *v1beta13.ListContainerRequest) (*v1beta13.ListContainerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListContainer not implemented")
}
func (*UnimplementedGatewayAPIServer) ListFileVersions(ctx context.Context, req *v1beta13.ListFileVersionsRequest) (*v1beta13.ListFileVersionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFileVersions not implemented")
}
func (*UnimplementedGatewayAPIServer) ListRecycleStream(req *ListRecycleStreamRequest, srv GatewayAPI_ListRecycleStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ListRecycleStream not implemented")
}
func (*UnimplementedGatewayAPIServer) ListRecycle(ctx context.Context, req *ListRecycleRequest) (*v1beta13.ListRecycleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRecycle not implemented")
}
func (*UnimplementedGatewayAPIServer) Move(ctx context.Context, req *v1beta13.MoveRequest) (*v1beta13.MoveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Move not implemented")
}
func (*UnimplementedGatewayAPIServer) PurgeRecycle(ctx context.Context, req *PurgeRecycleRequest) (*v1beta13.PurgeRecycleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PurgeRecycle not implemented")
}
func (*UnimplementedGatewayAPIServer) RestoreFileVersion(ctx context.Context, req *v1beta13.RestoreFileVersionRequest) (*v1beta13.RestoreFileVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreFileVersion not implemented")
}
func (*UnimplementedGatewayAPIServer) RestoreRecycleItem(ctx context.Context, req *v1beta13.RestoreRecycleItemRequest) (*v1beta13.RestoreRecycleItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreRecycleItem not implemented")
}
func (*UnimplementedGatewayAPIServer) Stat(ctx context.Context, req *v1beta13.StatRequest) (*v1beta13.StatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stat not implemented")
}
func (*UnimplementedGatewayAPIServer) SetArbitraryMetadata(ctx context.Context, req *v1beta13.SetArbitraryMetadataRequest) (*v1beta13.SetArbitraryMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetArbitraryMetadata not implemented")
}
func (*UnimplementedGatewayAPIServer) UnsetArbitraryMetadata(ctx context.Context, req *v1beta13.UnsetArbitraryMetadataRequest) (*v1beta13.UnsetArbitraryMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnsetArbitraryMetadata not implemented")
}
func (*UnimplementedGatewayAPIServer) CreateHome(ctx context.Context, req *v1beta13.CreateHomeRequest) (*v1beta13.CreateHomeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHome not implemented")
}
func (*UnimplementedGatewayAPIServer) OpenFileInAppProvider(ctx context.Context, req *v1beta14.OpenFileInAppProviderRequest) (*v1beta14.OpenFileInAppProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenFileInAppProvider not implemented")
}
func (*UnimplementedGatewayAPIServer) CreateShare(ctx context.Context, req *v1beta15.CreateShareRequest) (*v1beta15.CreateShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateShare not implemented")
}
func (*UnimplementedGatewayAPIServer) RemoveShare(ctx context.Context, req *v1beta15.RemoveShareRequest) (*v1beta15.RemoveShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveShare not implemented")
}
func (*UnimplementedGatewayAPIServer) GetShare(ctx context.Context, req *v1beta15.GetShareRequest) (*v1beta15.GetShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShare not implemented")
}
func (*UnimplementedGatewayAPIServer) ListShares(ctx context.Context, req *v1beta15.ListSharesRequest) (*v1beta15.ListSharesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListShares not implemented")
}
func (*UnimplementedGatewayAPIServer) UpdateShare(ctx context.Context, req *v1beta15.UpdateShareRequest) (*v1beta15.UpdateShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateShare not implemented")
}
func (*UnimplementedGatewayAPIServer) ListReceivedShares(ctx context.Context, req *v1beta15.ListReceivedSharesRequest) (*v1beta15.ListReceivedSharesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReceivedShares not implemented")
}
func (*UnimplementedGatewayAPIServer) UpdateReceivedShare(ctx context.Context, req *v1beta15.UpdateReceivedShareRequest) (*v1beta15.UpdateReceivedShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReceivedShare not implemented")
}
func (*UnimplementedGatewayAPIServer) GetReceivedShare(ctx context.Context, req *v1beta15.GetReceivedShareRequest) (*v1beta15.GetReceivedShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReceivedShare not implemented")
}
func (*UnimplementedGatewayAPIServer) SetKey(ctx context.Context, req *v1beta16.SetKeyRequest) (*v1beta16.SetKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetKey not implemented")
}
func (*UnimplementedGatewayAPIServer) GetKey(ctx context.Context, req *v1beta16.GetKeyRequest) (*v1beta16.GetKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKey not implemented")
}
func (*UnimplementedGatewayAPIServer) CreatePublicShare(ctx context.Context, req *v1beta17.CreatePublicShareRequest) (*v1beta17.CreatePublicShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePublicShare not implemented")
}
func (*UnimplementedGatewayAPIServer) RemovePublicShare(ctx context.Context, req *v1beta17.RemovePublicShareRequest) (*v1beta17.RemovePublicShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePublicShare not implemented")
}
func (*UnimplementedGatewayAPIServer) GetPublicShare(ctx context.Context, req *v1beta17.GetPublicShareRequest) (*v1beta17.GetPublicShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPublicShare not implemented")
}
func (*UnimplementedGatewayAPIServer) GetPublicShareByToken(ctx context.Context, req *v1beta17.GetPublicShareByTokenRequest) (*v1beta17.GetPublicShareByTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPublicShareByToken not implemented")
}
func (*UnimplementedGatewayAPIServer) ListPublicShares(ctx context.Context, req *v1beta17.ListPublicSharesRequest) (*v1beta17.ListPublicSharesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPublicShares not implemented")
}
func (*UnimplementedGatewayAPIServer) UpdatePublicShare(ctx context.Context, req *v1beta17.UpdatePublicShareRequest) (*v1beta17.UpdatePublicShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePublicShare not implemented")
}
func (*UnimplementedGatewayAPIServer) CreateOCMShare(ctx context.Context, req *v1beta18.CreateOCMShareRequest) (*v1beta18.CreateOCMShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOCMShare not implemented")
}
func (*UnimplementedGatewayAPIServer) RemoveOCMShare(ctx context.Context, req *v1beta18.RemoveOCMShareRequest) (*v1beta18.RemoveOCMShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveOCMShare not implemented")
}
func (*UnimplementedGatewayAPIServer) GetOCMShare(ctx context.Context, req *v1beta18.GetOCMShareRequest) (*v1beta18.GetOCMShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOCMShare not implemented")
}
func (*UnimplementedGatewayAPIServer) ListOCMShares(ctx context.Context, req *v1beta18.ListOCMSharesRequest) (*v1beta18.ListOCMSharesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOCMShares not implemented")
}
func (*UnimplementedGatewayAPIServer) UpdateOCMShare(ctx context.Context, req *v1beta18.UpdateOCMShareRequest) (*v1beta18.UpdateOCMShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOCMShare not implemented")
}
func (*UnimplementedGatewayAPIServer) ListReceivedOCMShares(ctx context.Context, req *v1beta18.ListReceivedOCMSharesRequest) (*v1beta18.ListReceivedOCMSharesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReceivedOCMShares not implemented")
}
func (*UnimplementedGatewayAPIServer) UpdateReceivedOCMShare(ctx context.Context, req *v1beta18.UpdateReceivedOCMShareRequest) (*v1beta18.UpdateReceivedOCMShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReceivedOCMShare not implemented")
}
func (*UnimplementedGatewayAPIServer) GetReceivedOCMShare(ctx context.Context, req *v1beta18.GetReceivedOCMShareRequest) (*v1beta18.GetReceivedOCMShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReceivedOCMShare not implemented")
}
func (*UnimplementedGatewayAPIServer) GetAppProviders(ctx context.Context, req *v1beta19.GetAppProvidersRequest) (*v1beta19.GetAppProvidersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppProviders not implemented")
}
func (*UnimplementedGatewayAPIServer) ListAppProviders(ctx context.Context, req *v1beta19.ListAppProvidersRequest) (*v1beta19.ListAppProvidersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAppProviders not implemented")
}
func (*UnimplementedGatewayAPIServer) GetUser(ctx context.Context, req *v1beta12.GetUserRequest) (*v1beta12.GetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (*UnimplementedGatewayAPIServer) GetUserGroups(ctx context.Context, req *v1beta12.GetUserGroupsRequest) (*v1beta12.GetUserGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserGroups not implemented")
}
func (*UnimplementedGatewayAPIServer) IsInGroup(ctx context.Context, req *v1beta12.IsInGroupRequest) (*v1beta12.IsInGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsInGroup not implemented")
}
func (*UnimplementedGatewayAPIServer) FindUsers(ctx context.Context, req *v1beta12.FindUsersRequest) (*v1beta12.FindUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindUsers not implemented")
}
func (*UnimplementedGatewayAPIServer) ListAuthProviders(ctx context.Context, req *v1beta110.ListAuthProvidersRequest) (*ListAuthProvidersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAuthProviders not implemented")
}
func (*UnimplementedGatewayAPIServer) GetHome(ctx context.Context, req *v1beta13.GetHomeRequest) (*v1beta13.GetHomeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHome not implemented")
}
func (*UnimplementedGatewayAPIServer) GenerateInviteToken(ctx context.Context, req *v1beta111.GenerateInviteTokenRequest) (*v1beta111.GenerateInviteTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateInviteToken not implemented")
}
func (*UnimplementedGatewayAPIServer) ForwardInvite(ctx context.Context, req *v1beta111.ForwardInviteRequest) (*v1beta111.ForwardInviteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForwardInvite not implemented")
}
func (*UnimplementedGatewayAPIServer) AcceptInvite(ctx context.Context, req *v1beta111.AcceptInviteRequest) (*v1beta111.AcceptInviteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptInvite not implemented")
}
func (*UnimplementedGatewayAPIServer) GetRemoteUser(ctx context.Context, req *v1beta111.GetRemoteUserRequest) (*v1beta111.GetRemoteUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRemoteUser not implemented")
}
func (*UnimplementedGatewayAPIServer) IsProviderAllowed(ctx context.Context, req *v1beta112.IsProviderAllowedRequest) (*v1beta112.IsProviderAllowedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsProviderAllowed not implemented")
}
func (*UnimplementedGatewayAPIServer) GetInfoByDomain(ctx context.Context, req *v1beta112.GetInfoByDomainRequest) (*v1beta112.GetInfoByDomainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfoByDomain not implemented")
}
func (*UnimplementedGatewayAPIServer) ListAllProviders(ctx context.Context, req *v1beta112.ListAllProvidersRequest) (*v1beta112.ListAllProvidersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAllProviders not implemented")
}
func (*UnimplementedGatewayAPIServer) CreateOCMCoreShare(ctx context.Context, req *v1beta113.CreateOCMCoreShareRequest) (*v1beta113.CreateOCMCoreShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOCMCoreShare not implemented")
}

func RegisterGatewayAPIServer(s *grpc.Server, srv GatewayAPIServer) {
	s.RegisterService(&_GatewayAPI_serviceDesc, srv)
}

func _GatewayAPI_Authenticate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).Authenticate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gateway.v1beta1.GatewayAPI/Authenticate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).Authenticate(ctx, req.(*AuthenticateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_WhoAmI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WhoAmIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).WhoAmI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gateway.v1beta1.GatewayAPI/WhoAmI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).WhoAmI(ctx, req.(*WhoAmIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_CreateContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta13.CreateContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).CreateContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gateway.v1beta1.GatewayAPI/CreateContainer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).CreateContainer(ctx, req.(*v1beta13.CreateContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta13.DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gateway.v1beta1.GatewayAPI/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).Delete(ctx, req.(*v1beta13.DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_GetPath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta13.GetPathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).GetPath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gateway.v1beta1.GatewayAPI/GetPath",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).GetPath(ctx, req.(*v1beta13.GetPathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_GetQuota_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQuotaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).GetQuota(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gateway.v1beta1.GatewayAPI/GetQuota",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).GetQuota(ctx, req.(*GetQuotaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_InitiateFileDownload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta13.InitiateFileDownloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).InitiateFileDownload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gateway.v1beta1.GatewayAPI/InitiateFileDownload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).InitiateFileDownload(ctx, req.(*v1beta13.InitiateFileDownloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_InitiateFileUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta13.InitiateFileUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).InitiateFileUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gateway.v1beta1.GatewayAPI/InitiateFileUpload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).InitiateFileUpload(ctx, req.(*v1beta13.InitiateFileUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_ListContainerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(v1beta13.ListContainerStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GatewayAPIServer).ListContainerStream(m, &gatewayAPIListContainerStreamServer{stream})
}

type GatewayAPI_ListContainerStreamServer interface {
	Send(*v1beta13.ListContainerStreamResponse) error
	grpc.ServerStream
}

type gatewayAPIListContainerStreamServer struct {
	grpc.ServerStream
}

func (x *gatewayAPIListContainerStreamServer) Send(m *v1beta13.ListContainerStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _GatewayAPI_ListContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta13.ListContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).ListContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gateway.v1beta1.GatewayAPI/ListContainer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).ListContainer(ctx, req.(*v1beta13.ListContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_ListFileVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta13.ListFileVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).ListFileVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gateway.v1beta1.GatewayAPI/ListFileVersions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).ListFileVersions(ctx, req.(*v1beta13.ListFileVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_ListRecycleStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListRecycleStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GatewayAPIServer).ListRecycleStream(m, &gatewayAPIListRecycleStreamServer{stream})
}

type GatewayAPI_ListRecycleStreamServer interface {
	Send(*v1beta13.ListRecycleStreamResponse) error
	grpc.ServerStream
}

type gatewayAPIListRecycleStreamServer struct {
	grpc.ServerStream
}

func (x *gatewayAPIListRecycleStreamServer) Send(m *v1beta13.ListRecycleStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _GatewayAPI_ListRecycle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRecycleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).ListRecycle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gateway.v1beta1.GatewayAPI/ListRecycle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).ListRecycle(ctx, req.(*ListRecycleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_Move_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta13.MoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).Move(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gateway.v1beta1.GatewayAPI/Move",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).Move(ctx, req.(*v1beta13.MoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_PurgeRecycle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PurgeRecycleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).PurgeRecycle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gateway.v1beta1.GatewayAPI/PurgeRecycle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).PurgeRecycle(ctx, req.(*PurgeRecycleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_RestoreFileVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta13.RestoreFileVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).RestoreFileVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gateway.v1beta1.GatewayAPI/RestoreFileVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).RestoreFileVersion(ctx, req.(*v1beta13.RestoreFileVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_RestoreRecycleItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta13.RestoreRecycleItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).RestoreRecycleItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gateway.v1beta1.GatewayAPI/RestoreRecycleItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).RestoreRecycleItem(ctx, req.(*v1beta13.RestoreRecycleItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_Stat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta13.StatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).Stat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gateway.v1beta1.GatewayAPI/Stat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).Stat(ctx, req.(*v1beta13.StatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_SetArbitraryMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta13.SetArbitraryMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).SetArbitraryMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gateway.v1beta1.GatewayAPI/SetArbitraryMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).SetArbitraryMetadata(ctx, req.(*v1beta13.SetArbitraryMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_UnsetArbitraryMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta13.UnsetArbitraryMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).UnsetArbitraryMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gateway.v1beta1.GatewayAPI/UnsetArbitraryMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).UnsetArbitraryMetadata(ctx, req.(*v1beta13.UnsetArbitraryMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_CreateHome_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta13.CreateHomeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).CreateHome(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gateway.v1beta1.GatewayAPI/CreateHome",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).CreateHome(ctx, req.(*v1beta13.CreateHomeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_OpenFileInAppProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta14.OpenFileInAppProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).OpenFileInAppProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gateway.v1beta1.GatewayAPI/OpenFileInAppProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).OpenFileInAppProvider(ctx, req.(*v1beta14.OpenFileInAppProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_CreateShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta15.CreateShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).CreateShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gateway.v1beta1.GatewayAPI/CreateShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).CreateShare(ctx, req.(*v1beta15.CreateShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_RemoveShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta15.RemoveShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).RemoveShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gateway.v1beta1.GatewayAPI/RemoveShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).RemoveShare(ctx, req.(*v1beta15.RemoveShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_GetShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta15.GetShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).GetShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gateway.v1beta1.GatewayAPI/GetShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).GetShare(ctx, req.(*v1beta15.GetShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_ListShares_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta15.ListSharesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).ListShares(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gateway.v1beta1.GatewayAPI/ListShares",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).ListShares(ctx, req.(*v1beta15.ListSharesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_UpdateShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta15.UpdateShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).UpdateShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gateway.v1beta1.GatewayAPI/UpdateShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).UpdateShare(ctx, req.(*v1beta15.UpdateShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_ListReceivedShares_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta15.ListReceivedSharesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).ListReceivedShares(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gateway.v1beta1.GatewayAPI/ListReceivedShares",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).ListReceivedShares(ctx, req.(*v1beta15.ListReceivedSharesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_UpdateReceivedShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta15.UpdateReceivedShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).UpdateReceivedShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gateway.v1beta1.GatewayAPI/UpdateReceivedShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).UpdateReceivedShare(ctx, req.(*v1beta15.UpdateReceivedShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_GetReceivedShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta15.GetReceivedShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).GetReceivedShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gateway.v1beta1.GatewayAPI/GetReceivedShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).GetReceivedShare(ctx, req.(*v1beta15.GetReceivedShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_SetKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta16.SetKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).SetKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gateway.v1beta1.GatewayAPI/SetKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).SetKey(ctx, req.(*v1beta16.SetKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_GetKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta16.GetKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).GetKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gateway.v1beta1.GatewayAPI/GetKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).GetKey(ctx, req.(*v1beta16.GetKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_CreatePublicShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta17.CreatePublicShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).CreatePublicShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gateway.v1beta1.GatewayAPI/CreatePublicShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).CreatePublicShare(ctx, req.(*v1beta17.CreatePublicShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_RemovePublicShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta17.RemovePublicShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).RemovePublicShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gateway.v1beta1.GatewayAPI/RemovePublicShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).RemovePublicShare(ctx, req.(*v1beta17.RemovePublicShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_GetPublicShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta17.GetPublicShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).GetPublicShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gateway.v1beta1.GatewayAPI/GetPublicShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).GetPublicShare(ctx, req.(*v1beta17.GetPublicShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_GetPublicShareByToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta17.GetPublicShareByTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).GetPublicShareByToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gateway.v1beta1.GatewayAPI/GetPublicShareByToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).GetPublicShareByToken(ctx, req.(*v1beta17.GetPublicShareByTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_ListPublicShares_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta17.ListPublicSharesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).ListPublicShares(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gateway.v1beta1.GatewayAPI/ListPublicShares",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).ListPublicShares(ctx, req.(*v1beta17.ListPublicSharesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_UpdatePublicShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta17.UpdatePublicShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).UpdatePublicShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gateway.v1beta1.GatewayAPI/UpdatePublicShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).UpdatePublicShare(ctx, req.(*v1beta17.UpdatePublicShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_CreateOCMShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta18.CreateOCMShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).CreateOCMShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gateway.v1beta1.GatewayAPI/CreateOCMShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).CreateOCMShare(ctx, req.(*v1beta18.CreateOCMShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_RemoveOCMShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta18.RemoveOCMShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).RemoveOCMShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gateway.v1beta1.GatewayAPI/RemoveOCMShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).RemoveOCMShare(ctx, req.(*v1beta18.RemoveOCMShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_GetOCMShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta18.GetOCMShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).GetOCMShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gateway.v1beta1.GatewayAPI/GetOCMShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).GetOCMShare(ctx, req.(*v1beta18.GetOCMShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_ListOCMShares_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta18.ListOCMSharesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).ListOCMShares(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gateway.v1beta1.GatewayAPI/ListOCMShares",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).ListOCMShares(ctx, req.(*v1beta18.ListOCMSharesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_UpdateOCMShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta18.UpdateOCMShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).UpdateOCMShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gateway.v1beta1.GatewayAPI/UpdateOCMShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).UpdateOCMShare(ctx, req.(*v1beta18.UpdateOCMShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_ListReceivedOCMShares_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta18.ListReceivedOCMSharesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).ListReceivedOCMShares(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gateway.v1beta1.GatewayAPI/ListReceivedOCMShares",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).ListReceivedOCMShares(ctx, req.(*v1beta18.ListReceivedOCMSharesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_UpdateReceivedOCMShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta18.UpdateReceivedOCMShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).UpdateReceivedOCMShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gateway.v1beta1.GatewayAPI/UpdateReceivedOCMShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).UpdateReceivedOCMShare(ctx, req.(*v1beta18.UpdateReceivedOCMShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_GetReceivedOCMShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta18.GetReceivedOCMShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).GetReceivedOCMShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gateway.v1beta1.GatewayAPI/GetReceivedOCMShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).GetReceivedOCMShare(ctx, req.(*v1beta18.GetReceivedOCMShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_GetAppProviders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta19.GetAppProvidersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).GetAppProviders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gateway.v1beta1.GatewayAPI/GetAppProviders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).GetAppProviders(ctx, req.(*v1beta19.GetAppProvidersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_ListAppProviders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta19.ListAppProvidersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).ListAppProviders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gateway.v1beta1.GatewayAPI/ListAppProviders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).ListAppProviders(ctx, req.(*v1beta19.ListAppProvidersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta12.GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gateway.v1beta1.GatewayAPI/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).GetUser(ctx, req.(*v1beta12.GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_GetUserGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta12.GetUserGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).GetUserGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gateway.v1beta1.GatewayAPI/GetUserGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).GetUserGroups(ctx, req.(*v1beta12.GetUserGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_IsInGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta12.IsInGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).IsInGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gateway.v1beta1.GatewayAPI/IsInGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).IsInGroup(ctx, req.(*v1beta12.IsInGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_FindUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta12.FindUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).FindUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gateway.v1beta1.GatewayAPI/FindUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).FindUsers(ctx, req.(*v1beta12.FindUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_ListAuthProviders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta110.ListAuthProvidersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).ListAuthProviders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gateway.v1beta1.GatewayAPI/ListAuthProviders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).ListAuthProviders(ctx, req.(*v1beta110.ListAuthProvidersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_GetHome_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta13.GetHomeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).GetHome(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gateway.v1beta1.GatewayAPI/GetHome",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).GetHome(ctx, req.(*v1beta13.GetHomeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_GenerateInviteToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta111.GenerateInviteTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).GenerateInviteToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gateway.v1beta1.GatewayAPI/GenerateInviteToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).GenerateInviteToken(ctx, req.(*v1beta111.GenerateInviteTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_ForwardInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta111.ForwardInviteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).ForwardInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gateway.v1beta1.GatewayAPI/ForwardInvite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).ForwardInvite(ctx, req.(*v1beta111.ForwardInviteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_AcceptInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta111.AcceptInviteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).AcceptInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gateway.v1beta1.GatewayAPI/AcceptInvite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).AcceptInvite(ctx, req.(*v1beta111.AcceptInviteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_GetRemoteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta111.GetRemoteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).GetRemoteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gateway.v1beta1.GatewayAPI/GetRemoteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).GetRemoteUser(ctx, req.(*v1beta111.GetRemoteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_IsProviderAllowed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta112.IsProviderAllowedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).IsProviderAllowed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gateway.v1beta1.GatewayAPI/IsProviderAllowed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).IsProviderAllowed(ctx, req.(*v1beta112.IsProviderAllowedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_GetInfoByDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta112.GetInfoByDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).GetInfoByDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gateway.v1beta1.GatewayAPI/GetInfoByDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).GetInfoByDomain(ctx, req.(*v1beta112.GetInfoByDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_ListAllProviders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta112.ListAllProvidersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).ListAllProviders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gateway.v1beta1.GatewayAPI/ListAllProviders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).ListAllProviders(ctx, req.(*v1beta112.ListAllProvidersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_CreateOCMCoreShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta113.CreateOCMCoreShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).CreateOCMCoreShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.gateway.v1beta1.GatewayAPI/CreateOCMCoreShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).CreateOCMCoreShare(ctx, req.(*v1beta113.CreateOCMCoreShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GatewayAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cs3.gateway.v1beta1.GatewayAPI",
	HandlerType: (*GatewayAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Authenticate",
			Handler:    _GatewayAPI_Authenticate_Handler,
		},
		{
			MethodName: "WhoAmI",
			Handler:    _GatewayAPI_WhoAmI_Handler,
		},
		{
			MethodName: "CreateContainer",
			Handler:    _GatewayAPI_CreateContainer_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _GatewayAPI_Delete_Handler,
		},
		{
			MethodName: "GetPath",
			Handler:    _GatewayAPI_GetPath_Handler,
		},
		{
			MethodName: "GetQuota",
			Handler:    _GatewayAPI_GetQuota_Handler,
		},
		{
			MethodName: "InitiateFileDownload",
			Handler:    _GatewayAPI_InitiateFileDownload_Handler,
		},
		{
			MethodName: "InitiateFileUpload",
			Handler:    _GatewayAPI_InitiateFileUpload_Handler,
		},
		{
			MethodName: "ListContainer",
			Handler:    _GatewayAPI_ListContainer_Handler,
		},
		{
			MethodName: "ListFileVersions",
			Handler:    _GatewayAPI_ListFileVersions_Handler,
		},
		{
			MethodName: "ListRecycle",
			Handler:    _GatewayAPI_ListRecycle_Handler,
		},
		{
			MethodName: "Move",
			Handler:    _GatewayAPI_Move_Handler,
		},
		{
			MethodName: "PurgeRecycle",
			Handler:    _GatewayAPI_PurgeRecycle_Handler,
		},
		{
			MethodName: "RestoreFileVersion",
			Handler:    _GatewayAPI_RestoreFileVersion_Handler,
		},
		{
			MethodName: "RestoreRecycleItem",
			Handler:    _GatewayAPI_RestoreRecycleItem_Handler,
		},
		{
			MethodName: "Stat",
			Handler:    _GatewayAPI_Stat_Handler,
		},
		{
			MethodName: "SetArbitraryMetadata",
			Handler:    _GatewayAPI_SetArbitraryMetadata_Handler,
		},
		{
			MethodName: "UnsetArbitraryMetadata",
			Handler:    _GatewayAPI_UnsetArbitraryMetadata_Handler,
		},
		{
			MethodName: "CreateHome",
			Handler:    _GatewayAPI_CreateHome_Handler,
		},
		{
			MethodName: "OpenFileInAppProvider",
			Handler:    _GatewayAPI_OpenFileInAppProvider_Handler,
		},
		{
			MethodName: "CreateShare",
			Handler:    _GatewayAPI_CreateShare_Handler,
		},
		{
			MethodName: "RemoveShare",
			Handler:    _GatewayAPI_RemoveShare_Handler,
		},
		{
			MethodName: "GetShare",
			Handler:    _GatewayAPI_GetShare_Handler,
		},
		{
			MethodName: "ListShares",
			Handler:    _GatewayAPI_ListShares_Handler,
		},
		{
			MethodName: "UpdateShare",
			Handler:    _GatewayAPI_UpdateShare_Handler,
		},
		{
			MethodName: "ListReceivedShares",
			Handler:    _GatewayAPI_ListReceivedShares_Handler,
		},
		{
			MethodName: "UpdateReceivedShare",
			Handler:    _GatewayAPI_UpdateReceivedShare_Handler,
		},
		{
			MethodName: "GetReceivedShare",
			Handler:    _GatewayAPI_GetReceivedShare_Handler,
		},
		{
			MethodName: "SetKey",
			Handler:    _GatewayAPI_SetKey_Handler,
		},
		{
			MethodName: "GetKey",
			Handler:    _GatewayAPI_GetKey_Handler,
		},
		{
			MethodName: "CreatePublicShare",
			Handler:    _GatewayAPI_CreatePublicShare_Handler,
		},
		{
			MethodName: "RemovePublicShare",
			Handler:    _GatewayAPI_RemovePublicShare_Handler,
		},
		{
			MethodName: "GetPublicShare",
			Handler:    _GatewayAPI_GetPublicShare_Handler,
		},
		{
			MethodName: "GetPublicShareByToken",
			Handler:    _GatewayAPI_GetPublicShareByToken_Handler,
		},
		{
			MethodName: "ListPublicShares",
			Handler:    _GatewayAPI_ListPublicShares_Handler,
		},
		{
			MethodName: "UpdatePublicShare",
			Handler:    _GatewayAPI_UpdatePublicShare_Handler,
		},
		{
			MethodName: "CreateOCMShare",
			Handler:    _GatewayAPI_CreateOCMShare_Handler,
		},
		{
			MethodName: "RemoveOCMShare",
			Handler:    _GatewayAPI_RemoveOCMShare_Handler,
		},
		{
			MethodName: "GetOCMShare",
			Handler:    _GatewayAPI_GetOCMShare_Handler,
		},
		{
			MethodName: "ListOCMShares",
			Handler:    _GatewayAPI_ListOCMShares_Handler,
		},
		{
			MethodName: "UpdateOCMShare",
			Handler:    _GatewayAPI_UpdateOCMShare_Handler,
		},
		{
			MethodName: "ListReceivedOCMShares",
			Handler:    _GatewayAPI_ListReceivedOCMShares_Handler,
		},
		{
			MethodName: "UpdateReceivedOCMShare",
			Handler:    _GatewayAPI_UpdateReceivedOCMShare_Handler,
		},
		{
			MethodName: "GetReceivedOCMShare",
			Handler:    _GatewayAPI_GetReceivedOCMShare_Handler,
		},
		{
			MethodName: "GetAppProviders",
			Handler:    _GatewayAPI_GetAppProviders_Handler,
		},
		{
			MethodName: "ListAppProviders",
			Handler:    _GatewayAPI_ListAppProviders_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _GatewayAPI_GetUser_Handler,
		},
		{
			MethodName: "GetUserGroups",
			Handler:    _GatewayAPI_GetUserGroups_Handler,
		},
		{
			MethodName: "IsInGroup",
			Handler:    _GatewayAPI_IsInGroup_Handler,
		},
		{
			MethodName: "FindUsers",
			Handler:    _GatewayAPI_FindUsers_Handler,
		},
		{
			MethodName: "ListAuthProviders",
			Handler:    _GatewayAPI_ListAuthProviders_Handler,
		},
		{
			MethodName: "GetHome",
			Handler:    _GatewayAPI_GetHome_Handler,
		},
		{
			MethodName: "GenerateInviteToken",
			Handler:    _GatewayAPI_GenerateInviteToken_Handler,
		},
		{
			MethodName: "ForwardInvite",
			Handler:    _GatewayAPI_ForwardInvite_Handler,
		},
		{
			MethodName: "AcceptInvite",
			Handler:    _GatewayAPI_AcceptInvite_Handler,
		},
		{
			MethodName: "GetRemoteUser",
			Handler:    _GatewayAPI_GetRemoteUser_Handler,
		},
		{
			MethodName: "IsProviderAllowed",
			Handler:    _GatewayAPI_IsProviderAllowed_Handler,
		},
		{
			MethodName: "GetInfoByDomain",
			Handler:    _GatewayAPI_GetInfoByDomain_Handler,
		},
		{
			MethodName: "ListAllProviders",
			Handler:    _GatewayAPI_ListAllProviders_Handler,
		},
		{
			MethodName: "CreateOCMCoreShare",
			Handler:    _GatewayAPI_CreateOCMCoreShare_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListContainerStream",
			Handler:       _GatewayAPI_ListContainerStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListRecycleStream",
			Handler:       _GatewayAPI_ListRecycleStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "cs3/gateway/v1beta1/gateway_api.proto",
}
