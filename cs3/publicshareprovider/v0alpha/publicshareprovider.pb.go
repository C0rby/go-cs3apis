// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cs3/publicshareprovider/v0alpha/publicshareprovider.proto

package publicshareproviderv0alphapb

import (
	context "context"
	fmt "fmt"
	rpc "github.com/cs3org/go-cs3apis/cs3/rpc"
	v0alpha "github.com/cs3org/go-cs3apis/cs3/storageprovider/v0alpha"
	types "github.com/cs3org/go-cs3apis/cs3/types"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type UpdatePublicShareRequest_Update_Type int32

const (
	UpdatePublicShareRequest_Update_UPDATE_PUBLIC_SHARE_REQUEST_UPDATE_TYPE_INVALID     UpdatePublicShareRequest_Update_Type = 0
	UpdatePublicShareRequest_Update_UPDATE_PUBLIC_SHARE_REQUEST_UPDATE_TYPE_PERMISSIONS UpdatePublicShareRequest_Update_Type = 1
	UpdatePublicShareRequest_Update_UPDATE_PUBLIC_SHARE_REQUEST_UPDATE_TYPE_PASSWORD    UpdatePublicShareRequest_Update_Type = 2
	UpdatePublicShareRequest_Update_UPDATE_PUBLIC_SHARE_REQUEST_UPDATE_TYPE_EXPIRATION  UpdatePublicShareRequest_Update_Type = 3
)

var UpdatePublicShareRequest_Update_Type_name = map[int32]string{
	0: "UPDATE_PUBLIC_SHARE_REQUEST_UPDATE_TYPE_INVALID",
	1: "UPDATE_PUBLIC_SHARE_REQUEST_UPDATE_TYPE_PERMISSIONS",
	2: "UPDATE_PUBLIC_SHARE_REQUEST_UPDATE_TYPE_PASSWORD",
	3: "UPDATE_PUBLIC_SHARE_REQUEST_UPDATE_TYPE_EXPIRATION",
}

var UpdatePublicShareRequest_Update_Type_value = map[string]int32{
	"UPDATE_PUBLIC_SHARE_REQUEST_UPDATE_TYPE_INVALID":     0,
	"UPDATE_PUBLIC_SHARE_REQUEST_UPDATE_TYPE_PERMISSIONS": 1,
	"UPDATE_PUBLIC_SHARE_REQUEST_UPDATE_TYPE_PASSWORD":    2,
	"UPDATE_PUBLIC_SHARE_REQUEST_UPDATE_TYPE_EXPIRATION":  3,
}

func (x UpdatePublicShareRequest_Update_Type) String() string {
	return proto.EnumName(UpdatePublicShareRequest_Update_Type_name, int32(x))
}

func (UpdatePublicShareRequest_Update_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_59381e4fae913548, []int{3, 0, 0}
}

type ListPublicSharesRequest_Filter_Type int32

const (
	ListPublicSharesRequest_Filter_LIST_PUBLIC_SHARES_REQUEST_FILTER_TYPE_INVALID     ListPublicSharesRequest_Filter_Type = 0
	ListPublicSharesRequest_Filter_LIST_PUBLIC_SHARES_REQUEST_FILTER_TYPE_RESOURCE_ID ListPublicSharesRequest_Filter_Type = 1
	ListPublicSharesRequest_Filter_LIST_PUBLIC_SHARES_REQUEST_FILTER_TYPE_OWNER       ListPublicSharesRequest_Filter_Type = 2
	ListPublicSharesRequest_Filter_LIST_PUBLIC_SHARES_REQUEST_FILTER_TYPE_CREATOR     ListPublicSharesRequest_Filter_Type = 3
)

var ListPublicSharesRequest_Filter_Type_name = map[int32]string{
	0: "LIST_PUBLIC_SHARES_REQUEST_FILTER_TYPE_INVALID",
	1: "LIST_PUBLIC_SHARES_REQUEST_FILTER_TYPE_RESOURCE_ID",
	2: "LIST_PUBLIC_SHARES_REQUEST_FILTER_TYPE_OWNER",
	3: "LIST_PUBLIC_SHARES_REQUEST_FILTER_TYPE_CREATOR",
}

var ListPublicSharesRequest_Filter_Type_value = map[string]int32{
	"LIST_PUBLIC_SHARES_REQUEST_FILTER_TYPE_INVALID":     0,
	"LIST_PUBLIC_SHARES_REQUEST_FILTER_TYPE_RESOURCE_ID": 1,
	"LIST_PUBLIC_SHARES_REQUEST_FILTER_TYPE_OWNER":       2,
	"LIST_PUBLIC_SHARES_REQUEST_FILTER_TYPE_CREATOR":     3,
}

func (x ListPublicSharesRequest_Filter_Type) String() string {
	return proto.EnumName(ListPublicSharesRequest_Filter_Type_name, int32(x))
}

func (ListPublicSharesRequest_Filter_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_59381e4fae913548, []int{5, 0, 0}
}

type CreatePublicShareRequest struct {
	// OPTIONAL.
	// Opaque information.
	Opaque *types.Opaque `protobuf:"bytes,1,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// REQUIRED.
	// The unique identifier for the shared storage resource.
	ResourceId *v0alpha.ResourceId `protobuf:"bytes,2,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	// REQUIRED.
	// The restrictions to apply to the share.
	Grant                *Grant   `protobuf:"bytes,3,opt,name=grant,proto3" json:"grant,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreatePublicShareRequest) Reset()         { *m = CreatePublicShareRequest{} }
func (m *CreatePublicShareRequest) String() string { return proto.CompactTextString(m) }
func (*CreatePublicShareRequest) ProtoMessage()    {}
func (*CreatePublicShareRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_59381e4fae913548, []int{0}
}

func (m *CreatePublicShareRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreatePublicShareRequest.Unmarshal(m, b)
}
func (m *CreatePublicShareRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreatePublicShareRequest.Marshal(b, m, deterministic)
}
func (m *CreatePublicShareRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreatePublicShareRequest.Merge(m, src)
}
func (m *CreatePublicShareRequest) XXX_Size() int {
	return xxx_messageInfo_CreatePublicShareRequest.Size(m)
}
func (m *CreatePublicShareRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreatePublicShareRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreatePublicShareRequest proto.InternalMessageInfo

func (m *CreatePublicShareRequest) GetOpaque() *types.Opaque {
	if m != nil {
		return m.Opaque
	}
	return nil
}

func (m *CreatePublicShareRequest) GetResourceId() *v0alpha.ResourceId {
	if m != nil {
		return m.ResourceId
	}
	return nil
}

func (m *CreatePublicShareRequest) GetGrant() *Grant {
	if m != nil {
		return m.Grant
	}
	return nil
}

// Defines the restrictions for the public share;
type Grant struct {
	// REQUIRED.
	// The permissions for the share.
	Permissions *PublicSharePermissions `protobuf:"bytes,1,opt,name=permissions,proto3" json:"permissions,omitempty"`
	// OPTIONAL.
	// A password to protect the access to the public share.
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	// OPTIONAL.
	// An expiration date to protect the access to the public share.
	Expiration           *types.Timestamp `protobuf:"bytes,3,opt,name=expiration,proto3" json:"expiration,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *Grant) Reset()         { *m = Grant{} }
func (m *Grant) String() string { return proto.CompactTextString(m) }
func (*Grant) ProtoMessage()    {}
func (*Grant) Descriptor() ([]byte, []int) {
	return fileDescriptor_59381e4fae913548, []int{1}
}

func (m *Grant) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Grant.Unmarshal(m, b)
}
func (m *Grant) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Grant.Marshal(b, m, deterministic)
}
func (m *Grant) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Grant.Merge(m, src)
}
func (m *Grant) XXX_Size() int {
	return xxx_messageInfo_Grant.Size(m)
}
func (m *Grant) XXX_DiscardUnknown() {
	xxx_messageInfo_Grant.DiscardUnknown(m)
}

var xxx_messageInfo_Grant proto.InternalMessageInfo

func (m *Grant) GetPermissions() *PublicSharePermissions {
	if m != nil {
		return m.Permissions
	}
	return nil
}

func (m *Grant) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *Grant) GetExpiration() *types.Timestamp {
	if m != nil {
		return m.Expiration
	}
	return nil
}

type CreatePublicShareResponse struct {
	// REQUIRED.
	// The response status.
	Status *rpc.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// OPTIONAL.
	// Opaque information.
	Opaque *types.Opaque `protobuf:"bytes,2,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// REQUIRED.
	// The created share.
	Share                *PublicShare `protobuf:"bytes,3,opt,name=share,proto3" json:"share,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *CreatePublicShareResponse) Reset()         { *m = CreatePublicShareResponse{} }
func (m *CreatePublicShareResponse) String() string { return proto.CompactTextString(m) }
func (*CreatePublicShareResponse) ProtoMessage()    {}
func (*CreatePublicShareResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_59381e4fae913548, []int{2}
}

func (m *CreatePublicShareResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreatePublicShareResponse.Unmarshal(m, b)
}
func (m *CreatePublicShareResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreatePublicShareResponse.Marshal(b, m, deterministic)
}
func (m *CreatePublicShareResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreatePublicShareResponse.Merge(m, src)
}
func (m *CreatePublicShareResponse) XXX_Size() int {
	return xxx_messageInfo_CreatePublicShareResponse.Size(m)
}
func (m *CreatePublicShareResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreatePublicShareResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreatePublicShareResponse proto.InternalMessageInfo

func (m *CreatePublicShareResponse) GetStatus() *rpc.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *CreatePublicShareResponse) GetOpaque() *types.Opaque {
	if m != nil {
		return m.Opaque
	}
	return nil
}

func (m *CreatePublicShareResponse) GetShare() *PublicShare {
	if m != nil {
		return m.Share
	}
	return nil
}

type UpdatePublicShareRequest struct {
	// OPTIONAL.
	// Opaque information.
	Opaque *types.Opaque `protobuf:"bytes,1,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// REQUIRED.
	// The reference to the public share.
	Ref                  *PublicShareReference `protobuf:"bytes,2,opt,name=ref,proto3" json:"ref,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *UpdatePublicShareRequest) Reset()         { *m = UpdatePublicShareRequest{} }
func (m *UpdatePublicShareRequest) String() string { return proto.CompactTextString(m) }
func (*UpdatePublicShareRequest) ProtoMessage()    {}
func (*UpdatePublicShareRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_59381e4fae913548, []int{3}
}

func (m *UpdatePublicShareRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdatePublicShareRequest.Unmarshal(m, b)
}
func (m *UpdatePublicShareRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdatePublicShareRequest.Marshal(b, m, deterministic)
}
func (m *UpdatePublicShareRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdatePublicShareRequest.Merge(m, src)
}
func (m *UpdatePublicShareRequest) XXX_Size() int {
	return xxx_messageInfo_UpdatePublicShareRequest.Size(m)
}
func (m *UpdatePublicShareRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdatePublicShareRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdatePublicShareRequest proto.InternalMessageInfo

func (m *UpdatePublicShareRequest) GetOpaque() *types.Opaque {
	if m != nil {
		return m.Opaque
	}
	return nil
}

func (m *UpdatePublicShareRequest) GetRef() *PublicShareReference {
	if m != nil {
		return m.Ref
	}
	return nil
}

type UpdatePublicShareRequest_Update struct {
	// REQUIRED.
	// Defines the field to update
	Type UpdatePublicShareRequest_Update_Type `protobuf:"varint,3,opt,name=type,proto3,enum=cs3.publicshareproviderv0alpha.UpdatePublicShareRequest_Update_Type" json:"type,omitempty"`
	// REQUIRED.
	// Contains the field that will be updated.
	Grant                *Grant   `protobuf:"bytes,4,opt,name=grant,proto3" json:"grant,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdatePublicShareRequest_Update) Reset()         { *m = UpdatePublicShareRequest_Update{} }
func (m *UpdatePublicShareRequest_Update) String() string { return proto.CompactTextString(m) }
func (*UpdatePublicShareRequest_Update) ProtoMessage()    {}
func (*UpdatePublicShareRequest_Update) Descriptor() ([]byte, []int) {
	return fileDescriptor_59381e4fae913548, []int{3, 0}
}

func (m *UpdatePublicShareRequest_Update) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdatePublicShareRequest_Update.Unmarshal(m, b)
}
func (m *UpdatePublicShareRequest_Update) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdatePublicShareRequest_Update.Marshal(b, m, deterministic)
}
func (m *UpdatePublicShareRequest_Update) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdatePublicShareRequest_Update.Merge(m, src)
}
func (m *UpdatePublicShareRequest_Update) XXX_Size() int {
	return xxx_messageInfo_UpdatePublicShareRequest_Update.Size(m)
}
func (m *UpdatePublicShareRequest_Update) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdatePublicShareRequest_Update.DiscardUnknown(m)
}

var xxx_messageInfo_UpdatePublicShareRequest_Update proto.InternalMessageInfo

func (m *UpdatePublicShareRequest_Update) GetType() UpdatePublicShareRequest_Update_Type {
	if m != nil {
		return m.Type
	}
	return UpdatePublicShareRequest_Update_UPDATE_PUBLIC_SHARE_REQUEST_UPDATE_TYPE_INVALID
}

func (m *UpdatePublicShareRequest_Update) GetGrant() *Grant {
	if m != nil {
		return m.Grant
	}
	return nil
}

type UpdatePublicShareResponse struct {
	// REQUIRED.
	// The response status.
	Status *rpc.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// OPTIONAL.
	// Opaque information.
	Opaque *types.Opaque `protobuf:"bytes,2,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// REQUIRED.
	// The updated public share.
	Share                *PublicShare `protobuf:"bytes,3,opt,name=share,proto3" json:"share,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *UpdatePublicShareResponse) Reset()         { *m = UpdatePublicShareResponse{} }
func (m *UpdatePublicShareResponse) String() string { return proto.CompactTextString(m) }
func (*UpdatePublicShareResponse) ProtoMessage()    {}
func (*UpdatePublicShareResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_59381e4fae913548, []int{4}
}

func (m *UpdatePublicShareResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdatePublicShareResponse.Unmarshal(m, b)
}
func (m *UpdatePublicShareResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdatePublicShareResponse.Marshal(b, m, deterministic)
}
func (m *UpdatePublicShareResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdatePublicShareResponse.Merge(m, src)
}
func (m *UpdatePublicShareResponse) XXX_Size() int {
	return xxx_messageInfo_UpdatePublicShareResponse.Size(m)
}
func (m *UpdatePublicShareResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdatePublicShareResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdatePublicShareResponse proto.InternalMessageInfo

func (m *UpdatePublicShareResponse) GetStatus() *rpc.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *UpdatePublicShareResponse) GetOpaque() *types.Opaque {
	if m != nil {
		return m.Opaque
	}
	return nil
}

func (m *UpdatePublicShareResponse) GetShare() *PublicShare {
	if m != nil {
		return m.Share
	}
	return nil
}

type ListPublicSharesRequest struct {
	// OPTIONAL.
	// Opaque information.
	Opaque *types.Opaque `protobuf:"bytes,1,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// OPTIONAL.
	// The list of filters to apply if any.
	Filters              []*ListPublicSharesRequest_Filter `protobuf:"bytes,2,rep,name=filters,proto3" json:"filters,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *ListPublicSharesRequest) Reset()         { *m = ListPublicSharesRequest{} }
func (m *ListPublicSharesRequest) String() string { return proto.CompactTextString(m) }
func (*ListPublicSharesRequest) ProtoMessage()    {}
func (*ListPublicSharesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_59381e4fae913548, []int{5}
}

func (m *ListPublicSharesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListPublicSharesRequest.Unmarshal(m, b)
}
func (m *ListPublicSharesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListPublicSharesRequest.Marshal(b, m, deterministic)
}
func (m *ListPublicSharesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListPublicSharesRequest.Merge(m, src)
}
func (m *ListPublicSharesRequest) XXX_Size() int {
	return xxx_messageInfo_ListPublicSharesRequest.Size(m)
}
func (m *ListPublicSharesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListPublicSharesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListPublicSharesRequest proto.InternalMessageInfo

func (m *ListPublicSharesRequest) GetOpaque() *types.Opaque {
	if m != nil {
		return m.Opaque
	}
	return nil
}

func (m *ListPublicSharesRequest) GetFilters() []*ListPublicSharesRequest_Filter {
	if m != nil {
		return m.Filters
	}
	return nil
}

// represents a filter to apply to the request.
type ListPublicSharesRequest_Filter struct {
	Type ListPublicSharesRequest_Filter_Type `protobuf:"varint,2,opt,name=type,proto3,enum=cs3.publicshareproviderv0alpha.ListPublicSharesRequest_Filter_Type" json:"type,omitempty"`
	// Types that are valid to be assigned to Term:
	//	*ListPublicSharesRequest_Filter_ResourceId
	//	*ListPublicSharesRequest_Filter_Owner
	//	*ListPublicSharesRequest_Filter_Creator
	Term                 isListPublicSharesRequest_Filter_Term `protobuf_oneof:"term"`
	XXX_NoUnkeyedLiteral struct{}                              `json:"-"`
	XXX_unrecognized     []byte                                `json:"-"`
	XXX_sizecache        int32                                 `json:"-"`
}

func (m *ListPublicSharesRequest_Filter) Reset()         { *m = ListPublicSharesRequest_Filter{} }
func (m *ListPublicSharesRequest_Filter) String() string { return proto.CompactTextString(m) }
func (*ListPublicSharesRequest_Filter) ProtoMessage()    {}
func (*ListPublicSharesRequest_Filter) Descriptor() ([]byte, []int) {
	return fileDescriptor_59381e4fae913548, []int{5, 0}
}

func (m *ListPublicSharesRequest_Filter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListPublicSharesRequest_Filter.Unmarshal(m, b)
}
func (m *ListPublicSharesRequest_Filter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListPublicSharesRequest_Filter.Marshal(b, m, deterministic)
}
func (m *ListPublicSharesRequest_Filter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListPublicSharesRequest_Filter.Merge(m, src)
}
func (m *ListPublicSharesRequest_Filter) XXX_Size() int {
	return xxx_messageInfo_ListPublicSharesRequest_Filter.Size(m)
}
func (m *ListPublicSharesRequest_Filter) XXX_DiscardUnknown() {
	xxx_messageInfo_ListPublicSharesRequest_Filter.DiscardUnknown(m)
}

var xxx_messageInfo_ListPublicSharesRequest_Filter proto.InternalMessageInfo

func (m *ListPublicSharesRequest_Filter) GetType() ListPublicSharesRequest_Filter_Type {
	if m != nil {
		return m.Type
	}
	return ListPublicSharesRequest_Filter_LIST_PUBLIC_SHARES_REQUEST_FILTER_TYPE_INVALID
}

type isListPublicSharesRequest_Filter_Term interface {
	isListPublicSharesRequest_Filter_Term()
}

type ListPublicSharesRequest_Filter_ResourceId struct {
	ResourceId *v0alpha.ResourceId `protobuf:"bytes,3,opt,name=resource_id,json=resourceId,proto3,oneof"`
}

type ListPublicSharesRequest_Filter_Owner struct {
	Owner *types.UserId `protobuf:"bytes,4,opt,name=owner,proto3,oneof"`
}

type ListPublicSharesRequest_Filter_Creator struct {
	Creator *types.UserId `protobuf:"bytes,5,opt,name=creator,proto3,oneof"`
}

func (*ListPublicSharesRequest_Filter_ResourceId) isListPublicSharesRequest_Filter_Term() {}

func (*ListPublicSharesRequest_Filter_Owner) isListPublicSharesRequest_Filter_Term() {}

func (*ListPublicSharesRequest_Filter_Creator) isListPublicSharesRequest_Filter_Term() {}

func (m *ListPublicSharesRequest_Filter) GetTerm() isListPublicSharesRequest_Filter_Term {
	if m != nil {
		return m.Term
	}
	return nil
}

func (m *ListPublicSharesRequest_Filter) GetResourceId() *v0alpha.ResourceId {
	if x, ok := m.GetTerm().(*ListPublicSharesRequest_Filter_ResourceId); ok {
		return x.ResourceId
	}
	return nil
}

func (m *ListPublicSharesRequest_Filter) GetOwner() *types.UserId {
	if x, ok := m.GetTerm().(*ListPublicSharesRequest_Filter_Owner); ok {
		return x.Owner
	}
	return nil
}

func (m *ListPublicSharesRequest_Filter) GetCreator() *types.UserId {
	if x, ok := m.GetTerm().(*ListPublicSharesRequest_Filter_Creator); ok {
		return x.Creator
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ListPublicSharesRequest_Filter) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ListPublicSharesRequest_Filter_ResourceId)(nil),
		(*ListPublicSharesRequest_Filter_Owner)(nil),
		(*ListPublicSharesRequest_Filter_Creator)(nil),
	}
}

type ListPublicSharesResponse struct {
	// REQUIRED.
	// The response status.
	Status *rpc.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// OPTIONAL.
	// Opaque information.
	Opaque *types.Opaque `protobuf:"bytes,2,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// REQUIRED.
	// The list of shares.
	Share                []*PublicShare `protobuf:"bytes,3,rep,name=share,proto3" json:"share,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ListPublicSharesResponse) Reset()         { *m = ListPublicSharesResponse{} }
func (m *ListPublicSharesResponse) String() string { return proto.CompactTextString(m) }
func (*ListPublicSharesResponse) ProtoMessage()    {}
func (*ListPublicSharesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_59381e4fae913548, []int{6}
}

func (m *ListPublicSharesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListPublicSharesResponse.Unmarshal(m, b)
}
func (m *ListPublicSharesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListPublicSharesResponse.Marshal(b, m, deterministic)
}
func (m *ListPublicSharesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListPublicSharesResponse.Merge(m, src)
}
func (m *ListPublicSharesResponse) XXX_Size() int {
	return xxx_messageInfo_ListPublicSharesResponse.Size(m)
}
func (m *ListPublicSharesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListPublicSharesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListPublicSharesResponse proto.InternalMessageInfo

func (m *ListPublicSharesResponse) GetStatus() *rpc.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *ListPublicSharesResponse) GetOpaque() *types.Opaque {
	if m != nil {
		return m.Opaque
	}
	return nil
}

func (m *ListPublicSharesResponse) GetShare() []*PublicShare {
	if m != nil {
		return m.Share
	}
	return nil
}

type RemovePublicShareRequest struct {
	// OPTIONAL.
	// Opaque information.
	Opaque *types.Opaque `protobuf:"bytes,1,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// REQUIRED.
	// The reference to which the action should be performed.
	Ref                  *PublicShareReference `protobuf:"bytes,2,opt,name=ref,proto3" json:"ref,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *RemovePublicShareRequest) Reset()         { *m = RemovePublicShareRequest{} }
func (m *RemovePublicShareRequest) String() string { return proto.CompactTextString(m) }
func (*RemovePublicShareRequest) ProtoMessage()    {}
func (*RemovePublicShareRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_59381e4fae913548, []int{7}
}

func (m *RemovePublicShareRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RemovePublicShareRequest.Unmarshal(m, b)
}
func (m *RemovePublicShareRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RemovePublicShareRequest.Marshal(b, m, deterministic)
}
func (m *RemovePublicShareRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemovePublicShareRequest.Merge(m, src)
}
func (m *RemovePublicShareRequest) XXX_Size() int {
	return xxx_messageInfo_RemovePublicShareRequest.Size(m)
}
func (m *RemovePublicShareRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RemovePublicShareRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RemovePublicShareRequest proto.InternalMessageInfo

func (m *RemovePublicShareRequest) GetOpaque() *types.Opaque {
	if m != nil {
		return m.Opaque
	}
	return nil
}

func (m *RemovePublicShareRequest) GetRef() *PublicShareReference {
	if m != nil {
		return m.Ref
	}
	return nil
}

type RemovePublicShareResponse struct {
	// REQUIRED.
	// The response status.
	Status *rpc.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// OPTIONAL.
	// Opaque information.
	Opaque               *types.Opaque `protobuf:"bytes,2,opt,name=opaque,proto3" json:"opaque,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *RemovePublicShareResponse) Reset()         { *m = RemovePublicShareResponse{} }
func (m *RemovePublicShareResponse) String() string { return proto.CompactTextString(m) }
func (*RemovePublicShareResponse) ProtoMessage()    {}
func (*RemovePublicShareResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_59381e4fae913548, []int{8}
}

func (m *RemovePublicShareResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RemovePublicShareResponse.Unmarshal(m, b)
}
func (m *RemovePublicShareResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RemovePublicShareResponse.Marshal(b, m, deterministic)
}
func (m *RemovePublicShareResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemovePublicShareResponse.Merge(m, src)
}
func (m *RemovePublicShareResponse) XXX_Size() int {
	return xxx_messageInfo_RemovePublicShareResponse.Size(m)
}
func (m *RemovePublicShareResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RemovePublicShareResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RemovePublicShareResponse proto.InternalMessageInfo

func (m *RemovePublicShareResponse) GetStatus() *rpc.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *RemovePublicShareResponse) GetOpaque() *types.Opaque {
	if m != nil {
		return m.Opaque
	}
	return nil
}

type GetPublicShareRequest struct {
	// OPTIONAL.
	// Opaque information.
	Opaque *types.Opaque `protobuf:"bytes,1,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// REQUIRED.
	// The reference to which the action should be performed.
	Ref                  *PublicShareReference `protobuf:"bytes,2,opt,name=ref,proto3" json:"ref,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *GetPublicShareRequest) Reset()         { *m = GetPublicShareRequest{} }
func (m *GetPublicShareRequest) String() string { return proto.CompactTextString(m) }
func (*GetPublicShareRequest) ProtoMessage()    {}
func (*GetPublicShareRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_59381e4fae913548, []int{9}
}

func (m *GetPublicShareRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetPublicShareRequest.Unmarshal(m, b)
}
func (m *GetPublicShareRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetPublicShareRequest.Marshal(b, m, deterministic)
}
func (m *GetPublicShareRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPublicShareRequest.Merge(m, src)
}
func (m *GetPublicShareRequest) XXX_Size() int {
	return xxx_messageInfo_GetPublicShareRequest.Size(m)
}
func (m *GetPublicShareRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPublicShareRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetPublicShareRequest proto.InternalMessageInfo

func (m *GetPublicShareRequest) GetOpaque() *types.Opaque {
	if m != nil {
		return m.Opaque
	}
	return nil
}

func (m *GetPublicShareRequest) GetRef() *PublicShareReference {
	if m != nil {
		return m.Ref
	}
	return nil
}

type GetPublicShareResponse struct {
	// REQUIRED.
	// The response status.
	Status *rpc.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// OPTIONAL.
	// Opaque information.
	Opaque *types.Opaque `protobuf:"bytes,2,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// REQUIRED.
	// The share.
	Share                *PublicShare `protobuf:"bytes,3,opt,name=share,proto3" json:"share,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *GetPublicShareResponse) Reset()         { *m = GetPublicShareResponse{} }
func (m *GetPublicShareResponse) String() string { return proto.CompactTextString(m) }
func (*GetPublicShareResponse) ProtoMessage()    {}
func (*GetPublicShareResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_59381e4fae913548, []int{10}
}

func (m *GetPublicShareResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetPublicShareResponse.Unmarshal(m, b)
}
func (m *GetPublicShareResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetPublicShareResponse.Marshal(b, m, deterministic)
}
func (m *GetPublicShareResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPublicShareResponse.Merge(m, src)
}
func (m *GetPublicShareResponse) XXX_Size() int {
	return xxx_messageInfo_GetPublicShareResponse.Size(m)
}
func (m *GetPublicShareResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPublicShareResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetPublicShareResponse proto.InternalMessageInfo

func (m *GetPublicShareResponse) GetStatus() *rpc.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *GetPublicShareResponse) GetOpaque() *types.Opaque {
	if m != nil {
		return m.Opaque
	}
	return nil
}

func (m *GetPublicShareResponse) GetShare() *PublicShare {
	if m != nil {
		return m.Share
	}
	return nil
}

type GetPublicShareByTokenRequest struct {
	// OPTIONAL.
	// Opaque information.
	Opaque *types.Opaque `protobuf:"bytes,1,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// REQUIRED.
	// The unlisted token to identify the public share.
	Token                string   `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetPublicShareByTokenRequest) Reset()         { *m = GetPublicShareByTokenRequest{} }
func (m *GetPublicShareByTokenRequest) String() string { return proto.CompactTextString(m) }
func (*GetPublicShareByTokenRequest) ProtoMessage()    {}
func (*GetPublicShareByTokenRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_59381e4fae913548, []int{11}
}

func (m *GetPublicShareByTokenRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetPublicShareByTokenRequest.Unmarshal(m, b)
}
func (m *GetPublicShareByTokenRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetPublicShareByTokenRequest.Marshal(b, m, deterministic)
}
func (m *GetPublicShareByTokenRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPublicShareByTokenRequest.Merge(m, src)
}
func (m *GetPublicShareByTokenRequest) XXX_Size() int {
	return xxx_messageInfo_GetPublicShareByTokenRequest.Size(m)
}
func (m *GetPublicShareByTokenRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPublicShareByTokenRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetPublicShareByTokenRequest proto.InternalMessageInfo

func (m *GetPublicShareByTokenRequest) GetOpaque() *types.Opaque {
	if m != nil {
		return m.Opaque
	}
	return nil
}

func (m *GetPublicShareByTokenRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type GetPublicShareByTokenResponse struct {
	// REQUIRED.
	// The response status.
	Status *rpc.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// OPTIONAL.
	// Opaque information.
	Opaque *types.Opaque `protobuf:"bytes,2,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// REQUIRED.
	// The share.
	Share                *PublicShare `protobuf:"bytes,3,opt,name=share,proto3" json:"share,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *GetPublicShareByTokenResponse) Reset()         { *m = GetPublicShareByTokenResponse{} }
func (m *GetPublicShareByTokenResponse) String() string { return proto.CompactTextString(m) }
func (*GetPublicShareByTokenResponse) ProtoMessage()    {}
func (*GetPublicShareByTokenResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_59381e4fae913548, []int{12}
}

func (m *GetPublicShareByTokenResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetPublicShareByTokenResponse.Unmarshal(m, b)
}
func (m *GetPublicShareByTokenResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetPublicShareByTokenResponse.Marshal(b, m, deterministic)
}
func (m *GetPublicShareByTokenResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPublicShareByTokenResponse.Merge(m, src)
}
func (m *GetPublicShareByTokenResponse) XXX_Size() int {
	return xxx_messageInfo_GetPublicShareByTokenResponse.Size(m)
}
func (m *GetPublicShareByTokenResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPublicShareByTokenResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetPublicShareByTokenResponse proto.InternalMessageInfo

func (m *GetPublicShareByTokenResponse) GetStatus() *rpc.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *GetPublicShareByTokenResponse) GetOpaque() *types.Opaque {
	if m != nil {
		return m.Opaque
	}
	return nil
}

func (m *GetPublicShareByTokenResponse) GetShare() *PublicShare {
	if m != nil {
		return m.Share
	}
	return nil
}

func init() {
	proto.RegisterEnum("cs3.publicshareproviderv0alpha.UpdatePublicShareRequest_Update_Type", UpdatePublicShareRequest_Update_Type_name, UpdatePublicShareRequest_Update_Type_value)
	proto.RegisterEnum("cs3.publicshareproviderv0alpha.ListPublicSharesRequest_Filter_Type", ListPublicSharesRequest_Filter_Type_name, ListPublicSharesRequest_Filter_Type_value)
	proto.RegisterType((*CreatePublicShareRequest)(nil), "cs3.publicshareproviderv0alpha.CreatePublicShareRequest")
	proto.RegisterType((*Grant)(nil), "cs3.publicshareproviderv0alpha.Grant")
	proto.RegisterType((*CreatePublicShareResponse)(nil), "cs3.publicshareproviderv0alpha.CreatePublicShareResponse")
	proto.RegisterType((*UpdatePublicShareRequest)(nil), "cs3.publicshareproviderv0alpha.UpdatePublicShareRequest")
	proto.RegisterType((*UpdatePublicShareRequest_Update)(nil), "cs3.publicshareproviderv0alpha.UpdatePublicShareRequest.Update")
	proto.RegisterType((*UpdatePublicShareResponse)(nil), "cs3.publicshareproviderv0alpha.UpdatePublicShareResponse")
	proto.RegisterType((*ListPublicSharesRequest)(nil), "cs3.publicshareproviderv0alpha.ListPublicSharesRequest")
	proto.RegisterType((*ListPublicSharesRequest_Filter)(nil), "cs3.publicshareproviderv0alpha.ListPublicSharesRequest.Filter")
	proto.RegisterType((*ListPublicSharesResponse)(nil), "cs3.publicshareproviderv0alpha.ListPublicSharesResponse")
	proto.RegisterType((*RemovePublicShareRequest)(nil), "cs3.publicshareproviderv0alpha.RemovePublicShareRequest")
	proto.RegisterType((*RemovePublicShareResponse)(nil), "cs3.publicshareproviderv0alpha.RemovePublicShareResponse")
	proto.RegisterType((*GetPublicShareRequest)(nil), "cs3.publicshareproviderv0alpha.GetPublicShareRequest")
	proto.RegisterType((*GetPublicShareResponse)(nil), "cs3.publicshareproviderv0alpha.GetPublicShareResponse")
	proto.RegisterType((*GetPublicShareByTokenRequest)(nil), "cs3.publicshareproviderv0alpha.GetPublicShareByTokenRequest")
	proto.RegisterType((*GetPublicShareByTokenResponse)(nil), "cs3.publicshareproviderv0alpha.GetPublicShareByTokenResponse")
}

func init() {
	proto.RegisterFile("cs3/publicshareprovider/v0alpha/publicshareprovider.proto", fileDescriptor_59381e4fae913548)
}

var fileDescriptor_59381e4fae913548 = []byte{
	// 988 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x57, 0xdd, 0x8e, 0xdb, 0x44,
	0x14, 0xae, 0xf3, 0xb7, 0x70, 0x56, 0x2a, 0xe9, 0x68, 0x0b, 0xae, 0x55, 0xaa, 0xca, 0x12, 0xd0,
	0xaa, 0xe0, 0xac, 0x92, 0x65, 0xdb, 0x8a, 0x1f, 0x29, 0x3f, 0xde, 0xad, 0xa5, 0xb0, 0x31, 0x63,
	0xa7, 0x1b, 0x10, 0x52, 0xe4, 0xf5, 0xce, 0xb6, 0x16, 0x9b, 0xd8, 0x9d, 0x71, 0xb6, 0xec, 0x15,
	0x37, 0x20, 0xa1, 0x4a, 0xdc, 0xf5, 0x09, 0xb8, 0xec, 0x0d, 0x02, 0x24, 0x1e, 0x02, 0x5e, 0x80,
	0x1b, 0x6e, 0xb8, 0xe3, 0x2d, 0x90, 0xc7, 0x93, 0xad, 0xb3, 0x89, 0x71, 0x92, 0x15, 0x28, 0x37,
	0x51, 0x3c, 0xe7, 0x7c, 0x67, 0xbe, 0x73, 0xe6, 0x3b, 0xe3, 0x63, 0xb8, 0xef, 0xb2, 0x5a, 0x25,
	0x18, 0x1d, 0x1c, 0x7b, 0x2e, 0x7b, 0xec, 0x50, 0x12, 0x50, 0xff, 0xc4, 0x3b, 0x24, 0xb4, 0x72,
	0xb2, 0xe9, 0x1c, 0x07, 0x8f, 0x9d, 0x59, 0x36, 0x2d, 0xa0, 0x7e, 0xe8, 0xa3, 0x1b, 0x2e, 0xab,
	0x69, 0x33, 0xcc, 0x02, 0xa9, 0x54, 0xb2, 0x42, 0x53, 0xc2, 0xfc, 0x11, 0x75, 0x09, 0x8b, 0x03,
	0x2a, 0x1b, 0x11, 0x80, 0x06, 0x6e, 0x85, 0x85, 0x4e, 0x38, 0x1a, 0xaf, 0xde, 0x89, 0x56, 0x59,
	0xe8, 0x53, 0xe7, 0x51, 0x76, 0x88, 0xab, 0x91, 0x73, 0x78, 0x1a, 0x10, 0x16, 0xff, 0xc6, 0xcb,
	0xea, 0xef, 0x12, 0xc8, 0x4d, 0x4a, 0x9c, 0x90, 0x98, 0x9c, 0x8f, 0x15, 0xf1, 0xc1, 0xe4, 0xc9,
	0x88, 0xb0, 0x10, 0xdd, 0x86, 0x92, 0x1f, 0x38, 0x4f, 0x46, 0x44, 0x96, 0x6e, 0x4a, 0xb7, 0xd6,
	0xab, 0x57, 0xb4, 0x28, 0xb1, 0x18, 0xde, 0xe1, 0x06, 0x2c, 0x1c, 0xd0, 0x2e, 0xac, 0x8f, 0x77,
	0xec, 0x7b, 0x87, 0x72, 0x8e, 0xfb, 0xbf, 0xcd, 0xfd, 0xcf, 0x31, 0x14, 0x04, 0x35, 0x2c, 0xdc,
	0x8d, 0x43, 0x0c, 0xf4, 0xec, 0x3f, 0xfa, 0x00, 0x8a, 0x8f, 0xa8, 0x33, 0x0c, 0xe5, 0x3c, 0x0f,
	0xf1, 0x96, 0xf6, 0xef, 0xb5, 0xd4, 0x76, 0x23, 0x67, 0x1c, 0x63, 0xd4, 0x5f, 0x24, 0x28, 0xf2,
	0x05, 0xd4, 0x83, 0xf5, 0x80, 0xd0, 0x81, 0xc7, 0x98, 0xe7, 0x0f, 0x99, 0xe0, 0xbf, 0x9d, 0x15,
	0x2c, 0x51, 0x03, 0xf3, 0x25, 0x1a, 0x27, 0x43, 0x21, 0x05, 0x5e, 0x09, 0x1c, 0xc6, 0x9e, 0xfa,
	0x34, 0x4e, 0xf3, 0x55, 0x7c, 0xf6, 0x8c, 0xb6, 0x00, 0xc8, 0x57, 0x81, 0x47, 0x9d, 0xd0, 0xf3,
	0x87, 0x22, 0x83, 0x8d, 0x44, 0xd1, 0x6c, 0x6f, 0x40, 0x58, 0xe8, 0x0c, 0x02, 0x9c, 0xf0, 0x53,
	0x7f, 0x96, 0xe0, 0xda, 0x8c, 0x33, 0x60, 0x81, 0x3f, 0x64, 0x04, 0xbd, 0x03, 0xa5, 0xf8, 0xd4,
	0x45, 0x12, 0xaf, 0xf1, 0x78, 0x34, 0x70, 0x35, 0x8b, 0x2f, 0x63, 0x61, 0x4e, 0x9c, 0x56, 0x2e,
	0xeb, 0xb4, 0xea, 0x50, 0xe4, 0xf9, 0x0b, 0x8a, 0x77, 0x16, 0xa8, 0x0b, 0x8e, 0x91, 0xea, 0xf3,
	0x02, 0xc8, 0xdd, 0xe0, 0xf0, 0xc2, 0xc2, 0xd9, 0x81, 0x3c, 0x25, 0x47, 0x82, 0xf2, 0xd6, 0x22,
	0x44, 0xc8, 0x11, 0xa1, 0x64, 0xe8, 0x12, 0x1c, 0x05, 0x50, 0xbe, 0xc9, 0x43, 0x29, 0xe6, 0x83,
	0x7a, 0x50, 0x88, 0xb6, 0xe2, 0xc9, 0x5d, 0xae, 0xb6, 0xb2, 0x62, 0xa6, 0x65, 0x21, 0x0c, 0x9a,
	0x7d, 0x1a, 0x10, 0xcc, 0x23, 0xbe, 0x14, 0x67, 0x61, 0x09, 0x71, 0xfe, 0x25, 0x41, 0x21, 0x8a,
	0x85, 0x6a, 0x50, 0xe9, 0x9a, 0xad, 0xba, 0xad, 0xf7, 0xcd, 0x6e, 0xa3, 0x6d, 0x34, 0xfb, 0xd6,
	0x83, 0x3a, 0xd6, 0xfb, 0x58, 0xff, 0xb4, 0xab, 0x5b, 0x76, 0x5f, 0xd8, 0xec, 0xcf, 0x4c, 0xbd,
	0x6f, 0xec, 0x3d, 0xac, 0xb7, 0x8d, 0x56, 0xf9, 0x12, 0xba, 0x0b, 0xb5, 0x79, 0x41, 0xa6, 0x8e,
	0x3f, 0x31, 0x2c, 0xcb, 0xe8, 0xec, 0x59, 0x65, 0x09, 0x6d, 0xc1, 0xe6, 0xdc, 0xc0, 0xba, 0x65,
	0xed, 0x77, 0x70, 0xab, 0x9c, 0x43, 0xdb, 0x50, 0x9d, 0x17, 0xa5, 0xf7, 0x4c, 0x03, 0xd7, 0x6d,
	0xa3, 0xb3, 0x57, 0xce, 0x73, 0x2d, 0xcf, 0x28, 0xe8, 0x6a, 0x6b, 0xf9, 0x59, 0x11, 0xde, 0x68,
	0x7b, 0x2c, 0x4c, 0x98, 0xd8, 0x12, 0x52, 0xee, 0xc1, 0xda, 0x91, 0x77, 0x1c, 0x12, 0xca, 0xe4,
	0xdc, 0xcd, 0xfc, 0xad, 0xf5, 0xea, 0xc7, 0x59, 0x5c, 0x52, 0x36, 0xd5, 0x76, 0x78, 0x18, 0x3c,
	0x0e, 0xa7, 0xfc, 0x9d, 0x87, 0x52, 0xbc, 0x86, 0xf6, 0x85, 0xb8, 0x73, 0x5c, 0xdc, 0xcd, 0x8b,
	0xed, 0x90, 0xd4, 0xb6, 0x31, 0x79, 0x83, 0xe7, 0x17, 0xb9, 0xc1, 0x1f, 0x5c, 0x9a, 0xb8, 0xc3,
	0x6f, 0x43, 0xd1, 0x7f, 0x3a, 0x24, 0x54, 0xb4, 0x49, 0xb2, 0x64, 0x5d, 0x46, 0x28, 0xf7, 0x8f,
	0x3d, 0xd0, 0x7b, 0xb0, 0xe6, 0x46, 0x57, 0x9f, 0x4f, 0xe5, 0x62, 0xba, 0xf3, 0xd8, 0x47, 0xfd,
	0x63, 0xdc, 0x43, 0x55, 0xd0, 0xda, 0x86, 0x65, 0x4f, 0xa8, 0xd3, 0x3a, 0x93, 0xe7, 0x8e, 0xd1,
	0xb6, 0x75, 0x7c, 0xbe, 0x85, 0xb6, 0xa1, 0x3a, 0x27, 0x06, 0xeb, 0x56, 0xa7, 0x8b, 0x9b, 0x7a,
	0xdf, 0x68, 0x95, 0x25, 0xb4, 0x09, 0xef, 0xce, 0x89, 0xeb, 0xec, 0xef, 0xe9, 0xb8, 0x9c, 0x5b,
	0x80, 0x5d, 0x13, 0xeb, 0x75, 0xbb, 0x83, 0xcb, 0xf9, 0x46, 0x09, 0x0a, 0x21, 0xa1, 0x03, 0xf5,
	0x27, 0x09, 0xe4, 0xe9, 0x53, 0xfb, 0x7f, 0x1a, 0x28, 0xbf, 0x64, 0x03, 0x7d, 0x2f, 0x81, 0x8c,
	0xc9, 0xc0, 0x3f, 0x59, 0x8d, 0x97, 0x81, 0xea, 0xc3, 0xb5, 0x19, 0x74, 0xfe, 0xbb, 0x1a, 0xaa,
	0xcf, 0x24, 0xb8, 0xba, 0x4b, 0xc2, 0xd5, 0xc8, 0xfe, 0x47, 0x09, 0x5e, 0x3f, 0x4f, 0x66, 0xb5,
	0x2f, 0xe0, 0x3e, 0x5c, 0x9f, 0x24, 0xdc, 0x38, 0xb5, 0xfd, 0x2f, 0xc9, 0x70, 0x89, 0x22, 0x6e,
	0x40, 0x31, 0x8c, 0xa0, 0x62, 0x36, 0x8b, 0x1f, 0xd4, 0x5f, 0x25, 0x78, 0x33, 0x65, 0x87, 0x95,
	0xae, 0x4c, 0xf5, 0xcf, 0x12, 0x28, 0xc9, 0xa9, 0x54, 0x20, 0x2c, 0x42, 0x4f, 0x3c, 0x97, 0xa0,
	0xef, 0x24, 0xb8, 0x32, 0x35, 0x3a, 0xa2, 0x7b, 0x59, 0x1b, 0xa5, 0x4d, 0xfc, 0xca, 0xfd, 0x25,
	0x90, 0xa2, 0x80, 0x11, 0x95, 0xa9, 0xa6, 0xcb, 0xa6, 0x92, 0x76, 0x6d, 0x64, 0x53, 0x49, 0xef,
	0xf0, 0xaf, 0xe1, 0xf2, 0xe4, 0x61, 0xa3, 0xf7, 0x33, 0x27, 0xb5, 0x59, 0xcd, 0xab, 0x6c, 0x2f,
	0x0a, 0x13, 0x04, 0x9e, 0x4f, 0x5d, 0x07, 0x42, 0x6e, 0xe8, 0xc3, 0xc5, 0x22, 0x4e, 0xf6, 0x81,
	0xf2, 0xd1, 0x92, 0x68, 0x41, 0xeb, 0x5b, 0x09, 0xca, 0xe7, 0x5f, 0x2d, 0xe8, 0xee, 0x92, 0x23,
	0x84, 0x72, 0x6f, 0x71, 0x60, 0x42, 0x2a, 0x53, 0x43, 0x62, 0xb6, 0x54, 0xd2, 0x06, 0xf5, 0x6c,
	0xa9, 0xa4, 0x4e, 0xa4, 0x8d, 0x17, 0x12, 0xa8, 0xae, 0x3f, 0xc8, 0x08, 0xd0, 0x90, 0xcd, 0x69,
	0x9b, 0x19, 0x7d, 0x40, 0x9b, 0xd2, 0xe7, 0xd7, 0xd3, 0x71, 0xc1, 0xc1, 0x0f, 0xb9, 0xb5, 0x66,
	0xa3, 0xd3, 0x33, 0x2d, 0xf3, 0x45, 0xee, 0x46, 0xd3, 0xaa, 0x69, 0x33, 0x9a, 0xf9, 0xe1, 0x66,
	0x3d, 0x72, 0xfe, 0x8d, 0x3b, 0x7c, 0x91, 0xee, 0x70, 0x50, 0xe2, 0xdf, 0xec, 0xb5, 0x7f, 0x02,
	0x00, 0x00, 0xff, 0xff, 0xb1, 0xe1, 0x0c, 0x06, 0x9b, 0x10, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PublicShareProviderServiceClient is the client API for PublicShareProviderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PublicShareProviderServiceClient interface {
	// Creates a new share.
	// MUST return CODE_NOT_FOUND if the resource reference does not exist.
	// MUST return CODE_ALREADY_EXISTS if the share already exists for the 4-tuple consisting of
	// (owner, shared_resource, grantee).
	// New shares MUST be created in the state SHARE_STATE_PENDING.
	CreatePublicShare(ctx context.Context, in *CreatePublicShareRequest, opts ...grpc.CallOption) (*CreatePublicShareResponse, error)
	// Removes a share.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	RemovePublicShare(ctx context.Context, in *RemovePublicShareRequest, opts ...grpc.CallOption) (*RemovePublicShareResponse, error)
	// Gets share information for a single share.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	GetPublicShare(ctx context.Context, in *GetPublicShareRequest, opts ...grpc.CallOption) (*GetPublicShareResponse, error)
	// Gets share information for a single share by its unlisted token.
	// MUST return CODE_NOT_FOUND if the share does not exist.
	GetPublicShareByToken(ctx context.Context, in *GetPublicShareByTokenRequest, opts ...grpc.CallOption) (*GetPublicShareByTokenResponse, error)
	// List the shares the authenticated principal has created,
	// both as owner and creator. If a filter is specified, only
	// shares satisfying the filter MUST be returned.
	ListPublicShares(ctx context.Context, in *ListPublicSharesRequest, opts ...grpc.CallOption) (*ListPublicSharesResponse, error)
	// Updates a share.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	UpdatePublicShare(ctx context.Context, in *UpdatePublicShareRequest, opts ...grpc.CallOption) (*UpdatePublicShareResponse, error)
}

type publicShareProviderServiceClient struct {
	cc *grpc.ClientConn
}

func NewPublicShareProviderServiceClient(cc *grpc.ClientConn) PublicShareProviderServiceClient {
	return &publicShareProviderServiceClient{cc}
}

func (c *publicShareProviderServiceClient) CreatePublicShare(ctx context.Context, in *CreatePublicShareRequest, opts ...grpc.CallOption) (*CreatePublicShareResponse, error) {
	out := new(CreatePublicShareResponse)
	err := c.cc.Invoke(ctx, "/cs3.publicshareproviderv0alpha.PublicShareProviderService/CreatePublicShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicShareProviderServiceClient) RemovePublicShare(ctx context.Context, in *RemovePublicShareRequest, opts ...grpc.CallOption) (*RemovePublicShareResponse, error) {
	out := new(RemovePublicShareResponse)
	err := c.cc.Invoke(ctx, "/cs3.publicshareproviderv0alpha.PublicShareProviderService/RemovePublicShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicShareProviderServiceClient) GetPublicShare(ctx context.Context, in *GetPublicShareRequest, opts ...grpc.CallOption) (*GetPublicShareResponse, error) {
	out := new(GetPublicShareResponse)
	err := c.cc.Invoke(ctx, "/cs3.publicshareproviderv0alpha.PublicShareProviderService/GetPublicShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicShareProviderServiceClient) GetPublicShareByToken(ctx context.Context, in *GetPublicShareByTokenRequest, opts ...grpc.CallOption) (*GetPublicShareByTokenResponse, error) {
	out := new(GetPublicShareByTokenResponse)
	err := c.cc.Invoke(ctx, "/cs3.publicshareproviderv0alpha.PublicShareProviderService/GetPublicShareByToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicShareProviderServiceClient) ListPublicShares(ctx context.Context, in *ListPublicSharesRequest, opts ...grpc.CallOption) (*ListPublicSharesResponse, error) {
	out := new(ListPublicSharesResponse)
	err := c.cc.Invoke(ctx, "/cs3.publicshareproviderv0alpha.PublicShareProviderService/ListPublicShares", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicShareProviderServiceClient) UpdatePublicShare(ctx context.Context, in *UpdatePublicShareRequest, opts ...grpc.CallOption) (*UpdatePublicShareResponse, error) {
	out := new(UpdatePublicShareResponse)
	err := c.cc.Invoke(ctx, "/cs3.publicshareproviderv0alpha.PublicShareProviderService/UpdatePublicShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PublicShareProviderServiceServer is the server API for PublicShareProviderService service.
type PublicShareProviderServiceServer interface {
	// Creates a new share.
	// MUST return CODE_NOT_FOUND if the resource reference does not exist.
	// MUST return CODE_ALREADY_EXISTS if the share already exists for the 4-tuple consisting of
	// (owner, shared_resource, grantee).
	// New shares MUST be created in the state SHARE_STATE_PENDING.
	CreatePublicShare(context.Context, *CreatePublicShareRequest) (*CreatePublicShareResponse, error)
	// Removes a share.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	RemovePublicShare(context.Context, *RemovePublicShareRequest) (*RemovePublicShareResponse, error)
	// Gets share information for a single share.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	GetPublicShare(context.Context, *GetPublicShareRequest) (*GetPublicShareResponse, error)
	// Gets share information for a single share by its unlisted token.
	// MUST return CODE_NOT_FOUND if the share does not exist.
	GetPublicShareByToken(context.Context, *GetPublicShareByTokenRequest) (*GetPublicShareByTokenResponse, error)
	// List the shares the authenticated principal has created,
	// both as owner and creator. If a filter is specified, only
	// shares satisfying the filter MUST be returned.
	ListPublicShares(context.Context, *ListPublicSharesRequest) (*ListPublicSharesResponse, error)
	// Updates a share.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	UpdatePublicShare(context.Context, *UpdatePublicShareRequest) (*UpdatePublicShareResponse, error)
}

// UnimplementedPublicShareProviderServiceServer can be embedded to have forward compatible implementations.
type UnimplementedPublicShareProviderServiceServer struct {
}

func (*UnimplementedPublicShareProviderServiceServer) CreatePublicShare(ctx context.Context, req *CreatePublicShareRequest) (*CreatePublicShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePublicShare not implemented")
}
func (*UnimplementedPublicShareProviderServiceServer) RemovePublicShare(ctx context.Context, req *RemovePublicShareRequest) (*RemovePublicShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePublicShare not implemented")
}
func (*UnimplementedPublicShareProviderServiceServer) GetPublicShare(ctx context.Context, req *GetPublicShareRequest) (*GetPublicShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPublicShare not implemented")
}
func (*UnimplementedPublicShareProviderServiceServer) GetPublicShareByToken(ctx context.Context, req *GetPublicShareByTokenRequest) (*GetPublicShareByTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPublicShareByToken not implemented")
}
func (*UnimplementedPublicShareProviderServiceServer) ListPublicShares(ctx context.Context, req *ListPublicSharesRequest) (*ListPublicSharesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPublicShares not implemented")
}
func (*UnimplementedPublicShareProviderServiceServer) UpdatePublicShare(ctx context.Context, req *UpdatePublicShareRequest) (*UpdatePublicShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePublicShare not implemented")
}

func RegisterPublicShareProviderServiceServer(s *grpc.Server, srv PublicShareProviderServiceServer) {
	s.RegisterService(&_PublicShareProviderService_serviceDesc, srv)
}

func _PublicShareProviderService_CreatePublicShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePublicShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicShareProviderServiceServer).CreatePublicShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.publicshareproviderv0alpha.PublicShareProviderService/CreatePublicShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicShareProviderServiceServer).CreatePublicShare(ctx, req.(*CreatePublicShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicShareProviderService_RemovePublicShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemovePublicShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicShareProviderServiceServer).RemovePublicShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.publicshareproviderv0alpha.PublicShareProviderService/RemovePublicShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicShareProviderServiceServer).RemovePublicShare(ctx, req.(*RemovePublicShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicShareProviderService_GetPublicShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPublicShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicShareProviderServiceServer).GetPublicShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.publicshareproviderv0alpha.PublicShareProviderService/GetPublicShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicShareProviderServiceServer).GetPublicShare(ctx, req.(*GetPublicShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicShareProviderService_GetPublicShareByToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPublicShareByTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicShareProviderServiceServer).GetPublicShareByToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.publicshareproviderv0alpha.PublicShareProviderService/GetPublicShareByToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicShareProviderServiceServer).GetPublicShareByToken(ctx, req.(*GetPublicShareByTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicShareProviderService_ListPublicShares_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPublicSharesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicShareProviderServiceServer).ListPublicShares(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.publicshareproviderv0alpha.PublicShareProviderService/ListPublicShares",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicShareProviderServiceServer).ListPublicShares(ctx, req.(*ListPublicSharesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicShareProviderService_UpdatePublicShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePublicShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicShareProviderServiceServer).UpdatePublicShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.publicshareproviderv0alpha.PublicShareProviderService/UpdatePublicShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicShareProviderServiceServer).UpdatePublicShare(ctx, req.(*UpdatePublicShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PublicShareProviderService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cs3.publicshareproviderv0alpha.PublicShareProviderService",
	HandlerType: (*PublicShareProviderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePublicShare",
			Handler:    _PublicShareProviderService_CreatePublicShare_Handler,
		},
		{
			MethodName: "RemovePublicShare",
			Handler:    _PublicShareProviderService_RemovePublicShare_Handler,
		},
		{
			MethodName: "GetPublicShare",
			Handler:    _PublicShareProviderService_GetPublicShare_Handler,
		},
		{
			MethodName: "GetPublicShareByToken",
			Handler:    _PublicShareProviderService_GetPublicShareByToken_Handler,
		},
		{
			MethodName: "ListPublicShares",
			Handler:    _PublicShareProviderService_ListPublicShares_Handler,
		},
		{
			MethodName: "UpdatePublicShare",
			Handler:    _PublicShareProviderService_UpdatePublicShare_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cs3/publicshareprovider/v0alpha/publicshareprovider.proto",
}
