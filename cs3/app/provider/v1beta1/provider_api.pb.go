// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cs3/app/provider/v1beta1/provider_api.proto

package providerv1beta1

import (
	context "context"
	fmt "fmt"
	v1beta12 "github.com/cs3org/go-cs3apis/cs3/rpc/v1beta1"
	v1beta11 "github.com/cs3org/go-cs3apis/cs3/storage/provider/v1beta1"
	v1beta1 "github.com/cs3org/go-cs3apis/cs3/types/v1beta1"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// REQUIRED.
// View mode.
type OpenFileInAppProviderRequest_ViewMode int32

const (
	OpenFileInAppProviderRequest_VIEW_MODE_INVALID OpenFileInAppProviderRequest_ViewMode = 0
	// The file can be opened but not downloaded.
	OpenFileInAppProviderRequest_VIEW_MODE_VIEW_ONLY OpenFileInAppProviderRequest_ViewMode = 1
	// The file can be downloaded.
	OpenFileInAppProviderRequest_VIEW_MODE_READ_ONLY OpenFileInAppProviderRequest_ViewMode = 2
	// The file can be downloaded and updated.
	OpenFileInAppProviderRequest_VIEW_MODE_READ_WRITE OpenFileInAppProviderRequest_ViewMode = 3
)

var OpenFileInAppProviderRequest_ViewMode_name = map[int32]string{
	0: "VIEW_MODE_INVALID",
	1: "VIEW_MODE_VIEW_ONLY",
	2: "VIEW_MODE_READ_ONLY",
	3: "VIEW_MODE_READ_WRITE",
}

var OpenFileInAppProviderRequest_ViewMode_value = map[string]int32{
	"VIEW_MODE_INVALID":    0,
	"VIEW_MODE_VIEW_ONLY":  1,
	"VIEW_MODE_READ_ONLY":  2,
	"VIEW_MODE_READ_WRITE": 3,
}

func (x OpenFileInAppProviderRequest_ViewMode) String() string {
	return proto.EnumName(OpenFileInAppProviderRequest_ViewMode_name, int32(x))
}

func (OpenFileInAppProviderRequest_ViewMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c007b70b037097fe, []int{0, 0}
}

type OpenFileInAppProviderRequest struct {
	// OPTIONAL.
	// Opaque information.
	Opaque *v1beta1.Opaque `protobuf:"bytes,1,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// REQUIRED.
	// The resource reference.
	Ref *v1beta11.Reference `protobuf:"bytes,2,opt,name=ref,proto3" json:"ref,omitempty"`
	// REQUIRED.
	// The access token this application provider will use when contacting
	// the storage provider to read and write.
	// Service implementors MUST make sure that the access token only grants
	// access to the requested resource.
	// Service implementors should use a ResourceId rather than a filename to grant access, as
	// ResourceIds MUST NOT change when a resource is renamed.
	// The access token MUST be short-lived.
	// TODO(labkode): investigate token derivation techniques.
	AccessToken          string                                `protobuf:"bytes,3,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
	ViewMode             OpenFileInAppProviderRequest_ViewMode `protobuf:"varint,4,opt,name=view_mode,json=viewMode,proto3,enum=cs3.app.provider.v1beta1.OpenFileInAppProviderRequest_ViewMode" json:"view_mode,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                              `json:"-"`
	XXX_unrecognized     []byte                                `json:"-"`
	XXX_sizecache        int32                                 `json:"-"`
}

func (m *OpenFileInAppProviderRequest) Reset()         { *m = OpenFileInAppProviderRequest{} }
func (m *OpenFileInAppProviderRequest) String() string { return proto.CompactTextString(m) }
func (*OpenFileInAppProviderRequest) ProtoMessage()    {}
func (*OpenFileInAppProviderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c007b70b037097fe, []int{0}
}

func (m *OpenFileInAppProviderRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OpenFileInAppProviderRequest.Unmarshal(m, b)
}
func (m *OpenFileInAppProviderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OpenFileInAppProviderRequest.Marshal(b, m, deterministic)
}
func (m *OpenFileInAppProviderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpenFileInAppProviderRequest.Merge(m, src)
}
func (m *OpenFileInAppProviderRequest) XXX_Size() int {
	return xxx_messageInfo_OpenFileInAppProviderRequest.Size(m)
}
func (m *OpenFileInAppProviderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OpenFileInAppProviderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OpenFileInAppProviderRequest proto.InternalMessageInfo

func (m *OpenFileInAppProviderRequest) GetOpaque() *v1beta1.Opaque {
	if m != nil {
		return m.Opaque
	}
	return nil
}

func (m *OpenFileInAppProviderRequest) GetRef() *v1beta11.Reference {
	if m != nil {
		return m.Ref
	}
	return nil
}

func (m *OpenFileInAppProviderRequest) GetAccessToken() string {
	if m != nil {
		return m.AccessToken
	}
	return ""
}

func (m *OpenFileInAppProviderRequest) GetViewMode() OpenFileInAppProviderRequest_ViewMode {
	if m != nil {
		return m.ViewMode
	}
	return OpenFileInAppProviderRequest_VIEW_MODE_INVALID
}

type OpenFileInAppProviderResponse struct {
	// REQUIRED.
	// The response status.
	Status *v1beta12.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// OPTIONAL.
	// Opaque information.
	Opaque *v1beta1.Opaque `protobuf:"bytes,2,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// REQUIRED.
	// The url that user agents will render to clients.
	// Usually the rendering happens by using HTML iframes,
	// at least, Office 365, Collabora, OnlyOffice do like that.
	AppProviderUrl       string   `protobuf:"bytes,3,opt,name=app_provider_url,json=appProviderUrl,proto3" json:"app_provider_url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OpenFileInAppProviderResponse) Reset()         { *m = OpenFileInAppProviderResponse{} }
func (m *OpenFileInAppProviderResponse) String() string { return proto.CompactTextString(m) }
func (*OpenFileInAppProviderResponse) ProtoMessage()    {}
func (*OpenFileInAppProviderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c007b70b037097fe, []int{1}
}

func (m *OpenFileInAppProviderResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OpenFileInAppProviderResponse.Unmarshal(m, b)
}
func (m *OpenFileInAppProviderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OpenFileInAppProviderResponse.Marshal(b, m, deterministic)
}
func (m *OpenFileInAppProviderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpenFileInAppProviderResponse.Merge(m, src)
}
func (m *OpenFileInAppProviderResponse) XXX_Size() int {
	return xxx_messageInfo_OpenFileInAppProviderResponse.Size(m)
}
func (m *OpenFileInAppProviderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_OpenFileInAppProviderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_OpenFileInAppProviderResponse proto.InternalMessageInfo

func (m *OpenFileInAppProviderResponse) GetStatus() *v1beta12.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *OpenFileInAppProviderResponse) GetOpaque() *v1beta1.Opaque {
	if m != nil {
		return m.Opaque
	}
	return nil
}

func (m *OpenFileInAppProviderResponse) GetAppProviderUrl() string {
	if m != nil {
		return m.AppProviderUrl
	}
	return ""
}

func init() {
	proto.RegisterEnum("cs3.app.provider.v1beta1.OpenFileInAppProviderRequest_ViewMode", OpenFileInAppProviderRequest_ViewMode_name, OpenFileInAppProviderRequest_ViewMode_value)
	proto.RegisterType((*OpenFileInAppProviderRequest)(nil), "cs3.app.provider.v1beta1.OpenFileInAppProviderRequest")
	proto.RegisterType((*OpenFileInAppProviderResponse)(nil), "cs3.app.provider.v1beta1.OpenFileInAppProviderResponse")
}

func init() {
	proto.RegisterFile("cs3/app/provider/v1beta1/provider_api.proto", fileDescriptor_c007b70b037097fe)
}

var fileDescriptor_c007b70b037097fe = []byte{
	// 500 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x93, 0xc1, 0x6e, 0xd3, 0x4c,
	0x10, 0xc7, 0x3f, 0x3b, 0x9f, 0xa2, 0x76, 0x83, 0x8a, 0x59, 0xa8, 0x6a, 0xa2, 0x54, 0x0a, 0xb9,
	0x10, 0x09, 0xb4, 0x51, 0x12, 0x09, 0xc4, 0x09, 0x39, 0x4d, 0x90, 0x2c, 0xb5, 0x8d, 0x65, 0x4a,
	0x2a, 0x50, 0x24, 0x6b, 0xeb, 0x4c, 0x91, 0x45, 0xe2, 0x9d, 0xee, 0xda, 0xa9, 0x38, 0x71, 0xe5,
	0x11, 0x38, 0x73, 0x44, 0xe2, 0x45, 0x78, 0x26, 0x0e, 0xc8, 0xf6, 0xda, 0x05, 0x4a, 0x10, 0x70,
	0xdb, 0x9d, 0xff, 0x6f, 0xc6, 0xff, 0x99, 0x59, 0x93, 0x07, 0xa1, 0x1a, 0xf6, 0x38, 0x62, 0x0f,
	0xa5, 0x58, 0x47, 0x0b, 0x90, 0xbd, 0x75, 0xff, 0x0c, 0x12, 0xde, 0xaf, 0x02, 0x01, 0xc7, 0x88,
	0xa1, 0x14, 0x89, 0xa0, 0x76, 0xa8, 0x86, 0x8c, 0x23, 0xb2, 0x52, 0x63, 0x1a, 0x6e, 0xb6, 0xb2,
	0x32, 0x12, 0xc3, 0x2a, 0x5b, 0x25, 0x3c, 0x49, 0x55, 0x91, 0xd7, 0x7c, 0x98, 0xa9, 0x2a, 0x11,
	0x92, 0xbf, 0x86, 0xeb, 0x1f, 0x92, 0xa0, 0x44, 0x2a, 0x43, 0x28, 0xe9, 0xfd, 0x8c, 0x4e, 0xde,
	0x22, 0xa8, 0x0a, 0xc9, 0x6f, 0x85, 0xdc, 0xf9, 0x6a, 0x92, 0xd6, 0x14, 0x21, 0x7e, 0x16, 0x2d,
	0xc1, 0x8d, 0x1d, 0x44, 0x4f, 0x17, 0xf4, 0xe1, 0x22, 0x05, 0x95, 0xd0, 0x3e, 0xa9, 0x0b, 0xe4,
	0x17, 0x29, 0xd8, 0x46, 0xdb, 0xe8, 0x36, 0x06, 0x77, 0x59, 0x66, 0xbb, 0x28, 0xa1, 0x0b, 0xb2,
	0x69, 0x0e, 0xf8, 0x1a, 0xa4, 0x4f, 0x48, 0x4d, 0xc2, 0xb9, 0x6d, 0xe6, 0xfc, 0xfd, 0x9c, 0xd7,
	0x76, 0xaf, 0xb5, 0xca, 0x7c, 0x38, 0x07, 0x09, 0x71, 0x08, 0x7e, 0x96, 0x43, 0xef, 0x91, 0x1b,
	0x3c, 0x0c, 0x41, 0xa9, 0x20, 0x11, 0x6f, 0x20, 0xb6, 0x6b, 0x6d, 0xa3, 0xbb, 0xed, 0x37, 0x8a,
	0xd8, 0x49, 0x16, 0xa2, 0x73, 0xb2, 0xbd, 0x8e, 0xe0, 0x32, 0x58, 0x89, 0x05, 0xd8, 0xff, 0xb7,
	0x8d, 0xee, 0xce, 0xe0, 0x29, 0xdb, 0x34, 0x4a, 0xf6, 0xbb, 0xde, 0xd8, 0x2c, 0x82, 0xcb, 0x23,
	0xb1, 0x00, 0x7f, 0x6b, 0xad, 0x4f, 0x9d, 0x15, 0xd9, 0x2a, 0xa3, 0x74, 0x97, 0xdc, 0x9a, 0xb9,
	0x93, 0xd3, 0xe0, 0x68, 0x3a, 0x9e, 0x04, 0xee, 0xf1, 0xcc, 0x39, 0x74, 0xc7, 0xd6, 0x7f, 0x74,
	0x8f, 0xdc, 0xbe, 0x0a, 0xe7, 0xa7, 0xe9, 0xf1, 0xe1, 0x4b, 0xcb, 0xf8, 0x51, 0xf0, 0x27, 0xce,
	0xb8, 0x10, 0x4c, 0x6a, 0x93, 0x3b, 0x3f, 0x09, 0xa7, 0xbe, 0x7b, 0x32, 0xb1, 0x6a, 0x9d, 0xcf,
	0x06, 0xd9, 0xdf, 0x60, 0x51, 0xa1, 0x88, 0x15, 0xd0, 0x1e, 0xa9, 0x17, 0xdb, 0xd7, 0xf3, 0xdf,
	0xcb, 0x7b, 0x95, 0x18, 0x56, 0x2d, 0x3e, 0xcf, 0x65, 0x5f, 0x63, 0xdf, 0x2d, 0xcc, 0xfc, 0xd3,
	0x85, 0x75, 0x89, 0xc5, 0x11, 0x83, 0xea, 0x8d, 0xa6, 0x72, 0xa9, 0x27, 0xbf, 0xc3, 0xaf, 0x2c,
	0xbd, 0x90, 0xcb, 0xc1, 0x07, 0x83, 0x34, 0xca, 0xbb, 0xe3, 0xb9, 0xf4, 0xbd, 0x41, 0x76, 0x7f,
	0xe9, 0x9f, 0x3e, 0xfa, 0xb7, 0x9d, 0x34, 0x1f, 0xff, 0x75, 0x5e, 0x31, 0xa8, 0xd1, 0x3b, 0xd2,
	0x0a, 0xc5, 0x6a, 0x63, 0xf6, 0xc8, 0xaa, 0x7c, 0x63, 0xe4, 0x65, 0x6f, 0xdf, 0x33, 0x5e, 0xdd,
	0x2c, 0x29, 0x0d, 0x7d, 0x34, 0x6b, 0x07, 0x8e, 0xf7, 0xc9, 0xb4, 0x0f, 0xd4, 0x90, 0x39, 0x88,
	0xac, 0xcc, 0x61, 0xb3, 0xfe, 0x28, 0x03, 0xbe, 0xe4, 0xd2, 0xdc, 0x41, 0x9c, 0x97, 0xd2, 0x5c,
	0x4b, 0x67, 0xf5, 0xfc, 0x8f, 0x1a, 0x7e, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x2b, 0xc3, 0x62, 0xcc,
	0x05, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ProviderAPIClient is the client API for ProviderAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ProviderAPIClient interface {
	// Returns the iframe url
	// MUST return CODE_NOT_FOUND if the resource does not exist.
	OpenFileInAppProvider(ctx context.Context, in *OpenFileInAppProviderRequest, opts ...grpc.CallOption) (*OpenFileInAppProviderResponse, error)
}

type providerAPIClient struct {
	cc *grpc.ClientConn
}

func NewProviderAPIClient(cc *grpc.ClientConn) ProviderAPIClient {
	return &providerAPIClient{cc}
}

func (c *providerAPIClient) OpenFileInAppProvider(ctx context.Context, in *OpenFileInAppProviderRequest, opts ...grpc.CallOption) (*OpenFileInAppProviderResponse, error) {
	out := new(OpenFileInAppProviderResponse)
	err := c.cc.Invoke(ctx, "/cs3.app.provider.v1beta1.ProviderAPI/OpenFileInAppProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProviderAPIServer is the server API for ProviderAPI service.
type ProviderAPIServer interface {
	// Returns the iframe url
	// MUST return CODE_NOT_FOUND if the resource does not exist.
	OpenFileInAppProvider(context.Context, *OpenFileInAppProviderRequest) (*OpenFileInAppProviderResponse, error)
}

// UnimplementedProviderAPIServer can be embedded to have forward compatible implementations.
type UnimplementedProviderAPIServer struct {
}

func (*UnimplementedProviderAPIServer) OpenFileInAppProvider(ctx context.Context, req *OpenFileInAppProviderRequest) (*OpenFileInAppProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenFileInAppProvider not implemented")
}

func RegisterProviderAPIServer(s *grpc.Server, srv ProviderAPIServer) {
	s.RegisterService(&_ProviderAPI_serviceDesc, srv)
}

func _ProviderAPI_OpenFileInAppProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenFileInAppProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderAPIServer).OpenFileInAppProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.app.provider.v1beta1.ProviderAPI/OpenFileInAppProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderAPIServer).OpenFileInAppProvider(ctx, req.(*OpenFileInAppProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ProviderAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cs3.app.provider.v1beta1.ProviderAPI",
	HandlerType: (*ProviderAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OpenFileInAppProvider",
			Handler:    _ProviderAPI_OpenFileInAppProvider_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cs3/app/provider/v1beta1/provider_api.proto",
}
