// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cs3/identity/group/v1beta1/group_api.proto

package groupv1beta1

import (
	context "context"
	fmt "fmt"
	v1beta12 "github.com/cs3org/go-cs3apis/cs3/identity/user/v1beta1"
	v1beta11 "github.com/cs3org/go-cs3apis/cs3/rpc/v1beta1"
	v1beta1 "github.com/cs3org/go-cs3apis/cs3/types/v1beta1"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GetGroupRequest struct {
	// OPTIONAL.
	// Opaque information.
	Opaque *v1beta1.Opaque `protobuf:"bytes,1,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// REQUIRED.
	// The id of the group.
	GroupId              *GroupId `protobuf:"bytes,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetGroupRequest) Reset()         { *m = GetGroupRequest{} }
func (m *GetGroupRequest) String() string { return proto.CompactTextString(m) }
func (*GetGroupRequest) ProtoMessage()    {}
func (*GetGroupRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd2eee9df4cadb63, []int{0}
}

func (m *GetGroupRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetGroupRequest.Unmarshal(m, b)
}
func (m *GetGroupRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetGroupRequest.Marshal(b, m, deterministic)
}
func (m *GetGroupRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetGroupRequest.Merge(m, src)
}
func (m *GetGroupRequest) XXX_Size() int {
	return xxx_messageInfo_GetGroupRequest.Size(m)
}
func (m *GetGroupRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetGroupRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetGroupRequest proto.InternalMessageInfo

func (m *GetGroupRequest) GetOpaque() *v1beta1.Opaque {
	if m != nil {
		return m.Opaque
	}
	return nil
}

func (m *GetGroupRequest) GetGroupId() *GroupId {
	if m != nil {
		return m.GroupId
	}
	return nil
}

type GetGroupResponse struct {
	// REQUIRED.
	// The response status.
	Status *v1beta11.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// OPTIONAL.
	// Opaque information.
	Opaque *v1beta1.Opaque `protobuf:"bytes,2,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// REQUIRED.
	// The group information.
	Group                *Group   `protobuf:"bytes,3,opt,name=group,proto3" json:"group,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetGroupResponse) Reset()         { *m = GetGroupResponse{} }
func (m *GetGroupResponse) String() string { return proto.CompactTextString(m) }
func (*GetGroupResponse) ProtoMessage()    {}
func (*GetGroupResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd2eee9df4cadb63, []int{1}
}

func (m *GetGroupResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetGroupResponse.Unmarshal(m, b)
}
func (m *GetGroupResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetGroupResponse.Marshal(b, m, deterministic)
}
func (m *GetGroupResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetGroupResponse.Merge(m, src)
}
func (m *GetGroupResponse) XXX_Size() int {
	return xxx_messageInfo_GetGroupResponse.Size(m)
}
func (m *GetGroupResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetGroupResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetGroupResponse proto.InternalMessageInfo

func (m *GetGroupResponse) GetStatus() *v1beta11.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *GetGroupResponse) GetOpaque() *v1beta1.Opaque {
	if m != nil {
		return m.Opaque
	}
	return nil
}

func (m *GetGroupResponse) GetGroup() *Group {
	if m != nil {
		return m.Group
	}
	return nil
}

type GetGroupByClaimRequest struct {
	// OPTIONAL.
	// Opaque information.
	Opaque *v1beta1.Opaque `protobuf:"bytes,1,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// REQUIRED.
	// The claim on the basis of which groups will be filtered.
	Claim string `protobuf:"bytes,2,opt,name=claim,proto3" json:"claim,omitempty"`
	// REQUIRED.
	// The value of the claim to find the specific group.
	Value                string   `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetGroupByClaimRequest) Reset()         { *m = GetGroupByClaimRequest{} }
func (m *GetGroupByClaimRequest) String() string { return proto.CompactTextString(m) }
func (*GetGroupByClaimRequest) ProtoMessage()    {}
func (*GetGroupByClaimRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd2eee9df4cadb63, []int{2}
}

func (m *GetGroupByClaimRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetGroupByClaimRequest.Unmarshal(m, b)
}
func (m *GetGroupByClaimRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetGroupByClaimRequest.Marshal(b, m, deterministic)
}
func (m *GetGroupByClaimRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetGroupByClaimRequest.Merge(m, src)
}
func (m *GetGroupByClaimRequest) XXX_Size() int {
	return xxx_messageInfo_GetGroupByClaimRequest.Size(m)
}
func (m *GetGroupByClaimRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetGroupByClaimRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetGroupByClaimRequest proto.InternalMessageInfo

func (m *GetGroupByClaimRequest) GetOpaque() *v1beta1.Opaque {
	if m != nil {
		return m.Opaque
	}
	return nil
}

func (m *GetGroupByClaimRequest) GetClaim() string {
	if m != nil {
		return m.Claim
	}
	return ""
}

func (m *GetGroupByClaimRequest) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type GetGroupByClaimResponse struct {
	// REQUIRED.
	// The response status.
	Status *v1beta11.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// OPTIONAL.
	// Opaque information.
	Opaque *v1beta1.Opaque `protobuf:"bytes,2,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// REQUIRED.
	// The group information.
	Group                *Group   `protobuf:"bytes,3,opt,name=group,proto3" json:"group,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetGroupByClaimResponse) Reset()         { *m = GetGroupByClaimResponse{} }
func (m *GetGroupByClaimResponse) String() string { return proto.CompactTextString(m) }
func (*GetGroupByClaimResponse) ProtoMessage()    {}
func (*GetGroupByClaimResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd2eee9df4cadb63, []int{3}
}

func (m *GetGroupByClaimResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetGroupByClaimResponse.Unmarshal(m, b)
}
func (m *GetGroupByClaimResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetGroupByClaimResponse.Marshal(b, m, deterministic)
}
func (m *GetGroupByClaimResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetGroupByClaimResponse.Merge(m, src)
}
func (m *GetGroupByClaimResponse) XXX_Size() int {
	return xxx_messageInfo_GetGroupByClaimResponse.Size(m)
}
func (m *GetGroupByClaimResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetGroupByClaimResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetGroupByClaimResponse proto.InternalMessageInfo

func (m *GetGroupByClaimResponse) GetStatus() *v1beta11.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *GetGroupByClaimResponse) GetOpaque() *v1beta1.Opaque {
	if m != nil {
		return m.Opaque
	}
	return nil
}

func (m *GetGroupByClaimResponse) GetGroup() *Group {
	if m != nil {
		return m.Group
	}
	return nil
}

type GetMembersRequest struct {
	// OPTIONAL.
	// Opaque information.
	Opaque *v1beta1.Opaque `protobuf:"bytes,1,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// REQUIRED.
	// The id of the group.
	GroupId              *GroupId `protobuf:"bytes,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetMembersRequest) Reset()         { *m = GetMembersRequest{} }
func (m *GetMembersRequest) String() string { return proto.CompactTextString(m) }
func (*GetMembersRequest) ProtoMessage()    {}
func (*GetMembersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd2eee9df4cadb63, []int{4}
}

func (m *GetMembersRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetMembersRequest.Unmarshal(m, b)
}
func (m *GetMembersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetMembersRequest.Marshal(b, m, deterministic)
}
func (m *GetMembersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMembersRequest.Merge(m, src)
}
func (m *GetMembersRequest) XXX_Size() int {
	return xxx_messageInfo_GetMembersRequest.Size(m)
}
func (m *GetMembersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMembersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetMembersRequest proto.InternalMessageInfo

func (m *GetMembersRequest) GetOpaque() *v1beta1.Opaque {
	if m != nil {
		return m.Opaque
	}
	return nil
}

func (m *GetMembersRequest) GetGroupId() *GroupId {
	if m != nil {
		return m.GroupId
	}
	return nil
}

type GetMembersResponse struct {
	// REQUIRED.
	// The response status.
	Status *v1beta11.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// OPTIONAL.
	// Opaque information.
	Opaque *v1beta1.Opaque `protobuf:"bytes,2,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// REQUIRED.
	// The members of the group.
	Members              []*v1beta12.UserId `protobuf:"bytes,3,rep,name=members,proto3" json:"members,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *GetMembersResponse) Reset()         { *m = GetMembersResponse{} }
func (m *GetMembersResponse) String() string { return proto.CompactTextString(m) }
func (*GetMembersResponse) ProtoMessage()    {}
func (*GetMembersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd2eee9df4cadb63, []int{5}
}

func (m *GetMembersResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetMembersResponse.Unmarshal(m, b)
}
func (m *GetMembersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetMembersResponse.Marshal(b, m, deterministic)
}
func (m *GetMembersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMembersResponse.Merge(m, src)
}
func (m *GetMembersResponse) XXX_Size() int {
	return xxx_messageInfo_GetMembersResponse.Size(m)
}
func (m *GetMembersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMembersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetMembersResponse proto.InternalMessageInfo

func (m *GetMembersResponse) GetStatus() *v1beta11.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *GetMembersResponse) GetOpaque() *v1beta1.Opaque {
	if m != nil {
		return m.Opaque
	}
	return nil
}

func (m *GetMembersResponse) GetMembers() []*v1beta12.UserId {
	if m != nil {
		return m.Members
	}
	return nil
}

type HasMemberRequest struct {
	// OPTIONAL.
	// Opaque information.
	Opaque *v1beta1.Opaque `protobuf:"bytes,1,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// REQUIRED.
	// The id of the group.
	GroupId *GroupId `protobuf:"bytes,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	// REQUIRED.
	// The id of the user to check.
	UserId               *v1beta12.UserId `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *HasMemberRequest) Reset()         { *m = HasMemberRequest{} }
func (m *HasMemberRequest) String() string { return proto.CompactTextString(m) }
func (*HasMemberRequest) ProtoMessage()    {}
func (*HasMemberRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd2eee9df4cadb63, []int{6}
}

func (m *HasMemberRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HasMemberRequest.Unmarshal(m, b)
}
func (m *HasMemberRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HasMemberRequest.Marshal(b, m, deterministic)
}
func (m *HasMemberRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HasMemberRequest.Merge(m, src)
}
func (m *HasMemberRequest) XXX_Size() int {
	return xxx_messageInfo_HasMemberRequest.Size(m)
}
func (m *HasMemberRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HasMemberRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HasMemberRequest proto.InternalMessageInfo

func (m *HasMemberRequest) GetOpaque() *v1beta1.Opaque {
	if m != nil {
		return m.Opaque
	}
	return nil
}

func (m *HasMemberRequest) GetGroupId() *GroupId {
	if m != nil {
		return m.GroupId
	}
	return nil
}

func (m *HasMemberRequest) GetUserId() *v1beta12.UserId {
	if m != nil {
		return m.UserId
	}
	return nil
}

type HasMemberResponse struct {
	// REQUIRED.
	// The response status.
	Status *v1beta11.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// OPTIONAL.
	// Opaque information.
	Opaque *v1beta1.Opaque `protobuf:"bytes,2,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// REQUIRED.
	// Tells if the user belongs to the group.
	Ok                   bool     `protobuf:"varint,3,opt,name=ok,proto3" json:"ok,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HasMemberResponse) Reset()         { *m = HasMemberResponse{} }
func (m *HasMemberResponse) String() string { return proto.CompactTextString(m) }
func (*HasMemberResponse) ProtoMessage()    {}
func (*HasMemberResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd2eee9df4cadb63, []int{7}
}

func (m *HasMemberResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HasMemberResponse.Unmarshal(m, b)
}
func (m *HasMemberResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HasMemberResponse.Marshal(b, m, deterministic)
}
func (m *HasMemberResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HasMemberResponse.Merge(m, src)
}
func (m *HasMemberResponse) XXX_Size() int {
	return xxx_messageInfo_HasMemberResponse.Size(m)
}
func (m *HasMemberResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_HasMemberResponse.DiscardUnknown(m)
}

var xxx_messageInfo_HasMemberResponse proto.InternalMessageInfo

func (m *HasMemberResponse) GetStatus() *v1beta11.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *HasMemberResponse) GetOpaque() *v1beta1.Opaque {
	if m != nil {
		return m.Opaque
	}
	return nil
}

func (m *HasMemberResponse) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

type FindGroupsRequest struct {
	// OPTIONAL.
	// Opaque information.
	Opaque *v1beta1.Opaque `protobuf:"bytes,1,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// REQUIRED.
	// The filter to apply.
	Filter               string   `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FindGroupsRequest) Reset()         { *m = FindGroupsRequest{} }
func (m *FindGroupsRequest) String() string { return proto.CompactTextString(m) }
func (*FindGroupsRequest) ProtoMessage()    {}
func (*FindGroupsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd2eee9df4cadb63, []int{8}
}

func (m *FindGroupsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FindGroupsRequest.Unmarshal(m, b)
}
func (m *FindGroupsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FindGroupsRequest.Marshal(b, m, deterministic)
}
func (m *FindGroupsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindGroupsRequest.Merge(m, src)
}
func (m *FindGroupsRequest) XXX_Size() int {
	return xxx_messageInfo_FindGroupsRequest.Size(m)
}
func (m *FindGroupsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FindGroupsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FindGroupsRequest proto.InternalMessageInfo

func (m *FindGroupsRequest) GetOpaque() *v1beta1.Opaque {
	if m != nil {
		return m.Opaque
	}
	return nil
}

func (m *FindGroupsRequest) GetFilter() string {
	if m != nil {
		return m.Filter
	}
	return ""
}

type FindGroupsResponse struct {
	// REQUIRED.
	// The response status.
	Status *v1beta11.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// OPTIONAL.
	// Opaque information.
	Opaque *v1beta1.Opaque `protobuf:"bytes,2,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// REQUIRED.
	// The groups matching the specified filter.
	Groups               []*Group `protobuf:"bytes,3,rep,name=groups,proto3" json:"groups,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FindGroupsResponse) Reset()         { *m = FindGroupsResponse{} }
func (m *FindGroupsResponse) String() string { return proto.CompactTextString(m) }
func (*FindGroupsResponse) ProtoMessage()    {}
func (*FindGroupsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd2eee9df4cadb63, []int{9}
}

func (m *FindGroupsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FindGroupsResponse.Unmarshal(m, b)
}
func (m *FindGroupsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FindGroupsResponse.Marshal(b, m, deterministic)
}
func (m *FindGroupsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindGroupsResponse.Merge(m, src)
}
func (m *FindGroupsResponse) XXX_Size() int {
	return xxx_messageInfo_FindGroupsResponse.Size(m)
}
func (m *FindGroupsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FindGroupsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FindGroupsResponse proto.InternalMessageInfo

func (m *FindGroupsResponse) GetStatus() *v1beta11.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *FindGroupsResponse) GetOpaque() *v1beta1.Opaque {
	if m != nil {
		return m.Opaque
	}
	return nil
}

func (m *FindGroupsResponse) GetGroups() []*Group {
	if m != nil {
		return m.Groups
	}
	return nil
}

func init() {
	proto.RegisterType((*GetGroupRequest)(nil), "cs3.identity.group.v1beta1.GetGroupRequest")
	proto.RegisterType((*GetGroupResponse)(nil), "cs3.identity.group.v1beta1.GetGroupResponse")
	proto.RegisterType((*GetGroupByClaimRequest)(nil), "cs3.identity.group.v1beta1.GetGroupByClaimRequest")
	proto.RegisterType((*GetGroupByClaimResponse)(nil), "cs3.identity.group.v1beta1.GetGroupByClaimResponse")
	proto.RegisterType((*GetMembersRequest)(nil), "cs3.identity.group.v1beta1.GetMembersRequest")
	proto.RegisterType((*GetMembersResponse)(nil), "cs3.identity.group.v1beta1.GetMembersResponse")
	proto.RegisterType((*HasMemberRequest)(nil), "cs3.identity.group.v1beta1.HasMemberRequest")
	proto.RegisterType((*HasMemberResponse)(nil), "cs3.identity.group.v1beta1.HasMemberResponse")
	proto.RegisterType((*FindGroupsRequest)(nil), "cs3.identity.group.v1beta1.FindGroupsRequest")
	proto.RegisterType((*FindGroupsResponse)(nil), "cs3.identity.group.v1beta1.FindGroupsResponse")
}

func init() {
	proto.RegisterFile("cs3/identity/group/v1beta1/group_api.proto", fileDescriptor_cd2eee9df4cadb63)
}

var fileDescriptor_cd2eee9df4cadb63 = []byte{
	// 619 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x56, 0x4b, 0x6f, 0xd3, 0x40,
	0x10, 0xd6, 0x3a, 0xd4, 0x49, 0x86, 0x57, 0xb3, 0x42, 0x6d, 0xb0, 0x00, 0x15, 0x73, 0xe1, 0xd5,
	0x8d, 0x92, 0x1c, 0x10, 0x20, 0x21, 0x91, 0x48, 0x84, 0x1c, 0x10, 0x91, 0x11, 0x1c, 0x50, 0x04,
	0x72, 0x9c, 0xa5, 0x58, 0x79, 0xd8, 0xf5, 0xae, 0x8b, 0xc2, 0x85, 0x0b, 0x82, 0xff, 0xc1, 0x91,
	0x0b, 0x42, 0x08, 0xee, 0x5c, 0xf9, 0x55, 0x68, 0x1f, 0xce, 0x83, 0x24, 0x6e, 0x50, 0xa5, 0x54,
	0x3d, 0xb5, 0xeb, 0xef, 0x9b, 0x99, 0x6f, 0xbe, 0xcc, 0x8e, 0x0d, 0x37, 0x3d, 0x56, 0x2d, 0xf9,
	0x5d, 0x3a, 0xe4, 0x3e, 0x1f, 0x95, 0xf6, 0xa2, 0x20, 0x0e, 0x4b, 0x07, 0xe5, 0x0e, 0xe5, 0x6e,
	0x59, 0x9d, 0x5e, 0xbb, 0xa1, 0x4f, 0xc2, 0x28, 0xe0, 0x01, 0xb6, 0x3c, 0x56, 0x25, 0x09, 0x97,
	0x48, 0x94, 0x68, 0xae, 0x95, 0x96, 0x27, 0xa2, 0x2c, 0x88, 0x23, 0x8f, 0x32, 0x95, 0xc7, 0xba,
	0x31, 0xc3, 0x8d, 0x19, 0x8d, 0x96, 0x52, 0x2f, 0x09, 0x6a, 0x14, 0x7a, 0x63, 0x02, 0xe3, 0x2e,
	0x8f, 0x13, 0xf4, 0xb2, 0x40, 0xf9, 0x28, 0xa4, 0x6c, 0x8c, 0xcb, 0x93, 0x82, 0xed, 0x8f, 0x08,
	0xce, 0x37, 0x28, 0x6f, 0x08, 0x31, 0x0e, 0xdd, 0x8f, 0x29, 0xe3, 0xb8, 0x0c, 0x66, 0x10, 0xba,
	0xfb, 0x31, 0x2d, 0xa2, 0x1d, 0x74, 0xfd, 0x74, 0xe5, 0x22, 0x11, 0x4d, 0xa9, 0x28, 0x9d, 0x83,
	0x3c, 0x95, 0x04, 0x47, 0x13, 0xf1, 0x03, 0xc8, 0x29, 0x27, 0xfc, 0x6e, 0xd1, 0x90, 0x41, 0xd7,
	0xc8, 0x72, 0x27, 0x88, 0x2c, 0xd7, 0xec, 0x3a, 0xd9, 0x3d, 0xf5, 0x8f, 0xfd, 0x0d, 0xc1, 0xe6,
	0x44, 0x06, 0x0b, 0x83, 0x21, 0xa3, 0xb8, 0x04, 0xa6, 0x6a, 0x45, 0xeb, 0xd8, 0x96, 0x29, 0xa3,
	0xd0, 0x1b, 0xe7, 0x79, 0x26, 0x61, 0x47, 0xd3, 0xa6, 0x84, 0x1b, 0xab, 0x0a, 0xbf, 0x03, 0x1b,
	0x52, 0x43, 0x31, 0x23, 0x23, 0xae, 0x1e, 0xaa, 0xda, 0x51, 0x7c, 0xfb, 0x1d, 0x6c, 0x25, 0x82,
	0x6b, 0xa3, 0x7a, 0xdf, 0xf5, 0x07, 0x47, 0xb0, 0xef, 0x02, 0x6c, 0x78, 0x22, 0x85, 0xd4, 0x9d,
	0x77, 0xd4, 0x41, 0x3c, 0x3d, 0x70, 0xfb, 0x31, 0x95, 0xda, 0xf2, 0x8e, 0x3a, 0xd8, 0xbf, 0x10,
	0x6c, 0xcf, 0x55, 0x3e, 0x09, 0x8e, 0x7d, 0x42, 0x50, 0x68, 0x50, 0xfe, 0x84, 0x0e, 0x3a, 0x34,
	0x62, 0xc7, 0x38, 0x6c, 0x3f, 0x11, 0xe0, 0x69, 0x21, 0x6b, 0x34, 0xef, 0x3e, 0x64, 0x07, 0xaa,
	0x6c, 0x31, 0xb3, 0x93, 0x99, 0xb7, 0x4f, 0x5c, 0xf4, 0x71, 0xec, 0x73, 0x46, 0x23, 0xa1, 0x5b,
	0x47, 0xd8, 0xbf, 0x11, 0x6c, 0x3e, 0x76, 0x99, 0xd2, 0x7d, 0x7c, 0xfe, 0xe1, 0x7b, 0x90, 0x15,
	0x3a, 0x45, 0xf8, 0xc2, 0x19, 0x58, 0xd4, 0x84, 0x19, 0xcb, 0xbf, 0xf6, 0x67, 0x04, 0x85, 0xa9,
	0x1e, 0xd6, 0x68, 0xfd, 0x39, 0x30, 0x82, 0x9e, 0x14, 0x9c, 0x73, 0x8c, 0xa0, 0x67, 0xbf, 0x82,
	0xc2, 0x23, 0x7f, 0xd8, 0x95, 0xdd, 0x1d, 0x65, 0x1a, 0xb7, 0xc0, 0x7c, 0xe3, 0xf7, 0x39, 0x8d,
	0xf4, 0xe5, 0xd5, 0x27, 0xfb, 0x07, 0x02, 0x3c, 0x5d, 0x60, 0x8d, 0xad, 0xde, 0x05, 0x53, 0xfe,
	0x56, 0x4b, 0x86, 0x6c, 0xd1, 0x1d, 0xd5, 0x01, 0x95, 0xef, 0xa7, 0x20, 0x27, 0x9f, 0x3c, 0x6c,
	0x35, 0x31, 0x85, 0x5c, 0xb2, 0x69, 0xf0, 0xad, 0xd4, 0x1c, 0xb3, 0x6f, 0x10, 0xeb, 0xf6, 0x6a,
	0x64, 0x6d, 0xc9, 0xfb, 0xc9, 0x2b, 0x48, 0x2f, 0x34, 0x5c, 0x59, 0x25, 0xc1, 0xec, 0xde, 0xb5,
	0xaa, 0xff, 0x15, 0xa3, 0x6b, 0xf7, 0x00, 0x26, 0xab, 0x00, 0xef, 0x1e, 0x92, 0x62, 0x76, 0x77,
	0x59, 0x64, 0x55, 0xba, 0x2e, 0xf6, 0x16, 0xf2, 0xe3, 0xd9, 0xc7, 0xa9, 0x1e, 0xfd, 0x7b, 0xcd,
	0xad, 0xdd, 0x15, 0xd9, 0x93, 0xb6, 0x26, 0xb3, 0x97, 0xde, 0xd6, 0xdc, 0x25, 0x48, 0x6f, 0x6b,
	0x7e, 0xa4, 0x6b, 0x1f, 0xe0, 0x8a, 0x17, 0x0c, 0x52, 0x82, 0x6a, 0x67, 0xd5, 0x48, 0x85, 0x7e,
	0x4b, 0x7c, 0x74, 0xb4, 0xd0, 0xcb, 0x33, 0x12, 0xd7, 0xf0, 0x17, 0x23, 0x53, 0x6f, 0x36, 0xbe,
	0x1a, 0x56, 0x9d, 0x55, 0x49, 0x33, 0xc9, 0x20, 0x43, 0xc8, 0x8b, 0x72, 0x4d, 0x50, 0xfe, 0x48,
	0xb0, 0x9d, 0x80, 0x6d, 0x09, 0xb6, 0x35, 0xd8, 0x31, 0xe5, 0xb7, 0x4c, 0xf5, 0x6f, 0x00, 0x00,
	0x00, 0xff, 0xff, 0xa7, 0xb8, 0xc2, 0x4b, 0xa9, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GroupAPIClient is the client API for GroupAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GroupAPIClient interface {
	// Gets the information about a group by the group id.
	GetGroup(ctx context.Context, in *GetGroupRequest, opts ...grpc.CallOption) (*GetGroupResponse, error)
	// Gets the information about a group based on a specified claim.
	GetGroupByClaim(ctx context.Context, in *GetGroupByClaimRequest, opts ...grpc.CallOption) (*GetGroupByClaimResponse, error)
	// Gets the members of a group.
	GetMembers(ctx context.Context, in *GetMembersRequest, opts ...grpc.CallOption) (*GetMembersResponse, error)
	// Tells if the group has certain member.
	HasMember(ctx context.Context, in *HasMemberRequest, opts ...grpc.CallOption) (*HasMemberResponse, error)
	// Finds groups whose names match the specified filter.
	FindGroups(ctx context.Context, in *FindGroupsRequest, opts ...grpc.CallOption) (*FindGroupsResponse, error)
}

type groupAPIClient struct {
	cc *grpc.ClientConn
}

func NewGroupAPIClient(cc *grpc.ClientConn) GroupAPIClient {
	return &groupAPIClient{cc}
}

func (c *groupAPIClient) GetGroup(ctx context.Context, in *GetGroupRequest, opts ...grpc.CallOption) (*GetGroupResponse, error) {
	out := new(GetGroupResponse)
	err := c.cc.Invoke(ctx, "/cs3.identity.group.v1beta1.GroupAPI/GetGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupAPIClient) GetGroupByClaim(ctx context.Context, in *GetGroupByClaimRequest, opts ...grpc.CallOption) (*GetGroupByClaimResponse, error) {
	out := new(GetGroupByClaimResponse)
	err := c.cc.Invoke(ctx, "/cs3.identity.group.v1beta1.GroupAPI/GetGroupByClaim", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupAPIClient) GetMembers(ctx context.Context, in *GetMembersRequest, opts ...grpc.CallOption) (*GetMembersResponse, error) {
	out := new(GetMembersResponse)
	err := c.cc.Invoke(ctx, "/cs3.identity.group.v1beta1.GroupAPI/GetMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupAPIClient) HasMember(ctx context.Context, in *HasMemberRequest, opts ...grpc.CallOption) (*HasMemberResponse, error) {
	out := new(HasMemberResponse)
	err := c.cc.Invoke(ctx, "/cs3.identity.group.v1beta1.GroupAPI/HasMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupAPIClient) FindGroups(ctx context.Context, in *FindGroupsRequest, opts ...grpc.CallOption) (*FindGroupsResponse, error) {
	out := new(FindGroupsResponse)
	err := c.cc.Invoke(ctx, "/cs3.identity.group.v1beta1.GroupAPI/FindGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GroupAPIServer is the server API for GroupAPI service.
type GroupAPIServer interface {
	// Gets the information about a group by the group id.
	GetGroup(context.Context, *GetGroupRequest) (*GetGroupResponse, error)
	// Gets the information about a group based on a specified claim.
	GetGroupByClaim(context.Context, *GetGroupByClaimRequest) (*GetGroupByClaimResponse, error)
	// Gets the members of a group.
	GetMembers(context.Context, *GetMembersRequest) (*GetMembersResponse, error)
	// Tells if the group has certain member.
	HasMember(context.Context, *HasMemberRequest) (*HasMemberResponse, error)
	// Finds groups whose names match the specified filter.
	FindGroups(context.Context, *FindGroupsRequest) (*FindGroupsResponse, error)
}

// UnimplementedGroupAPIServer can be embedded to have forward compatible implementations.
type UnimplementedGroupAPIServer struct {
}

func (*UnimplementedGroupAPIServer) GetGroup(ctx context.Context, req *GetGroupRequest) (*GetGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroup not implemented")
}
func (*UnimplementedGroupAPIServer) GetGroupByClaim(ctx context.Context, req *GetGroupByClaimRequest) (*GetGroupByClaimResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupByClaim not implemented")
}
func (*UnimplementedGroupAPIServer) GetMembers(ctx context.Context, req *GetMembersRequest) (*GetMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMembers not implemented")
}
func (*UnimplementedGroupAPIServer) HasMember(ctx context.Context, req *HasMemberRequest) (*HasMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasMember not implemented")
}
func (*UnimplementedGroupAPIServer) FindGroups(ctx context.Context, req *FindGroupsRequest) (*FindGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindGroups not implemented")
}

func RegisterGroupAPIServer(s *grpc.Server, srv GroupAPIServer) {
	s.RegisterService(&_GroupAPI_serviceDesc, srv)
}

func _GroupAPI_GetGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupAPIServer).GetGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.identity.group.v1beta1.GroupAPI/GetGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupAPIServer).GetGroup(ctx, req.(*GetGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupAPI_GetGroupByClaim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupByClaimRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupAPIServer).GetGroupByClaim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.identity.group.v1beta1.GroupAPI/GetGroupByClaim",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupAPIServer).GetGroupByClaim(ctx, req.(*GetGroupByClaimRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupAPI_GetMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupAPIServer).GetMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.identity.group.v1beta1.GroupAPI/GetMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupAPIServer).GetMembers(ctx, req.(*GetMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupAPI_HasMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HasMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupAPIServer).HasMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.identity.group.v1beta1.GroupAPI/HasMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupAPIServer).HasMember(ctx, req.(*HasMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupAPI_FindGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupAPIServer).FindGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.identity.group.v1beta1.GroupAPI/FindGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupAPIServer).FindGroups(ctx, req.(*FindGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GroupAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cs3.identity.group.v1beta1.GroupAPI",
	HandlerType: (*GroupAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetGroup",
			Handler:    _GroupAPI_GetGroup_Handler,
		},
		{
			MethodName: "GetGroupByClaim",
			Handler:    _GroupAPI_GetGroupByClaim_Handler,
		},
		{
			MethodName: "GetMembers",
			Handler:    _GroupAPI_GetMembers_Handler,
		},
		{
			MethodName: "HasMember",
			Handler:    _GroupAPI_HasMember_Handler,
		},
		{
			MethodName: "FindGroups",
			Handler:    _GroupAPI_FindGroups_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cs3/identity/group/v1beta1/group_api.proto",
}
