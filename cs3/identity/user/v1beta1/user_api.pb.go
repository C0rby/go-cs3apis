// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cs3/identity/user/v1beta1/user_api.proto

package userv1beta1

import (
	context "context"
	fmt "fmt"
	v1beta12 "github.com/cs3org/go-cs3apis/cs3/identity/group/v1beta1"
	v1beta11 "github.com/cs3org/go-cs3apis/cs3/rpc/v1beta1"
	v1beta1 "github.com/cs3org/go-cs3apis/cs3/types/v1beta1"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GetUserRequest struct {
	// OPTIONAL.
	// Opaque information.
	Opaque *v1beta1.Opaque `protobuf:"bytes,1,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// REQUIRED.
	// The id of the user.
	UserId               *UserId  `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetUserRequest) Reset()         { *m = GetUserRequest{} }
func (m *GetUserRequest) String() string { return proto.CompactTextString(m) }
func (*GetUserRequest) ProtoMessage()    {}
func (*GetUserRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb4e4164505d2418, []int{0}
}

func (m *GetUserRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetUserRequest.Unmarshal(m, b)
}
func (m *GetUserRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetUserRequest.Marshal(b, m, deterministic)
}
func (m *GetUserRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUserRequest.Merge(m, src)
}
func (m *GetUserRequest) XXX_Size() int {
	return xxx_messageInfo_GetUserRequest.Size(m)
}
func (m *GetUserRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUserRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetUserRequest proto.InternalMessageInfo

func (m *GetUserRequest) GetOpaque() *v1beta1.Opaque {
	if m != nil {
		return m.Opaque
	}
	return nil
}

func (m *GetUserRequest) GetUserId() *UserId {
	if m != nil {
		return m.UserId
	}
	return nil
}

type GetUserResponse struct {
	// REQUIRED.
	// The response status.
	Status *v1beta11.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// OPTIONAL.
	// Opaque information.
	Opaque *v1beta1.Opaque `protobuf:"bytes,2,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// REQUIRED.
	// The user information.
	User                 *User    `protobuf:"bytes,3,opt,name=user,proto3" json:"user,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetUserResponse) Reset()         { *m = GetUserResponse{} }
func (m *GetUserResponse) String() string { return proto.CompactTextString(m) }
func (*GetUserResponse) ProtoMessage()    {}
func (*GetUserResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb4e4164505d2418, []int{1}
}

func (m *GetUserResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetUserResponse.Unmarshal(m, b)
}
func (m *GetUserResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetUserResponse.Marshal(b, m, deterministic)
}
func (m *GetUserResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUserResponse.Merge(m, src)
}
func (m *GetUserResponse) XXX_Size() int {
	return xxx_messageInfo_GetUserResponse.Size(m)
}
func (m *GetUserResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUserResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetUserResponse proto.InternalMessageInfo

func (m *GetUserResponse) GetStatus() *v1beta11.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *GetUserResponse) GetOpaque() *v1beta1.Opaque {
	if m != nil {
		return m.Opaque
	}
	return nil
}

func (m *GetUserResponse) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

type GetUserByClaimRequest struct {
	// OPTIONAL.
	// Opaque information.
	Opaque *v1beta1.Opaque `protobuf:"bytes,1,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// REQUIRED.
	// The claim on the basis of which users will be filtered.
	Claim string `protobuf:"bytes,2,opt,name=claim,proto3" json:"claim,omitempty"`
	// REQUIRED.
	// The value of the claim to find the specific user.
	Value                string   `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetUserByClaimRequest) Reset()         { *m = GetUserByClaimRequest{} }
func (m *GetUserByClaimRequest) String() string { return proto.CompactTextString(m) }
func (*GetUserByClaimRequest) ProtoMessage()    {}
func (*GetUserByClaimRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb4e4164505d2418, []int{2}
}

func (m *GetUserByClaimRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetUserByClaimRequest.Unmarshal(m, b)
}
func (m *GetUserByClaimRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetUserByClaimRequest.Marshal(b, m, deterministic)
}
func (m *GetUserByClaimRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUserByClaimRequest.Merge(m, src)
}
func (m *GetUserByClaimRequest) XXX_Size() int {
	return xxx_messageInfo_GetUserByClaimRequest.Size(m)
}
func (m *GetUserByClaimRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUserByClaimRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetUserByClaimRequest proto.InternalMessageInfo

func (m *GetUserByClaimRequest) GetOpaque() *v1beta1.Opaque {
	if m != nil {
		return m.Opaque
	}
	return nil
}

func (m *GetUserByClaimRequest) GetClaim() string {
	if m != nil {
		return m.Claim
	}
	return ""
}

func (m *GetUserByClaimRequest) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type GetUserByClaimResponse struct {
	// REQUIRED.
	// The response status.
	Status *v1beta11.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// OPTIONAL.
	// Opaque information.
	Opaque *v1beta1.Opaque `protobuf:"bytes,2,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// REQUIRED.
	// The user information.
	User                 *User    `protobuf:"bytes,3,opt,name=user,proto3" json:"user,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetUserByClaimResponse) Reset()         { *m = GetUserByClaimResponse{} }
func (m *GetUserByClaimResponse) String() string { return proto.CompactTextString(m) }
func (*GetUserByClaimResponse) ProtoMessage()    {}
func (*GetUserByClaimResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb4e4164505d2418, []int{3}
}

func (m *GetUserByClaimResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetUserByClaimResponse.Unmarshal(m, b)
}
func (m *GetUserByClaimResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetUserByClaimResponse.Marshal(b, m, deterministic)
}
func (m *GetUserByClaimResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUserByClaimResponse.Merge(m, src)
}
func (m *GetUserByClaimResponse) XXX_Size() int {
	return xxx_messageInfo_GetUserByClaimResponse.Size(m)
}
func (m *GetUserByClaimResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUserByClaimResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetUserByClaimResponse proto.InternalMessageInfo

func (m *GetUserByClaimResponse) GetStatus() *v1beta11.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *GetUserByClaimResponse) GetOpaque() *v1beta1.Opaque {
	if m != nil {
		return m.Opaque
	}
	return nil
}

func (m *GetUserByClaimResponse) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

type GetUserGroupsRequest struct {
	// OPTIONAL.
	// Opaque information.
	Opaque *v1beta1.Opaque `protobuf:"bytes,1,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// REQUIRED.
	// The id of the user.
	UserId               *UserId  `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetUserGroupsRequest) Reset()         { *m = GetUserGroupsRequest{} }
func (m *GetUserGroupsRequest) String() string { return proto.CompactTextString(m) }
func (*GetUserGroupsRequest) ProtoMessage()    {}
func (*GetUserGroupsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb4e4164505d2418, []int{4}
}

func (m *GetUserGroupsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetUserGroupsRequest.Unmarshal(m, b)
}
func (m *GetUserGroupsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetUserGroupsRequest.Marshal(b, m, deterministic)
}
func (m *GetUserGroupsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUserGroupsRequest.Merge(m, src)
}
func (m *GetUserGroupsRequest) XXX_Size() int {
	return xxx_messageInfo_GetUserGroupsRequest.Size(m)
}
func (m *GetUserGroupsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUserGroupsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetUserGroupsRequest proto.InternalMessageInfo

func (m *GetUserGroupsRequest) GetOpaque() *v1beta1.Opaque {
	if m != nil {
		return m.Opaque
	}
	return nil
}

func (m *GetUserGroupsRequest) GetUserId() *UserId {
	if m != nil {
		return m.UserId
	}
	return nil
}

type GetUserGroupsResponse struct {
	// REQUIRED.
	// The response status.
	Status *v1beta11.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// OPTIONAL.
	// Opaque information.
	Opaque *v1beta1.Opaque `protobuf:"bytes,2,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// REQUIRED.
	// The groups for the user.
	Groups               []string `protobuf:"bytes,3,rep,name=groups,proto3" json:"groups,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetUserGroupsResponse) Reset()         { *m = GetUserGroupsResponse{} }
func (m *GetUserGroupsResponse) String() string { return proto.CompactTextString(m) }
func (*GetUserGroupsResponse) ProtoMessage()    {}
func (*GetUserGroupsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb4e4164505d2418, []int{5}
}

func (m *GetUserGroupsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetUserGroupsResponse.Unmarshal(m, b)
}
func (m *GetUserGroupsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetUserGroupsResponse.Marshal(b, m, deterministic)
}
func (m *GetUserGroupsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUserGroupsResponse.Merge(m, src)
}
func (m *GetUserGroupsResponse) XXX_Size() int {
	return xxx_messageInfo_GetUserGroupsResponse.Size(m)
}
func (m *GetUserGroupsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUserGroupsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetUserGroupsResponse proto.InternalMessageInfo

func (m *GetUserGroupsResponse) GetStatus() *v1beta11.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *GetUserGroupsResponse) GetOpaque() *v1beta1.Opaque {
	if m != nil {
		return m.Opaque
	}
	return nil
}

func (m *GetUserGroupsResponse) GetGroups() []string {
	if m != nil {
		return m.Groups
	}
	return nil
}

type IsInGroupRequest struct {
	// OPTIONAL.
	// Opaque information.
	Opaque *v1beta1.Opaque `protobuf:"bytes,1,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// REQUIRED.
	// The id of the user.
	UserId *UserId `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// REQUIRED.
	// The id of the group to check.
	GroupId              *v1beta12.GroupId `protobuf:"bytes,3,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *IsInGroupRequest) Reset()         { *m = IsInGroupRequest{} }
func (m *IsInGroupRequest) String() string { return proto.CompactTextString(m) }
func (*IsInGroupRequest) ProtoMessage()    {}
func (*IsInGroupRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb4e4164505d2418, []int{6}
}

func (m *IsInGroupRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IsInGroupRequest.Unmarshal(m, b)
}
func (m *IsInGroupRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IsInGroupRequest.Marshal(b, m, deterministic)
}
func (m *IsInGroupRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsInGroupRequest.Merge(m, src)
}
func (m *IsInGroupRequest) XXX_Size() int {
	return xxx_messageInfo_IsInGroupRequest.Size(m)
}
func (m *IsInGroupRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_IsInGroupRequest.DiscardUnknown(m)
}

var xxx_messageInfo_IsInGroupRequest proto.InternalMessageInfo

func (m *IsInGroupRequest) GetOpaque() *v1beta1.Opaque {
	if m != nil {
		return m.Opaque
	}
	return nil
}

func (m *IsInGroupRequest) GetUserId() *UserId {
	if m != nil {
		return m.UserId
	}
	return nil
}

func (m *IsInGroupRequest) GetGroupId() *v1beta12.GroupId {
	if m != nil {
		return m.GroupId
	}
	return nil
}

type IsInGroupResponse struct {
	// REQUIRED.
	// The response status.
	Status *v1beta11.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// OPTIONAL.
	// Opaque information.
	Opaque *v1beta1.Opaque `protobuf:"bytes,2,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// REQUIRED.
	// Tells if the user belongs to the group.
	Ok                   bool     `protobuf:"varint,3,opt,name=ok,proto3" json:"ok,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IsInGroupResponse) Reset()         { *m = IsInGroupResponse{} }
func (m *IsInGroupResponse) String() string { return proto.CompactTextString(m) }
func (*IsInGroupResponse) ProtoMessage()    {}
func (*IsInGroupResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb4e4164505d2418, []int{7}
}

func (m *IsInGroupResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IsInGroupResponse.Unmarshal(m, b)
}
func (m *IsInGroupResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IsInGroupResponse.Marshal(b, m, deterministic)
}
func (m *IsInGroupResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsInGroupResponse.Merge(m, src)
}
func (m *IsInGroupResponse) XXX_Size() int {
	return xxx_messageInfo_IsInGroupResponse.Size(m)
}
func (m *IsInGroupResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_IsInGroupResponse.DiscardUnknown(m)
}

var xxx_messageInfo_IsInGroupResponse proto.InternalMessageInfo

func (m *IsInGroupResponse) GetStatus() *v1beta11.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *IsInGroupResponse) GetOpaque() *v1beta1.Opaque {
	if m != nil {
		return m.Opaque
	}
	return nil
}

func (m *IsInGroupResponse) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

type FindUsersRequest struct {
	// OPTIONAL.
	// Opaque information.
	Opaque *v1beta1.Opaque `protobuf:"bytes,1,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// REQUIRED. TODO(labkode): create proper filters for most common searches.
	// The filter to apply.
	Filter               string   `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FindUsersRequest) Reset()         { *m = FindUsersRequest{} }
func (m *FindUsersRequest) String() string { return proto.CompactTextString(m) }
func (*FindUsersRequest) ProtoMessage()    {}
func (*FindUsersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb4e4164505d2418, []int{8}
}

func (m *FindUsersRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FindUsersRequest.Unmarshal(m, b)
}
func (m *FindUsersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FindUsersRequest.Marshal(b, m, deterministic)
}
func (m *FindUsersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindUsersRequest.Merge(m, src)
}
func (m *FindUsersRequest) XXX_Size() int {
	return xxx_messageInfo_FindUsersRequest.Size(m)
}
func (m *FindUsersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FindUsersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FindUsersRequest proto.InternalMessageInfo

func (m *FindUsersRequest) GetOpaque() *v1beta1.Opaque {
	if m != nil {
		return m.Opaque
	}
	return nil
}

func (m *FindUsersRequest) GetFilter() string {
	if m != nil {
		return m.Filter
	}
	return ""
}

type FindUsersResponse struct {
	// REQUIRED.
	// The response status.
	Status *v1beta11.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// OPTIONAL.
	// Opaque information.
	Opaque *v1beta1.Opaque `protobuf:"bytes,2,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// REQUIRED.
	// The users matching the specified filter.
	Users                []*User  `protobuf:"bytes,3,rep,name=users,proto3" json:"users,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FindUsersResponse) Reset()         { *m = FindUsersResponse{} }
func (m *FindUsersResponse) String() string { return proto.CompactTextString(m) }
func (*FindUsersResponse) ProtoMessage()    {}
func (*FindUsersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb4e4164505d2418, []int{9}
}

func (m *FindUsersResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FindUsersResponse.Unmarshal(m, b)
}
func (m *FindUsersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FindUsersResponse.Marshal(b, m, deterministic)
}
func (m *FindUsersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindUsersResponse.Merge(m, src)
}
func (m *FindUsersResponse) XXX_Size() int {
	return xxx_messageInfo_FindUsersResponse.Size(m)
}
func (m *FindUsersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FindUsersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FindUsersResponse proto.InternalMessageInfo

func (m *FindUsersResponse) GetStatus() *v1beta11.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *FindUsersResponse) GetOpaque() *v1beta1.Opaque {
	if m != nil {
		return m.Opaque
	}
	return nil
}

func (m *FindUsersResponse) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

func init() {
	proto.RegisterType((*GetUserRequest)(nil), "cs3.identity.user.v1beta1.GetUserRequest")
	proto.RegisterType((*GetUserResponse)(nil), "cs3.identity.user.v1beta1.GetUserResponse")
	proto.RegisterType((*GetUserByClaimRequest)(nil), "cs3.identity.user.v1beta1.GetUserByClaimRequest")
	proto.RegisterType((*GetUserByClaimResponse)(nil), "cs3.identity.user.v1beta1.GetUserByClaimResponse")
	proto.RegisterType((*GetUserGroupsRequest)(nil), "cs3.identity.user.v1beta1.GetUserGroupsRequest")
	proto.RegisterType((*GetUserGroupsResponse)(nil), "cs3.identity.user.v1beta1.GetUserGroupsResponse")
	proto.RegisterType((*IsInGroupRequest)(nil), "cs3.identity.user.v1beta1.IsInGroupRequest")
	proto.RegisterType((*IsInGroupResponse)(nil), "cs3.identity.user.v1beta1.IsInGroupResponse")
	proto.RegisterType((*FindUsersRequest)(nil), "cs3.identity.user.v1beta1.FindUsersRequest")
	proto.RegisterType((*FindUsersResponse)(nil), "cs3.identity.user.v1beta1.FindUsersResponse")
}

func init() {
	proto.RegisterFile("cs3/identity/user/v1beta1/user_api.proto", fileDescriptor_fb4e4164505d2418)
}

var fileDescriptor_fb4e4164505d2418 = []byte{
	// 620 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x56, 0xc1, 0x6e, 0xd3, 0x4c,
	0x10, 0x96, 0x9d, 0xd6, 0x69, 0xa6, 0xff, 0x5f, 0x5a, 0xab, 0x84, 0xc4, 0xa2, 0xa2, 0x98, 0x4b,
	0x5a, 0x90, 0xd3, 0x34, 0xe2, 0xc2, 0x01, 0x89, 0x44, 0xa2, 0xf2, 0x89, 0xc8, 0xa8, 0x1c, 0x50,
	0x10, 0xb8, 0xce, 0xb6, 0xb2, 0x9a, 0xc6, 0xae, 0x77, 0x1d, 0x29, 0x5c, 0x38, 0x21, 0x1e, 0x80,
	0x37, 0xe0, 0xc0, 0xa1, 0x07, 0x24, 0x1e, 0x81, 0x2b, 0x4f, 0x85, 0x76, 0x76, 0xb3, 0xc4, 0x41,
	0x49, 0x8c, 0x2a, 0xa5, 0x9c, 0x92, 0xf1, 0xf7, 0x7d, 0x33, 0xdf, 0xce, 0xce, 0xae, 0x0d, 0xb5,
	0x80, 0x36, 0xeb, 0x61, 0x8f, 0x0c, 0x58, 0xc8, 0x46, 0xf5, 0x94, 0x92, 0xa4, 0x3e, 0x6c, 0x9c,
	0x10, 0xe6, 0x37, 0x30, 0x78, 0xeb, 0xc7, 0xa1, 0x13, 0x27, 0x11, 0x8b, 0xcc, 0x6a, 0x40, 0x9b,
	0xce, 0x98, 0xe9, 0x70, 0xd0, 0x91, 0x4c, 0x6b, 0x3f, 0x93, 0xe4, 0x2c, 0x89, 0xd2, 0x58, 0x65,
	0x49, 0x08, 0x8d, 0xd2, 0x24, 0x20, 0x54, 0xa4, 0xb1, 0xf6, 0x66, 0x17, 0x9c, 0xa6, 0xde, 0xe5,
	0xd4, 0x24, 0x0e, 0x14, 0x81, 0x32, 0x9f, 0xa5, 0x63, 0x74, 0x87, 0xa3, 0x6c, 0x14, 0x13, 0xaa,
	0x70, 0x8c, 0x04, 0x6c, 0x7f, 0x80, 0x8d, 0x23, 0xc2, 0x8e, 0x29, 0x49, 0x3c, 0x72, 0x99, 0x12,
	0xca, 0xcc, 0x06, 0x18, 0x51, 0xec, 0x5f, 0xa6, 0xa4, 0xa2, 0xed, 0x6a, 0xb5, 0xf5, 0xc3, 0xaa,
	0xc3, 0x57, 0x24, 0x34, 0x32, 0x83, 0xf3, 0x02, 0x09, 0x9e, 0x24, 0x9a, 0x4f, 0xa0, 0x88, 0x5d,
	0x08, 0x7b, 0x15, 0x1d, 0x35, 0xf7, 0x9d, 0x99, 0x5d, 0x70, 0x78, 0x2d, 0xb7, 0xe7, 0x19, 0x29,
	0xfe, 0xda, 0x57, 0x1a, 0xdc, 0x52, 0x0e, 0x68, 0x1c, 0x0d, 0x28, 0x31, 0xeb, 0x60, 0x88, 0x35,
	0x48, 0x0b, 0x77, 0x30, 0x5d, 0x12, 0x07, 0x2a, 0xc9, 0x4b, 0x84, 0x3d, 0x49, 0x9b, 0xf0, 0xac,
	0xe7, 0xf5, 0xdc, 0x84, 0x15, 0xee, 0xa0, 0x52, 0x40, 0xc1, 0xbd, 0x05, 0x86, 0x3d, 0x24, 0xdb,
	0x43, 0xb8, 0x2d, 0xbd, 0xb6, 0x46, 0xed, 0xbe, 0x1f, 0x5e, 0x5c, 0xa3, 0x69, 0xdb, 0xb0, 0x1a,
	0xf0, 0x14, 0x68, 0xb9, 0xe4, 0x89, 0x80, 0x3f, 0x1d, 0xfa, 0xfd, 0x94, 0xa0, 0xaf, 0x92, 0x27,
	0x02, 0xfb, 0xbb, 0x06, 0xe5, 0xe9, 0xc2, 0xff, 0x7a, 0xaf, 0x3e, 0x6a, 0xb0, 0x2d, 0x3d, 0x1f,
	0xf1, 0x51, 0xa7, 0x37, 0x34, 0x60, 0x9f, 0x35, 0xb5, 0x69, 0x63, 0x1f, 0x4b, 0x6c, 0x5d, 0x19,
	0x0c, 0x3c, 0xe8, 0xb4, 0x52, 0xd8, 0x2d, 0xd4, 0x4a, 0x9e, 0x8c, 0xec, 0x1f, 0x1a, 0x6c, 0xba,
	0xd4, 0x1d, 0xa0, 0xa5, 0x9b, 0xe9, 0x8c, 0xf9, 0x14, 0xd6, 0xd0, 0x0d, 0x17, 0x8b, 0xad, 0x7d,
	0x90, 0x15, 0x23, 0xaa, 0xd4, 0x68, 0xd5, 0xed, 0x79, 0xc5, 0x33, 0xf1, 0xc7, 0xfe, 0xa4, 0xc1,
	0xd6, 0xc4, 0x1a, 0x96, 0xd8, 0xd5, 0x0d, 0xd0, 0xa3, 0x73, 0xf4, 0xbc, 0xe6, 0xe9, 0xd1, 0xb9,
	0xfd, 0x06, 0x36, 0x9f, 0x87, 0x83, 0x1e, 0x5f, 0xdf, 0x75, 0xc6, 0xac, 0x0c, 0xc6, 0x69, 0xd8,
	0x67, 0x24, 0x91, 0x67, 0x52, 0x46, 0xf6, 0x37, 0x0d, 0xb6, 0x26, 0xf2, 0x2f, 0x71, 0xa1, 0x8f,
	0x61, 0x95, 0x6f, 0x96, 0x98, 0x9e, 0x1c, 0x47, 0x4f, 0xb0, 0x0f, 0xbf, 0xae, 0x40, 0x91, 0xc7,
	0xcf, 0x3a, 0xae, 0xf9, 0x0e, 0x8a, 0x72, 0xfc, 0xcd, 0xbd, 0x39, 0xf2, 0xec, 0x5b, 0xc0, 0xda,
	0xcf, 0x43, 0x95, 0x8d, 0x48, 0xd5, 0x3b, 0x44, 0x5e, 0x4e, 0xe6, 0xc1, 0x62, 0x75, 0xf6, 0x02,
	0xb5, 0x1a, 0x7f, 0xa1, 0x90, 0x65, 0x13, 0xf8, 0x3f, 0x73, 0xae, 0xcd, 0xfa, 0xe2, 0x1c, 0x99,
	0x9b, 0xc8, 0x3a, 0xc8, 0x2f, 0x90, 0x35, 0x4f, 0xa1, 0xa4, 0x26, 0xde, 0x7c, 0x38, 0x47, 0x3e,
	0x7d, 0xb6, 0xad, 0x47, 0xf9, 0xc8, 0xbf, 0xeb, 0xa8, 0x81, 0x9b, 0x5b, 0x67, 0x7a, 0xec, 0xe7,
	0xd6, 0xf9, 0x63, 0x86, 0x5b, 0xef, 0x61, 0x27, 0x88, 0x2e, 0x66, 0x4b, 0x5a, 0xff, 0xe1, 0x18,
	0xc5, 0x61, 0x87, 0x7f, 0x2d, 0x74, 0xb4, 0xd7, 0xeb, 0x1c, 0x95, 0xe0, 0x17, 0xbd, 0xd0, 0x76,
	0x8f, 0xaf, 0xf4, 0x6a, 0x9b, 0x36, 0x1d, 0x77, 0x2c, 0xe7, 0x02, 0xe7, 0x55, 0xa3, 0xc5, 0x19,
	0x3f, 0x11, 0xeb, 0x8e, 0xb1, 0x2e, 0xc7, 0xba, 0x12, 0x3b, 0x31, 0xf0, 0x0b, 0xa4, 0xf9, 0x2b,
	0x00, 0x00, 0xff, 0xff, 0xbc, 0x44, 0xe8, 0xc1, 0x5c, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// UserAPIClient is the client API for UserAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserAPIClient interface {
	// Gets the information about a user by the user id.
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
	// Gets the information about a user based on a specified claim.
	GetUserByClaim(ctx context.Context, in *GetUserByClaimRequest, opts ...grpc.CallOption) (*GetUserByClaimResponse, error)
	// Gets the groups of a user.
	GetUserGroups(ctx context.Context, in *GetUserGroupsRequest, opts ...grpc.CallOption) (*GetUserGroupsResponse, error)
	// Tells if the user is in a certain group.
	IsInGroup(ctx context.Context, in *IsInGroupRequest, opts ...grpc.CallOption) (*IsInGroupResponse, error)
	// Finds users by any attribute of the user.
	// TODO(labkode): to define the filters that make more sense.
	FindUsers(ctx context.Context, in *FindUsersRequest, opts ...grpc.CallOption) (*FindUsersResponse, error)
}

type userAPIClient struct {
	cc *grpc.ClientConn
}

func NewUserAPIClient(cc *grpc.ClientConn) UserAPIClient {
	return &userAPIClient{cc}
}

func (c *userAPIClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	out := new(GetUserResponse)
	err := c.cc.Invoke(ctx, "/cs3.identity.user.v1beta1.UserAPI/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) GetUserByClaim(ctx context.Context, in *GetUserByClaimRequest, opts ...grpc.CallOption) (*GetUserByClaimResponse, error) {
	out := new(GetUserByClaimResponse)
	err := c.cc.Invoke(ctx, "/cs3.identity.user.v1beta1.UserAPI/GetUserByClaim", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) GetUserGroups(ctx context.Context, in *GetUserGroupsRequest, opts ...grpc.CallOption) (*GetUserGroupsResponse, error) {
	out := new(GetUserGroupsResponse)
	err := c.cc.Invoke(ctx, "/cs3.identity.user.v1beta1.UserAPI/GetUserGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) IsInGroup(ctx context.Context, in *IsInGroupRequest, opts ...grpc.CallOption) (*IsInGroupResponse, error) {
	out := new(IsInGroupResponse)
	err := c.cc.Invoke(ctx, "/cs3.identity.user.v1beta1.UserAPI/IsInGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) FindUsers(ctx context.Context, in *FindUsersRequest, opts ...grpc.CallOption) (*FindUsersResponse, error) {
	out := new(FindUsersResponse)
	err := c.cc.Invoke(ctx, "/cs3.identity.user.v1beta1.UserAPI/FindUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserAPIServer is the server API for UserAPI service.
type UserAPIServer interface {
	// Gets the information about a user by the user id.
	GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error)
	// Gets the information about a user based on a specified claim.
	GetUserByClaim(context.Context, *GetUserByClaimRequest) (*GetUserByClaimResponse, error)
	// Gets the groups of a user.
	GetUserGroups(context.Context, *GetUserGroupsRequest) (*GetUserGroupsResponse, error)
	// Tells if the user is in a certain group.
	IsInGroup(context.Context, *IsInGroupRequest) (*IsInGroupResponse, error)
	// Finds users by any attribute of the user.
	// TODO(labkode): to define the filters that make more sense.
	FindUsers(context.Context, *FindUsersRequest) (*FindUsersResponse, error)
}

// UnimplementedUserAPIServer can be embedded to have forward compatible implementations.
type UnimplementedUserAPIServer struct {
}

func (*UnimplementedUserAPIServer) GetUser(ctx context.Context, req *GetUserRequest) (*GetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (*UnimplementedUserAPIServer) GetUserByClaim(ctx context.Context, req *GetUserByClaimRequest) (*GetUserByClaimResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByClaim not implemented")
}
func (*UnimplementedUserAPIServer) GetUserGroups(ctx context.Context, req *GetUserGroupsRequest) (*GetUserGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserGroups not implemented")
}
func (*UnimplementedUserAPIServer) IsInGroup(ctx context.Context, req *IsInGroupRequest) (*IsInGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsInGroup not implemented")
}
func (*UnimplementedUserAPIServer) FindUsers(ctx context.Context, req *FindUsersRequest) (*FindUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindUsers not implemented")
}

func RegisterUserAPIServer(s *grpc.Server, srv UserAPIServer) {
	s.RegisterService(&_UserAPI_serviceDesc, srv)
}

func _UserAPI_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.identity.user.v1beta1.UserAPI/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_GetUserByClaim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByClaimRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).GetUserByClaim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.identity.user.v1beta1.UserAPI/GetUserByClaim",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).GetUserByClaim(ctx, req.(*GetUserByClaimRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_GetUserGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).GetUserGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.identity.user.v1beta1.UserAPI/GetUserGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).GetUserGroups(ctx, req.(*GetUserGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_IsInGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsInGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).IsInGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.identity.user.v1beta1.UserAPI/IsInGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).IsInGroup(ctx, req.(*IsInGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_FindUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).FindUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.identity.user.v1beta1.UserAPI/FindUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).FindUsers(ctx, req.(*FindUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cs3.identity.user.v1beta1.UserAPI",
	HandlerType: (*UserAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUser",
			Handler:    _UserAPI_GetUser_Handler,
		},
		{
			MethodName: "GetUserByClaim",
			Handler:    _UserAPI_GetUserByClaim_Handler,
		},
		{
			MethodName: "GetUserGroups",
			Handler:    _UserAPI_GetUserGroups_Handler,
		},
		{
			MethodName: "IsInGroup",
			Handler:    _UserAPI_IsInGroup_Handler,
		},
		{
			MethodName: "FindUsers",
			Handler:    _UserAPI_FindUsers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cs3/identity/user/v1beta1/user_api.proto",
}
